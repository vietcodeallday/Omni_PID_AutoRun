
LV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  08010ea0  08010ea0  00020ea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011650  08011650  00030290  2**0
                  CONTENTS
  4 .ARM          00000008  08011650  08011650  00021650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011658  08011658  00030290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011658  08011658  00021658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801165c  0801165c  0002165c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  08011660  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030290  2**0
                  CONTENTS
 10 .bss          000058a4  20000290  20000290  00030290  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005b34  20005b34  00030290  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030290  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c6a1  00000000  00000000  00030303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000040af  00000000  00000000  0004c9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001908  00000000  00000000  00050a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000136e  00000000  00000000  00052360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024526  00000000  00000000  000536ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e0f6  00000000  00000000  00077bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000daddb  00000000  00000000  00095cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008050  00000000  00000000  00170ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  00178b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000290 	.word	0x20000290
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010e88 	.word	0x08010e88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000294 	.word	0x20000294
 80001cc:	08010e88 	.word	0x08010e88

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PIN GPIO_PIN_8
#define TRIG_PORT GPIOC


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7f1b      	ldrb	r3, [r3, #28]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	f040 8083 	bne.w	8001108 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8001002:	4b45      	ldr	r3, [pc, #276]	; (8001118 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d11a      	bne.n	8001040 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800100a:	2100      	movs	r1, #0
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f005 f9e7 	bl	80063e0 <HAL_TIM_ReadCapturedValue>
 8001012:	4603      	mov	r3, r0
 8001014:	4a41      	ldr	r2, [pc, #260]	; (800111c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001016:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001018:	4b3f      	ldr	r3, [pc, #252]	; (8001118 <HAL_TIM_IC_CaptureCallback+0x128>)
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6a1a      	ldr	r2, [r3, #32]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f022 020a 	bic.w	r2, r2, #10
 800102c:	621a      	str	r2, [r3, #32]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6a1a      	ldr	r2, [r3, #32]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f042 0202 	orr.w	r2, r2, #2
 800103c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC1);
		}
	}
}
 800103e:	e063      	b.n	8001108 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001040:	4b35      	ldr	r3, [pc, #212]	; (8001118 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d15f      	bne.n	8001108 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001048:	2100      	movs	r1, #0
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f005 f9c8 	bl	80063e0 <HAL_TIM_ReadCapturedValue>
 8001050:	4603      	mov	r3, r0
 8001052:	4a33      	ldr	r2, [pc, #204]	; (8001120 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001054:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 800105e:	4b30      	ldr	r3, [pc, #192]	; (8001120 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4b2e      	ldr	r3, [pc, #184]	; (800111c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	429a      	cmp	r2, r3
 8001068:	d907      	bls.n	800107a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 800106a:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <HAL_TIM_IC_CaptureCallback+0x130>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	4b2b      	ldr	r3, [pc, #172]	; (800111c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	4a2b      	ldr	r2, [pc, #172]	; (8001124 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	e00f      	b.n	800109a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 800107a:	4b28      	ldr	r3, [pc, #160]	; (800111c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	429a      	cmp	r2, r3
 8001084:	d909      	bls.n	800109a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001086:	4b26      	ldr	r3, [pc, #152]	; (8001120 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4b24      	ldr	r3, [pc, #144]	; (800111c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001094:	33ff      	adds	r3, #255	; 0xff
 8001096:	4a23      	ldr	r2, [pc, #140]	; (8001124 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001098:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 800109a:	4b22      	ldr	r3, [pc, #136]	; (8001124 <HAL_TIM_IC_CaptureCallback+0x134>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fa30 	bl	8000504 <__aeabi_ui2d>
 80010a4:	a31a      	add	r3, pc, #104	; (adr r3, 8001110 <HAL_TIM_IC_CaptureCallback+0x120>)
 80010a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010aa:	f7ff faa5 	bl	80005f8 <__aeabi_dmul>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010be:	f7ff fbc5 	bl	800084c <__aeabi_ddiv>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4610      	mov	r0, r2
 80010c8:	4619      	mov	r1, r3
 80010ca:	f7ff fd6d 	bl	8000ba8 <__aeabi_d2uiz>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_TIM_IC_CaptureCallback+0x138>)
 80010d4:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_TIM_IC_CaptureCallback+0x128>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6a1a      	ldr	r2, [r3, #32]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 020a 	bic.w	r2, r2, #10
 80010ea:	621a      	str	r2, [r3, #32]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6a12      	ldr	r2, [r2, #32]
 80010f6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC1);
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0202 	bic.w	r2, r2, #2
 8001106:	60da      	str	r2, [r3, #12]
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	b020c49c 	.word	0xb020c49c
 8001114:	3fa16872 	.word	0x3fa16872
 8001118:	200002b8 	.word	0x200002b8
 800111c:	200002ac 	.word	0x200002ac
 8001120:	200002b0 	.word	0x200002b0
 8001124:	200002b4 	.word	0x200002b4
 8001128:	200002b9 	.word	0x200002b9
 800112c:	20000434 	.word	0x20000434

08001130 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
return 0;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001154:	f002 fe8a 	bl	8003e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001158:	f000 f8b4 	bl	80012c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115c:	f000 fbfa 	bl	8001954 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001160:	f000 f94e 	bl	8001400 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001164:	f000 f9a4 	bl	80014b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001168:	f000 f9f6 	bl	8001558 <MX_TIM4_Init>
  MX_TIM5_Init();
 800116c:	f000 fa48 	bl	8001600 <MX_TIM5_Init>
  MX_TIM9_Init();
 8001170:	f000 fb3a 	bl	80017e8 <MX_TIM9_Init>
  MX_SPI3_Init();
 8001174:	f000 f90e 	bl	8001394 <MX_SPI3_Init>
  MX_TIM8_Init();
 8001178:	f000 fac2 	bl	8001700 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800117c:	f000 fb96 	bl	80018ac <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001180:	f000 fbbe 	bl	8001900 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
//  PCA9685_Init(&hi2c1);

  	__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3, 100); //motor 1
 8001184:	4b36      	ldr	r3, [pc, #216]	; (8001260 <main+0x110>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2264      	movs	r2, #100	; 0x64
 800118a:	63da      	str	r2, [r3, #60]	; 0x3c
  	__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_4, 100); //motor 2
 800118c:	4b34      	ldr	r3, [pc, #208]	; (8001260 <main+0x110>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2264      	movs	r2, #100	; 0x64
 8001192:	641a      	str	r2, [r3, #64]	; 0x40
  	__HAL_TIM_SetCompare(&htim9, TIM_CHANNEL_1, 100); //motor 3
 8001194:	4b33      	ldr	r3, [pc, #204]	; (8001264 <main+0x114>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2264      	movs	r2, #100	; 0x64
 800119a:	635a      	str	r2, [r3, #52]	; 0x34

    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800119c:	2108      	movs	r1, #8
 800119e:	4830      	ldr	r0, [pc, #192]	; (8001260 <main+0x110>)
 80011a0:	f004 fa8a 	bl	80056b8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80011a4:	210c      	movs	r1, #12
 80011a6:	482e      	ldr	r0, [pc, #184]	; (8001260 <main+0x110>)
 80011a8:	f004 fa86 	bl	80056b8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80011ac:	2100      	movs	r1, #0
 80011ae:	482d      	ldr	r0, [pc, #180]	; (8001264 <main+0x114>)
 80011b0:	f004 fa82 	bl	80056b8 <HAL_TIM_PWM_Start>

    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80011b4:	2104      	movs	r1, #4
 80011b6:	482c      	ldr	r0, [pc, #176]	; (8001268 <main+0x118>)
 80011b8:	f004 fd6e 	bl	8005c98 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80011bc:	2104      	movs	r1, #4
 80011be:	482b      	ldr	r0, [pc, #172]	; (800126c <main+0x11c>)
 80011c0:	f004 fd6a 	bl	8005c98 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80011c4:	2104      	movs	r1, #4
 80011c6:	482a      	ldr	r0, [pc, #168]	; (8001270 <main+0x120>)
 80011c8:	f004 fd66 	bl	8005c98 <HAL_TIM_Encoder_Start>

    HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 80011cc:	2100      	movs	r1, #0
 80011ce:	4829      	ldr	r0, [pc, #164]	; (8001274 <main+0x124>)
 80011d0:	f004 fb94 	bl	80058fc <HAL_TIM_IC_Start_IT>

//    UARTStdioConfig(USART2,true);

    __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80011d4:	4b28      	ldr	r3, [pc, #160]	; (8001278 <main+0x128>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	4b27      	ldr	r3, [pc, #156]	; (8001278 <main+0x128>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0220 	orr.w	r2, r2, #32
 80011e2:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80011e4:	4b25      	ldr	r3, [pc, #148]	; (800127c <main+0x12c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68da      	ldr	r2, [r3, #12]
 80011ea:	4b24      	ldr	r3, [pc, #144]	; (800127c <main+0x12c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0220 	orr.w	r2, r2, #32
 80011f2:	60da      	str	r2, [r3, #12]


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011f4:	f006 ff08 	bl	8008008 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of AxisDesireQueue */
  AxisDesireQueueHandle = osMessageQueueNew (20, sizeof(uint8_t), &AxisDesireQueue_attributes);
 80011f8:	4a21      	ldr	r2, [pc, #132]	; (8001280 <main+0x130>)
 80011fa:	2101      	movs	r1, #1
 80011fc:	2014      	movs	r0, #20
 80011fe:	f006 fffa 	bl	80081f6 <osMessageQueueNew>
 8001202:	4603      	mov	r3, r0
 8001204:	4a1f      	ldr	r2, [pc, #124]	; (8001284 <main+0x134>)
 8001206:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CONTROL */
  CONTROLHandle = osThreadNew(StartControl, NULL, &CONTROL_attributes);
 8001208:	4a1f      	ldr	r2, [pc, #124]	; (8001288 <main+0x138>)
 800120a:	2100      	movs	r1, #0
 800120c:	481f      	ldr	r0, [pc, #124]	; (800128c <main+0x13c>)
 800120e:	f006 ff45 	bl	800809c <osThreadNew>
 8001212:	4603      	mov	r3, r0
 8001214:	4a1e      	ldr	r2, [pc, #120]	; (8001290 <main+0x140>)
 8001216:	6013      	str	r3, [r2, #0]

  /* creation of AxisXYDesire */
  AxisXYDesireHandle = osThreadNew(StartAxisXYDesire, NULL, &AxisXYDesire_attributes);
 8001218:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <main+0x144>)
 800121a:	2100      	movs	r1, #0
 800121c:	481e      	ldr	r0, [pc, #120]	; (8001298 <main+0x148>)
 800121e:	f006 ff3d 	bl	800809c <osThreadNew>
 8001222:	4603      	mov	r3, r0
 8001224:	4a1d      	ldr	r2, [pc, #116]	; (800129c <main+0x14c>)
 8001226:	6013      	str	r3, [r2, #0]

  /* creation of AutoRun */
  AutoRunHandle = osThreadNew(StartAutoRun, NULL, &AutoRun_attributes);
 8001228:	4a1d      	ldr	r2, [pc, #116]	; (80012a0 <main+0x150>)
 800122a:	2100      	movs	r1, #0
 800122c:	481d      	ldr	r0, [pc, #116]	; (80012a4 <main+0x154>)
 800122e:	f006 ff35 	bl	800809c <osThreadNew>
 8001232:	4603      	mov	r3, r0
 8001234:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <main+0x158>)
 8001236:	6013      	str	r3, [r2, #0]

  /* creation of WitMotion */
  WitMotionHandle = osThreadNew(StartTaskWit, NULL, &WitMotion_attributes);
 8001238:	4a1c      	ldr	r2, [pc, #112]	; (80012ac <main+0x15c>)
 800123a:	2100      	movs	r1, #0
 800123c:	481c      	ldr	r0, [pc, #112]	; (80012b0 <main+0x160>)
 800123e:	f006 ff2d 	bl	800809c <osThreadNew>
 8001242:	4603      	mov	r3, r0
 8001244:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <main+0x164>)
 8001246:	6013      	str	r3, [r2, #0]

  /* creation of myPID */
  myPIDHandle = osThreadNew(StartPID, NULL, &myPID_attributes);
 8001248:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <main+0x168>)
 800124a:	2100      	movs	r1, #0
 800124c:	481b      	ldr	r0, [pc, #108]	; (80012bc <main+0x16c>)
 800124e:	f006 ff25 	bl	800809c <osThreadNew>
 8001252:	4603      	mov	r3, r0
 8001254:	4a1a      	ldr	r2, [pc, #104]	; (80012c0 <main+0x170>)
 8001256:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001258:	f006 fefa 	bl	8008050 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800125c:	e7fe      	b.n	800125c <main+0x10c>
 800125e:	bf00      	nop
 8001260:	200003ec 	.word	0x200003ec
 8001264:	2000047c 	.word	0x2000047c
 8001268:	20000314 	.word	0x20000314
 800126c:	2000035c 	.word	0x2000035c
 8001270:	200003a4 	.word	0x200003a4
 8001274:	20000434 	.word	0x20000434
 8001278:	200004c4 	.word	0x200004c4
 800127c:	2000050c 	.word	0x2000050c
 8001280:	08010fe0 	.word	0x08010fe0
 8001284:	20000568 	.word	0x20000568
 8001288:	08010f2c 	.word	0x08010f2c
 800128c:	08001e05 	.word	0x08001e05
 8001290:	20000554 	.word	0x20000554
 8001294:	08010f50 	.word	0x08010f50
 8001298:	080024c5 	.word	0x080024c5
 800129c:	20000558 	.word	0x20000558
 80012a0:	08010f74 	.word	0x08010f74
 80012a4:	080027d1 	.word	0x080027d1
 80012a8:	2000055c 	.word	0x2000055c
 80012ac:	08010f98 	.word	0x08010f98
 80012b0:	08002841 	.word	0x08002841
 80012b4:	20000560 	.word	0x20000560
 80012b8:	08010fbc 	.word	0x08010fbc
 80012bc:	08002b01 	.word	0x08002b01
 80012c0:	20000564 	.word	0x20000564

080012c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b094      	sub	sp, #80	; 0x50
 80012c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ca:	f107 0320 	add.w	r3, r7, #32
 80012ce:	2230      	movs	r2, #48	; 0x30
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f00a ff65 	bl	800c1a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	4b27      	ldr	r3, [pc, #156]	; (800138c <SystemClock_Config+0xc8>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	4a26      	ldr	r2, [pc, #152]	; (800138c <SystemClock_Config+0xc8>)
 80012f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f6:	6413      	str	r3, [r2, #64]	; 0x40
 80012f8:	4b24      	ldr	r3, [pc, #144]	; (800138c <SystemClock_Config+0xc8>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	4b21      	ldr	r3, [pc, #132]	; (8001390 <SystemClock_Config+0xcc>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a20      	ldr	r2, [pc, #128]	; (8001390 <SystemClock_Config+0xcc>)
 800130e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <SystemClock_Config+0xcc>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001320:	2302      	movs	r3, #2
 8001322:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001324:	2301      	movs	r3, #1
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001328:	2310      	movs	r3, #16
 800132a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132c:	2302      	movs	r3, #2
 800132e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001330:	2300      	movs	r3, #0
 8001332:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001334:	2308      	movs	r3, #8
 8001336:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001338:	2340      	movs	r3, #64	; 0x40
 800133a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800133c:	2302      	movs	r3, #2
 800133e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001340:	2304      	movs	r3, #4
 8001342:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001344:	f107 0320 	add.w	r3, r7, #32
 8001348:	4618      	mov	r0, r3
 800134a:	f003 f8fb 	bl	8004544 <HAL_RCC_OscConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001354:	f001 fbee 	bl	8002b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001358:	230f      	movs	r3, #15
 800135a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800135c:	2302      	movs	r3, #2
 800135e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001360:	23a0      	movs	r3, #160	; 0xa0
 8001362:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f003 fb5e 	bl	8004a34 <HAL_RCC_ClockConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800137e:	f001 fbd9 	bl	8002b34 <Error_Handler>
  }
}
 8001382:	bf00      	nop
 8001384:	3750      	adds	r7, #80	; 0x50
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40007000 	.word	0x40007000

08001394 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <MX_SPI3_Init+0x64>)
 800139a:	4a18      	ldr	r2, [pc, #96]	; (80013fc <MX_SPI3_Init+0x68>)
 800139c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <MX_SPI3_Init+0x64>)
 80013a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_SPI3_Init+0x64>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <MX_SPI3_Init+0x64>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_SPI3_Init+0x64>)
 80013b4:	2202      	movs	r2, #2
 80013b6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <MX_SPI3_Init+0x64>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_SPI3_Init+0x64>)
 80013c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013c4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <MX_SPI3_Init+0x64>)
 80013c8:	2228      	movs	r2, #40	; 0x28
 80013ca:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <MX_SPI3_Init+0x64>)
 80013ce:	2280      	movs	r2, #128	; 0x80
 80013d0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_SPI3_Init+0x64>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013d8:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <MX_SPI3_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <MX_SPI3_Init+0x64>)
 80013e0:	220a      	movs	r2, #10
 80013e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013e4:	4804      	ldr	r0, [pc, #16]	; (80013f8 <MX_SPI3_Init+0x64>)
 80013e6:	f003 fd37 	bl	8004e58 <HAL_SPI_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80013f0:	f001 fba0 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200002bc 	.word	0x200002bc
 80013fc:	40003c00 	.word	0x40003c00

08001400 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	; 0x30
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	2224      	movs	r2, #36	; 0x24
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f00a fec7 	bl	800c1a2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800141c:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <MX_TIM1_Init+0xa8>)
 800141e:	4a23      	ldr	r2, [pc, #140]	; (80014ac <MX_TIM1_Init+0xac>)
 8001420:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001422:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <MX_TIM1_Init+0xa8>)
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <MX_TIM1_Init+0xa8>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <MX_TIM1_Init+0xa8>)
 8001430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001434:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001436:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <MX_TIM1_Init+0xa8>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_TIM1_Init+0xa8>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001442:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <MX_TIM1_Init+0xa8>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001448:	2303      	movs	r3, #3
 800144a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800144c:	2300      	movs	r3, #0
 800144e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001450:	2301      	movs	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001460:	2301      	movs	r3, #1
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	4619      	mov	r1, r3
 8001472:	480d      	ldr	r0, [pc, #52]	; (80014a8 <MX_TIM1_Init+0xa8>)
 8001474:	f004 fb6a 	bl	8005b4c <HAL_TIM_Encoder_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800147e:	f001 fb59 	bl	8002b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	4619      	mov	r1, r3
 800148e:	4806      	ldr	r0, [pc, #24]	; (80014a8 <MX_TIM1_Init+0xa8>)
 8001490:	f005 fc4e 	bl	8006d30 <HAL_TIMEx_MasterConfigSynchronization>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800149a:	f001 fb4b 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	3730      	adds	r7, #48	; 0x30
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000314 	.word	0x20000314
 80014ac:	40010000 	.word	0x40010000

080014b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	; 0x30
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	2224      	movs	r2, #36	; 0x24
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f00a fe6f 	bl	800c1a2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014cc:	4b20      	ldr	r3, [pc, #128]	; (8001550 <MX_TIM3_Init+0xa0>)
 80014ce:	4a21      	ldr	r2, [pc, #132]	; (8001554 <MX_TIM3_Init+0xa4>)
 80014d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014d2:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <MX_TIM3_Init+0xa0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <MX_TIM3_Init+0xa0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <MX_TIM3_Init+0xa0>)
 80014e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e6:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <MX_TIM3_Init+0xa0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <MX_TIM3_Init+0xa0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014f2:	2303      	movs	r3, #3
 80014f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014fa:	2301      	movs	r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800150a:	2301      	movs	r3, #1
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800150e:	2300      	movs	r3, #0
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	4619      	mov	r1, r3
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <MX_TIM3_Init+0xa0>)
 800151e:	f004 fb15 	bl	8005b4c <HAL_TIM_Encoder_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001528:	f001 fb04 	bl	8002b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	4619      	mov	r1, r3
 8001538:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_TIM3_Init+0xa0>)
 800153a:	f005 fbf9 	bl	8006d30 <HAL_TIMEx_MasterConfigSynchronization>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001544:	f001 faf6 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	3730      	adds	r7, #48	; 0x30
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	2000035c 	.word	0x2000035c
 8001554:	40000400 	.word	0x40000400

08001558 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	; 0x30
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	2224      	movs	r2, #36	; 0x24
 8001564:	2100      	movs	r1, #0
 8001566:	4618      	mov	r0, r3
 8001568:	f00a fe1b 	bl	800c1a2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <MX_TIM4_Init+0xa0>)
 8001576:	4a21      	ldr	r2, [pc, #132]	; (80015fc <MX_TIM4_Init+0xa4>)
 8001578:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <MX_TIM4_Init+0xa0>)
 800157c:	2200      	movs	r2, #0
 800157e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <MX_TIM4_Init+0xa0>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <MX_TIM4_Init+0xa0>)
 8001588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800158c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <MX_TIM4_Init+0xa0>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <MX_TIM4_Init+0xa0>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800159a:	2303      	movs	r3, #3
 800159c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015a2:	2301      	movs	r3, #1
 80015a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015b2:	2301      	movs	r3, #1
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	4619      	mov	r1, r3
 80015c4:	480c      	ldr	r0, [pc, #48]	; (80015f8 <MX_TIM4_Init+0xa0>)
 80015c6:	f004 fac1 	bl	8005b4c <HAL_TIM_Encoder_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80015d0:	f001 fab0 	bl	8002b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d4:	2300      	movs	r3, #0
 80015d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	4619      	mov	r1, r3
 80015e0:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_TIM4_Init+0xa0>)
 80015e2:	f005 fba5 	bl	8006d30 <HAL_TIMEx_MasterConfigSynchronization>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80015ec:	f001 faa2 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	3730      	adds	r7, #48	; 0x30
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200003a4 	.word	0x200003a4
 80015fc:	40000800 	.word	0x40000800

08001600 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08e      	sub	sp, #56	; 0x38
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001606:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001614:	f107 0320 	add.w	r3, r7, #32
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
 800162c:	615a      	str	r2, [r3, #20]
 800162e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001630:	4b31      	ldr	r3, [pc, #196]	; (80016f8 <MX_TIM5_Init+0xf8>)
 8001632:	4a32      	ldr	r2, [pc, #200]	; (80016fc <MX_TIM5_Init+0xfc>)
 8001634:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8-1;
 8001636:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <MX_TIM5_Init+0xf8>)
 8001638:	2207      	movs	r2, #7
 800163a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163c:	4b2e      	ldr	r3, [pc, #184]	; (80016f8 <MX_TIM5_Init+0xf8>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 8001642:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <MX_TIM5_Init+0xf8>)
 8001644:	2263      	movs	r2, #99	; 0x63
 8001646:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001648:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <MX_TIM5_Init+0xf8>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164e:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <MX_TIM5_Init+0xf8>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001654:	4828      	ldr	r0, [pc, #160]	; (80016f8 <MX_TIM5_Init+0xf8>)
 8001656:	f003 ff15 	bl	8005484 <HAL_TIM_Base_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8001660:	f001 fa68 	bl	8002b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800166a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800166e:	4619      	mov	r1, r3
 8001670:	4821      	ldr	r0, [pc, #132]	; (80016f8 <MX_TIM5_Init+0xf8>)
 8001672:	f004 fded 	bl	8006250 <HAL_TIM_ConfigClockSource>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 800167c:	f001 fa5a 	bl	8002b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001680:	481d      	ldr	r0, [pc, #116]	; (80016f8 <MX_TIM5_Init+0xf8>)
 8001682:	f003 ffbf 	bl	8005604 <HAL_TIM_PWM_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 800168c:	f001 fa52 	bl	8002b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001698:	f107 0320 	add.w	r3, r7, #32
 800169c:	4619      	mov	r1, r3
 800169e:	4816      	ldr	r0, [pc, #88]	; (80016f8 <MX_TIM5_Init+0xf8>)
 80016a0:	f005 fb46 	bl	8006d30 <HAL_TIMEx_MasterConfigSynchronization>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 80016aa:	f001 fa43 	bl	8002b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ae:	2360      	movs	r3, #96	; 0x60
 80016b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2208      	movs	r2, #8
 80016c2:	4619      	mov	r1, r3
 80016c4:	480c      	ldr	r0, [pc, #48]	; (80016f8 <MX_TIM5_Init+0xf8>)
 80016c6:	f004 fd01 	bl	80060cc <HAL_TIM_PWM_ConfigChannel>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 80016d0:	f001 fa30 	bl	8002b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	220c      	movs	r2, #12
 80016d8:	4619      	mov	r1, r3
 80016da:	4807      	ldr	r0, [pc, #28]	; (80016f8 <MX_TIM5_Init+0xf8>)
 80016dc:	f004 fcf6 	bl	80060cc <HAL_TIM_PWM_ConfigChannel>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 80016e6:	f001 fa25 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80016ea:	4803      	ldr	r0, [pc, #12]	; (80016f8 <MX_TIM5_Init+0xf8>)
 80016ec:	f001 ffd0 	bl	8003690 <HAL_TIM_MspPostInit>

}
 80016f0:	bf00      	nop
 80016f2:	3738      	adds	r7, #56	; 0x38
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	200003ec 	.word	0x200003ec
 80016fc:	40000c00 	.word	0x40000c00

08001700 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001706:	f107 0318 	add.w	r3, r7, #24
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800171e:	463b      	mov	r3, r7
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800172a:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <MX_TIM8_Init+0xe0>)
 800172c:	4a2d      	ldr	r2, [pc, #180]	; (80017e4 <MX_TIM8_Init+0xe4>)
 800172e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 8-1;
 8001730:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <MX_TIM8_Init+0xe0>)
 8001732:	2207      	movs	r2, #7
 8001734:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001736:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <MX_TIM8_Init+0xe0>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0xfff-1;
 800173c:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <MX_TIM8_Init+0xe0>)
 800173e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001742:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001744:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <MX_TIM8_Init+0xe0>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800174a:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <MX_TIM8_Init+0xe0>)
 800174c:	2200      	movs	r2, #0
 800174e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001750:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <MX_TIM8_Init+0xe0>)
 8001752:	2200      	movs	r2, #0
 8001754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001756:	4822      	ldr	r0, [pc, #136]	; (80017e0 <MX_TIM8_Init+0xe0>)
 8001758:	f003 fe94 	bl	8005484 <HAL_TIM_Base_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8001762:	f001 f9e7 	bl	8002b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800176c:	f107 0318 	add.w	r3, r7, #24
 8001770:	4619      	mov	r1, r3
 8001772:	481b      	ldr	r0, [pc, #108]	; (80017e0 <MX_TIM8_Init+0xe0>)
 8001774:	f004 fd6c 	bl	8006250 <HAL_TIM_ConfigClockSource>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800177e:	f001 f9d9 	bl	8002b34 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001782:	4817      	ldr	r0, [pc, #92]	; (80017e0 <MX_TIM8_Init+0xe0>)
 8001784:	f004 f860 	bl	8005848 <HAL_TIM_IC_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 800178e:	f001 f9d1 	bl	8002b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800179a:	f107 0310 	add.w	r3, r7, #16
 800179e:	4619      	mov	r1, r3
 80017a0:	480f      	ldr	r0, [pc, #60]	; (80017e0 <MX_TIM8_Init+0xe0>)
 80017a2:	f005 fac5 	bl	8006d30 <HAL_TIMEx_MasterConfigSynchronization>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 80017ac:	f001 f9c2 	bl	8002b34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017b0:	2300      	movs	r3, #0
 80017b2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017b4:	2301      	movs	r3, #1
 80017b6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017c0:	463b      	mov	r3, r7
 80017c2:	2200      	movs	r2, #0
 80017c4:	4619      	mov	r1, r3
 80017c6:	4806      	ldr	r0, [pc, #24]	; (80017e0 <MX_TIM8_Init+0xe0>)
 80017c8:	f004 fbe4 	bl	8005f94 <HAL_TIM_IC_ConfigChannel>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80017d2:	f001 f9af 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	3728      	adds	r7, #40	; 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000434 	.word	0x20000434
 80017e4:	40010400 	.word	0x40010400

080017e8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08c      	sub	sp, #48	; 0x30
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ee:	f107 0320 	add.w	r3, r7, #32
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]
 800180a:	615a      	str	r2, [r3, #20]
 800180c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800180e:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <MX_TIM9_Init+0xbc>)
 8001810:	4a25      	ldr	r2, [pc, #148]	; (80018a8 <MX_TIM9_Init+0xc0>)
 8001812:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8-1;
 8001814:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <MX_TIM9_Init+0xbc>)
 8001816:	2207      	movs	r2, #7
 8001818:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <MX_TIM9_Init+0xbc>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100-1;
 8001820:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <MX_TIM9_Init+0xbc>)
 8001822:	2263      	movs	r2, #99	; 0x63
 8001824:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001826:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <MX_TIM9_Init+0xbc>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182c:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <MX_TIM9_Init+0xbc>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001832:	481c      	ldr	r0, [pc, #112]	; (80018a4 <MX_TIM9_Init+0xbc>)
 8001834:	f003 fe26 	bl	8005484 <HAL_TIM_Base_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 800183e:	f001 f979 	bl	8002b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001846:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001848:	f107 0320 	add.w	r3, r7, #32
 800184c:	4619      	mov	r1, r3
 800184e:	4815      	ldr	r0, [pc, #84]	; (80018a4 <MX_TIM9_Init+0xbc>)
 8001850:	f004 fcfe 	bl	8006250 <HAL_TIM_ConfigClockSource>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 800185a:	f001 f96b 	bl	8002b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800185e:	4811      	ldr	r0, [pc, #68]	; (80018a4 <MX_TIM9_Init+0xbc>)
 8001860:	f003 fed0 	bl	8005604 <HAL_TIM_PWM_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 800186a:	f001 f963 	bl	8002b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800186e:	2360      	movs	r3, #96	; 0x60
 8001870:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	2200      	movs	r2, #0
 8001882:	4619      	mov	r1, r3
 8001884:	4807      	ldr	r0, [pc, #28]	; (80018a4 <MX_TIM9_Init+0xbc>)
 8001886:	f004 fc21 	bl	80060cc <HAL_TIM_PWM_ConfigChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 8001890:	f001 f950 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001894:	4803      	ldr	r0, [pc, #12]	; (80018a4 <MX_TIM9_Init+0xbc>)
 8001896:	f001 fefb 	bl	8003690 <HAL_TIM_MspPostInit>

}
 800189a:	bf00      	nop
 800189c:	3730      	adds	r7, #48	; 0x30
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000047c 	.word	0x2000047c
 80018a8:	40014000 	.word	0x40014000

080018ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018b2:	4a12      	ldr	r2, [pc, #72]	; (80018fc <MX_USART1_UART_Init+0x50>)
 80018b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018d2:	2204      	movs	r2, #4
 80018d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018e4:	f005 fab4 	bl	8006e50 <HAL_UART_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018ee:	f001 f921 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200004c4 	.word	0x200004c4
 80018fc:	40011000 	.word	0x40011000

08001900 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_USART3_UART_Init+0x4c>)
 8001906:	4a12      	ldr	r2, [pc, #72]	; (8001950 <MX_USART3_UART_Init+0x50>)
 8001908:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <MX_USART3_UART_Init+0x4c>)
 800190c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001910:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <MX_USART3_UART_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_USART3_UART_Init+0x4c>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <MX_USART3_UART_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_USART3_UART_Init+0x4c>)
 8001926:	220c      	movs	r2, #12
 8001928:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <MX_USART3_UART_Init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <MX_USART3_UART_Init+0x4c>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_USART3_UART_Init+0x4c>)
 8001938:	f005 fa8a 	bl	8006e50 <HAL_UART_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001942:	f001 f8f7 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	2000050c 	.word	0x2000050c
 8001950:	40004800 	.word	0x40004800

08001954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08c      	sub	sp, #48	; 0x30
 8001958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195a:	f107 031c 	add.w	r3, r7, #28
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
 800196e:	4b49      	ldr	r3, [pc, #292]	; (8001a94 <MX_GPIO_Init+0x140>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a48      	ldr	r2, [pc, #288]	; (8001a94 <MX_GPIO_Init+0x140>)
 8001974:	f043 0310 	orr.w	r3, r3, #16
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b46      	ldr	r3, [pc, #280]	; (8001a94 <MX_GPIO_Init+0x140>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	4b42      	ldr	r3, [pc, #264]	; (8001a94 <MX_GPIO_Init+0x140>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a41      	ldr	r2, [pc, #260]	; (8001a94 <MX_GPIO_Init+0x140>)
 8001990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b3f      	ldr	r3, [pc, #252]	; (8001a94 <MX_GPIO_Init+0x140>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	4b3b      	ldr	r3, [pc, #236]	; (8001a94 <MX_GPIO_Init+0x140>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a3a      	ldr	r2, [pc, #232]	; (8001a94 <MX_GPIO_Init+0x140>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b38      	ldr	r3, [pc, #224]	; (8001a94 <MX_GPIO_Init+0x140>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b34      	ldr	r3, [pc, #208]	; (8001a94 <MX_GPIO_Init+0x140>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a33      	ldr	r2, [pc, #204]	; (8001a94 <MX_GPIO_Init+0x140>)
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <MX_GPIO_Init+0x140>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <MX_GPIO_Init+0x140>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a2c      	ldr	r2, [pc, #176]	; (8001a94 <MX_GPIO_Init+0x140>)
 80019e4:	f043 0308 	orr.w	r3, r3, #8
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <MX_GPIO_Init+0x140>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <MX_GPIO_Init+0x140>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a25      	ldr	r2, [pc, #148]	; (8001a94 <MX_GPIO_Init+0x140>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <MX_GPIO_Init+0x140>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2110      	movs	r1, #16
 8001a16:	4820      	ldr	r0, [pc, #128]	; (8001a98 <MX_GPIO_Init+0x144>)
 8001a18:	f002 fd7a 	bl	8004510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIRECTION_3_Pin|DIRECTION_2_Pin|DIRECTION_1_Pin, GPIO_PIN_RESET);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001a22:	481e      	ldr	r0, [pc, #120]	; (8001a9c <MX_GPIO_Init+0x148>)
 8001a24:	f002 fd74 	bl	8004510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HC_Output_GPIO_Port, HC_Output_Pin, GPIO_PIN_RESET);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a2e:	481c      	ldr	r0, [pc, #112]	; (8001aa0 <MX_GPIO_Init+0x14c>)
 8001a30:	f002 fd6e 	bl	8004510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_Pin */
  GPIO_InitStruct.Pin = SS_Pin;
 8001a34:	2310      	movs	r3, #16
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4813      	ldr	r0, [pc, #76]	; (8001a98 <MX_GPIO_Init+0x144>)
 8001a4c:	f002 fbc4 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIRECTION_3_Pin DIRECTION_2_Pin DIRECTION_1_Pin */
  GPIO_InitStruct.Pin = DIRECTION_3_Pin|DIRECTION_2_Pin|DIRECTION_1_Pin;
 8001a50:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a62:	f107 031c 	add.w	r3, r7, #28
 8001a66:	4619      	mov	r1, r3
 8001a68:	480c      	ldr	r0, [pc, #48]	; (8001a9c <MX_GPIO_Init+0x148>)
 8001a6a:	f002 fbb5 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HC_Output_Pin */
  GPIO_InitStruct.Pin = HC_Output_Pin;
 8001a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a74:	2301      	movs	r3, #1
 8001a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(HC_Output_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	4619      	mov	r1, r3
 8001a86:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <MX_GPIO_Init+0x14c>)
 8001a88:	f002 fba6 	bl	80041d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a8c:	bf00      	nop
 8001a8e:	3730      	adds	r7, #48	; 0x30
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020000 	.word	0x40020000
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40020800 	.word	0x40020800

08001aa4 <Trans>:
char Go[] = "Start!\n";
char Restart[] = "Restart!\n";
char Pause[] = "Pause!\n";
char errorValue[] = "Error Value!\n";
char GoTo[] = "Go to:";
void Trans(int16_t x, int16_t y){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	460a      	mov	r2, r1
 8001aae:	80fb      	strh	r3, [r7, #6]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	80bb      	strh	r3, [r7, #4]
	char data_trans[10];
	int len;

	len = sprintf(data_trans, "%d %d\n", x, y);
 8001ab4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ab8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001abc:	f107 0008 	add.w	r0, r7, #8
 8001ac0:	4908      	ldr	r1, [pc, #32]	; (8001ae4 <Trans+0x40>)
 8001ac2:	f00a fb0b 	bl	800c0dc <siprintf>
 8001ac6:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&huart3, (uint8_t*)&data_trans, len,delay_trans);
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	f107 0108 	add.w	r1, r7, #8
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <Trans+0x44>)
 8001ad6:	f005 fa0b 	bl	8006ef0 <HAL_UART_Transmit>
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	08010ee4 	.word	0x08010ee4
 8001ae8:	2000050c 	.word	0x2000050c
 8001aec:	00000000 	.word	0x00000000

08001af0 <Moving>:
/**
  * @brief  Function implementing the CONTROL thread.
  * @param  argument: Not used
  * @retval None
  */
void Moving(uint8_t PSX_RX, double Vd, double Theta){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	ed87 0b02 	vstr	d0, [r7, #8]
 8001afc:	ed87 1b00 	vstr	d1, [r7]
 8001b00:	75fb      	strb	r3, [r7, #23]
	if(flag_V_slow==true) Vd /= 500.0f;
 8001b02:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <Moving+0xb8>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d10b      	bne.n	8001b22 <Moving+0x32>
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	4b27      	ldr	r3, [pc, #156]	; (8001bac <Moving+0xbc>)
 8001b10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b14:	f7fe fe9a 	bl	800084c <__aeabi_ddiv>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001b20:	e00e      	b.n	8001b40 <Moving+0x50>
	else if(flag_V_slow==false) Vd /= 300.0f;
 8001b22:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <Moving+0xb8>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10a      	bne.n	8001b40 <Moving+0x50>
 8001b2a:	a317      	add	r3, pc, #92	; (adr r3, 8001b88 <Moving+0x98>)
 8001b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b34:	f7fe fe8a 	bl	800084c <__aeabi_ddiv>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Robot_Move(Vd, Theta,0);
 8001b40:	ed9f 2b13 	vldr	d2, [pc, #76]	; 8001b90 <Moving+0xa0>
 8001b44:	ed97 1b00 	vldr	d1, [r7]
 8001b48:	ed97 0b02 	vldr	d0, [r7, #8]
 8001b4c:	f001 f838 	bl	8002bc0 <Robot_Move>
	switch(PSX_RX){
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
 8001b52:	2b7f      	cmp	r3, #127	; 0x7f
 8001b54:	d00a      	beq.n	8001b6c <Moving+0x7c>
 8001b56:	2bdf      	cmp	r3, #223	; 0xdf
 8001b58:	d111      	bne.n	8001b7e <Moving+0x8e>
	case Rotate_Right:
		Robot_Move(0, 0, -0.3);
 8001b5a:	ed9f 2b0f 	vldr	d2, [pc, #60]	; 8001b98 <Moving+0xa8>
 8001b5e:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 8001b90 <Moving+0xa0>
 8001b62:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8001b90 <Moving+0xa0>
 8001b66:	f001 f82b 	bl	8002bc0 <Robot_Move>
		break;
 8001b6a:	e008      	b.n	8001b7e <Moving+0x8e>
	case Rotate_Left:
		Robot_Move(0, 0, 0.3);
 8001b6c:	ed9f 2b0c 	vldr	d2, [pc, #48]	; 8001ba0 <Moving+0xb0>
 8001b70:	ed9f 1b07 	vldr	d1, [pc, #28]	; 8001b90 <Moving+0xa0>
 8001b74:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8001b90 <Moving+0xa0>
 8001b78:	f001 f822 	bl	8002bc0 <Robot_Move>
		break;
 8001b7c:	bf00      	nop
	}
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	00000000 	.word	0x00000000
 8001b8c:	4072c000 	.word	0x4072c000
	...
 8001b98:	33333333 	.word	0x33333333
 8001b9c:	bfd33333 	.word	0xbfd33333
 8001ba0:	33333333 	.word	0x33333333
 8001ba4:	3fd33333 	.word	0x3fd33333
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	407f4000 	.word	0x407f4000

08001bb0 <Hand>:
void Hand(uint8_t PSX_RX){
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
	switch(PSX_RX){
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	2bf7      	cmp	r3, #247	; 0xf7
 8001bbe:	d002      	beq.n	8001bc6 <Hand+0x16>
 8001bc0:	2bfb      	cmp	r3, #251	; 0xfb
 8001bc2:	d004      	beq.n	8001bce <Hand+0x1e>
	case Slow:
		flag_V_slow=true;
		break;
	}

}
 8001bc4:	e007      	b.n	8001bd6 <Hand+0x26>
		flag_V_slow=false;
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <Hand+0x34>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
		break;
 8001bcc:	e003      	b.n	8001bd6 <Hand+0x26>
		flag_V_slow=true;
 8001bce:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <Hand+0x34>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]
		break;
 8001bd4:	bf00      	nop
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	20000000 	.word	0x20000000

08001be8 <Calculate_angle>:
void Calculate_angle(double LX, double LY) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	ed87 0b02 	vstr	d0, [r7, #8]
 8001bf2:	ed87 1b00 	vstr	d1, [r7]

    double angle_rad = atan(LY / LX);
 8001bf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bfe:	f7fe fe25 	bl	800084c <__aeabi_ddiv>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	ec43 2b17 	vmov	d7, r2, r3
 8001c0a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c0e:	eef0 0a67 	vmov.f32	s1, s15
 8001c12:	f00d ff01 	bl	800fa18 <atan>
 8001c16:	ed87 0b04 	vstr	d0, [r7, #16]
    Theta = angle_rad * (180.0f / PI)-30.0f;
 8001c1a:	a33b      	add	r3, pc, #236	; (adr r3, 8001d08 <Calculate_angle+0x120>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c24:	f7fe fce8 	bl	80005f8 <__aeabi_dmul>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	4b30      	ldr	r3, [pc, #192]	; (8001cf8 <Calculate_angle+0x110>)
 8001c36:	f7fe fb27 	bl	8000288 <__aeabi_dsub>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	492f      	ldr	r1, [pc, #188]	; (8001cfc <Calculate_angle+0x114>)
 8001c40:	e9c1 2300 	strd	r2, r3, [r1]
    if(LX < 0)Theta += 180.0f;
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c50:	f7fe ff44 	bl	8000adc <__aeabi_dcmplt>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00c      	beq.n	8001c74 <Calculate_angle+0x8c>
 8001c5a:	4b28      	ldr	r3, [pc, #160]	; (8001cfc <Calculate_angle+0x114>)
 8001c5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <Calculate_angle+0x118>)
 8001c66:	f7fe fb11 	bl	800028c <__adddf3>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4923      	ldr	r1, [pc, #140]	; (8001cfc <Calculate_angle+0x114>)
 8001c70:	e9c1 2300 	strd	r2, r3, [r1]
    if(LX >= 0 && LY < 0)Theta += 360.0f;
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c80:	f7fe ff40 	bl	8000b04 <__aeabi_dcmpge>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d017      	beq.n	8001cba <Calculate_angle+0xd2>
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c96:	f7fe ff21 	bl	8000adc <__aeabi_dcmplt>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00c      	beq.n	8001cba <Calculate_angle+0xd2>
 8001ca0:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <Calculate_angle+0x114>)
 8001ca2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <Calculate_angle+0x11c>)
 8001cac:	f7fe faee 	bl	800028c <__adddf3>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4911      	ldr	r1, [pc, #68]	; (8001cfc <Calculate_angle+0x114>)
 8001cb6:	e9c1 2300 	strd	r2, r3, [r1]
    if(Theta<0) Theta+=360.0f;
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <Calculate_angle+0x114>)
 8001cbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	f7fe ff08 	bl	8000adc <__aeabi_dcmplt>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d100      	bne.n	8001cd4 <Calculate_angle+0xec>
}
 8001cd2:	e00c      	b.n	8001cee <Calculate_angle+0x106>
    if(Theta<0) Theta+=360.0f;
 8001cd4:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <Calculate_angle+0x114>)
 8001cd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <Calculate_angle+0x11c>)
 8001ce0:	f7fe fad4 	bl	800028c <__adddf3>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4904      	ldr	r1, [pc, #16]	; (8001cfc <Calculate_angle+0x114>)
 8001cea:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	403e0000 	.word	0x403e0000
 8001cfc:	200005b0 	.word	0x200005b0
 8001d00:	40668000 	.word	0x40668000
 8001d04:	40768000 	.word	0x40768000
 8001d08:	1a53b118 	.word	0x1a53b118
 8001d0c:	404ca5dc 	.word	0x404ca5dc

08001d10 <Calculate_Vd>:

void Calculate_Vd(uint8_t PSX_RX[]){
 8001d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
	int16_t LX=PSX_RX[7];
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3307      	adds	r3, #7
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	81fb      	strh	r3, [r7, #14]
	int16_t LY=PSX_RX[8];
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3308      	adds	r3, #8
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	81bb      	strh	r3, [r7, #12]

	LX=LX-128;
 8001d2a:	89fb      	ldrh	r3, [r7, #14]
 8001d2c:	3b80      	subs	r3, #128	; 0x80
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	81fb      	strh	r3, [r7, #14]
	LY=127-LY;
 8001d32:	89bb      	ldrh	r3, [r7, #12]
 8001d34:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	81bb      	strh	r3, [r7, #12]

	Vd=(fabs(LX)>=fabs(LY))?fabs(LX):fabs(LY);
 8001d3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fbef 	bl	8000524 <__aeabi_i2d>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4690      	mov	r8, r2
 8001d4c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001d50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fbe5 	bl	8000524 <__aeabi_i2d>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4692      	mov	sl, r2
 8001d60:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8001d64:	4652      	mov	r2, sl
 8001d66:	465b      	mov	r3, fp
 8001d68:	4640      	mov	r0, r8
 8001d6a:	4649      	mov	r1, r9
 8001d6c:	f7fe feca 	bl	8000b04 <__aeabi_dcmpge>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00a      	beq.n	8001d8c <Calculate_Vd+0x7c>
 8001d76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fbd2 	bl	8000524 <__aeabi_i2d>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4614      	mov	r4, r2
 8001d86:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001d8a:	e009      	b.n	8001da0 <Calculate_Vd+0x90>
 8001d8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fbc7 	bl	8000524 <__aeabi_i2d>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4614      	mov	r4, r2
 8001d9c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <Calculate_Vd+0xec>)
 8001da2:	e9c3 4500 	strd	r4, r5, [r3]
	if(Vd<50) Vd=0;
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <Calculate_Vd+0xec>)
 8001da8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <Calculate_Vd+0xf0>)
 8001db2:	f7fe fe93 	bl	8000adc <__aeabi_dcmplt>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d006      	beq.n	8001dca <Calculate_Vd+0xba>
 8001dbc:	490f      	ldr	r1, [pc, #60]	; (8001dfc <Calculate_Vd+0xec>)
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	e9c1 2300 	strd	r2, r3, [r1]
	Calculate_angle((double)LX, (double)LY);
 8001dca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fba8 	bl	8000524 <__aeabi_i2d>
 8001dd4:	4604      	mov	r4, r0
 8001dd6:	460d      	mov	r5, r1
 8001dd8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fba1 	bl	8000524 <__aeabi_i2d>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	ec43 2b11 	vmov	d1, r2, r3
 8001dea:	ec45 4b10 	vmov	d0, r4, r5
 8001dee:	f7ff fefb 	bl	8001be8 <Calculate_angle>
}
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dfc:	200005a8 	.word	0x200005a8
 8001e00:	40490000 	.word	0x40490000

08001e04 <StartControl>:
/* USER CODE END Header_StartControl */
void StartControl(void *argument)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af02      	add	r7, sp, #8
 8001e0a:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	uint8_t PSX_RX[9]= { 0x00 };
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	f107 0310 	add.w	r3, r7, #16
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	711a      	strb	r2, [r3, #4]
	uint8_t PSX_TX[2] = {
 8001e1a:	f244 2301 	movw	r3, #16897	; 0x4201
 8001e1e:	813b      	strh	r3, [r7, #8]
		0x01, 0x42
	};
	spi_enable;
 8001e20:	2200      	movs	r2, #0
 8001e22:	2110      	movs	r1, #16
 8001e24:	4824      	ldr	r0, [pc, #144]	; (8001eb8 <StartControl+0xb4>)
 8001e26:	f002 fb73 	bl	8004510 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, PSX_TX, PSX_RX, 9, 10);
 8001e2a:	f107 020c 	add.w	r2, r7, #12
 8001e2e:	f107 0108 	add.w	r1, r7, #8
 8001e32:	230a      	movs	r3, #10
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	2309      	movs	r3, #9
 8001e38:	4820      	ldr	r0, [pc, #128]	; (8001ebc <StartControl+0xb8>)
 8001e3a:	f003 f896 	bl	8004f6a <HAL_SPI_TransmitReceive>
	spi_disable;
 8001e3e:	2201      	movs	r2, #1
 8001e40:	2110      	movs	r1, #16
 8001e42:	481d      	ldr	r0, [pc, #116]	; (8001eb8 <StartControl+0xb4>)
 8001e44:	f002 fb64 	bl	8004510 <HAL_GPIO_WritePin>
	if(PSX_RX[1]==0x73){
 8001e48:	7b7b      	ldrb	r3, [r7, #13]
 8001e4a:	2b73      	cmp	r3, #115	; 0x73
 8001e4c:	d125      	bne.n	8001e9a <StartControl+0x96>
		vTaskSuspend(AutoRunHandle);
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <StartControl+0xbc>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f007 fbc6 	bl	80095e4 <vTaskSuspend>
		vTaskSuspend(WitMotionHandle);
 8001e58:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <StartControl+0xc0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f007 fbc1 	bl	80095e4 <vTaskSuspend>

		Calculate_Vd(PSX_RX);
 8001e62:	f107 030c 	add.w	r3, r7, #12
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff ff52 	bl	8001d10 <Calculate_Vd>
		Hand(PSX_RX[4]);
 8001e6c:	7c3b      	ldrb	r3, [r7, #16]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fe9e 	bl	8001bb0 <Hand>
		Moving(PSX_RX[3],Vd,Theta);
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <StartControl+0xc4>)
 8001e78:	ed92 7b00 	vldr	d7, [r2]
 8001e7c:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <StartControl+0xc8>)
 8001e7e:	ed92 6b00 	vldr	d6, [r2]
 8001e82:	eeb0 1a46 	vmov.f32	s2, s12
 8001e86:	eef0 1a66 	vmov.f32	s3, s13
 8001e8a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e8e:	eef0 0a67 	vmov.f32	s1, s15
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fe2c 	bl	8001af0 <Moving>
 8001e98:	e009      	b.n	8001eae <StartControl+0xaa>
	} else{
		vTaskResume(AutoRunHandle);
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <StartControl+0xbc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f007 fc48 	bl	8009734 <vTaskResume>
		vTaskResume(WitMotionHandle);
 8001ea4:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <StartControl+0xc0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f007 fc43 	bl	8009734 <vTaskResume>

	}

		osDelay(10);
 8001eae:	200a      	movs	r0, #10
 8001eb0:	f006 f986 	bl	80081c0 <osDelay>
  {
 8001eb4:	e7aa      	b.n	8001e0c <StartControl+0x8>
 8001eb6:	bf00      	nop
 8001eb8:	40020000 	.word	0x40020000
 8001ebc:	200002bc 	.word	0x200002bc
 8001ec0:	2000055c 	.word	0x2000055c
 8001ec4:	20000560 	.word	0x20000560
 8001ec8:	200005a8 	.word	0x200005a8
 8001ecc:	200005b0 	.word	0x200005b0

08001ed0 <timeRun>:

volatile uint32_t timeToRun;

static state_t State=FIRST;
static run_t Run=NO;
void timeRun(run_t state, int16_t Big, int16_t Small){
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
 8001eda:	460b      	mov	r3, r1
 8001edc:	80bb      	strh	r3, [r7, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	807b      	strh	r3, [r7, #2]
	Run=state;
 8001ee2:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <timeRun+0x44>)
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	7013      	strb	r3, [r2, #0]
	timeToRun=(int32_t)(Big-Small)*(int32_t)speed;
 8001ee8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001eec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f640 6274 	movw	r2, #3700	; 0xe74
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <timeRun+0x48>)
 8001efe:	601a      	str	r2, [r3, #0]
	/*
	 * speed la thoi gian hoan thanh 1m (ms)
	 * thoi gian chay bang quang duong * speed
	 * */
	runDone=false;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <timeRun+0x4c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
//	vTaskSuspend(AutoRunHandle);
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	200000a9 	.word	0x200000a9
 8001f18:	20000fc0 	.word	0x20000fc0
 8001f1c:	200000a7 	.word	0x200000a7

08001f20 <convertToNegative>:
int convertToNegative(int number) {
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
    return -number;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	425b      	negs	r3, r3
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <Caculate_Desire>:
void Caculate_Desire(int16_t desire[], uint8_t idx, int8_t buff[]){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	460b      	mov	r3, r1
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	72fb      	strb	r3, [r7, #11]
	desire[idx]=0;
 8001f46:	7afb      	ldrb	r3, [r7, #11]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	2200      	movs	r2, #0
 8001f50:	801a      	strh	r2, [r3, #0]
	int i = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
	bool negative=false;
 8001f56:	2300      	movs	r3, #0
 8001f58:	74fb      	strb	r3, [r7, #19]
	if(buff[0]=='-'){
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f60:	2b2d      	cmp	r3, #45	; 0x2d
 8001f62:	d104      	bne.n	8001f6e <Caculate_Desire+0x36>
		negative=true;
 8001f64:	2301      	movs	r3, #1
 8001f66:	74fb      	strb	r3, [r7, #19]
		i=1;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	e021      	b.n	8001fb2 <Caculate_Desire+0x7a>
	}
	else{
		negative=false;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	74fb      	strb	r3, [r7, #19]
		i=0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
	}

	for(;i < count; i++) {
 8001f76:	e01c      	b.n	8001fb2 <Caculate_Desire+0x7a>
		desire[idx] = desire[idx] * 10 + buff[i];
 8001f78:	7afb      	ldrb	r3, [r7, #11]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	461a      	mov	r2, r3
 8001f88:	0092      	lsls	r2, r2, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	440b      	add	r3, r1
 8001f96:	f993 3000 	ldrsb.w	r3, [r3]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	b299      	uxth	r1, r3
 8001fa0:	7afb      	ldrb	r3, [r7, #11]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	b20a      	sxth	r2, r1
 8001faa:	801a      	strh	r2, [r3, #0]
	for(;i < count; i++) {
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <Caculate_Desire+0xbc>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	dbdc      	blt.n	8001f78 <Caculate_Desire+0x40>
	}

	if(negative) desire[idx] = convertToNegative(desire[idx]);
 8001fbe:	7cfb      	ldrb	r3, [r7, #19]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00f      	beq.n	8001fe4 <Caculate_Desire+0xac>
 8001fc4:	7afb      	ldrb	r3, [r7, #11]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4413      	add	r3, r2
 8001fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ffa5 	bl	8001f20 <convertToNegative>
 8001fd6:	4601      	mov	r1, r0
 8001fd8:	7afb      	ldrb	r3, [r7, #11]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4413      	add	r3, r2
 8001fe0:	b20a      	sxth	r2, r1
 8001fe2:	801a      	strh	r2, [r3, #0]
	count=0;
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <Caculate_Desire+0xbc>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
}
 8001fea:	bf00      	nop
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200005b8 	.word	0x200005b8

08001ff8 <Begin>:
void Begin(void){
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
	if(idx_real<=(idx-1)){
 8001ffc:	4b82      	ldr	r3, [pc, #520]	; (8002208 <Begin+0x210>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	4b82      	ldr	r3, [pc, #520]	; (800220c <Begin+0x214>)
 8002004:	f993 3000 	ldrsb.w	r3, [r3]
 8002008:	429a      	cmp	r2, r3
 800200a:	f340 80d7 	ble.w	80021bc <Begin+0x1c4>
		if(X_pause[idx_real]){
 800200e:	4b7f      	ldr	r3, [pc, #508]	; (800220c <Begin+0x214>)
 8002010:	f993 3000 	ldrsb.w	r3, [r3]
 8002014:	461a      	mov	r2, r3
 8002016:	4b7e      	ldr	r3, [pc, #504]	; (8002210 <Begin+0x218>)
 8002018:	5c9b      	ldrb	r3, [r3, r2]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d016      	beq.n	800204c <Begin+0x54>
			HAL_UART_Transmit(&huart3, (uint8_t*)&Pause, sizeof(Pause)-1,delay_trans);
 800201e:	f04f 33ff 	mov.w	r3, #4294967295
 8002022:	2207      	movs	r2, #7
 8002024:	497b      	ldr	r1, [pc, #492]	; (8002214 <Begin+0x21c>)
 8002026:	487c      	ldr	r0, [pc, #496]	; (8002218 <Begin+0x220>)
 8002028:	f004 ff62 	bl	8006ef0 <HAL_UART_Transmit>
			State=PAUSE;
 800202c:	4b7b      	ldr	r3, [pc, #492]	; (800221c <Begin+0x224>)
 800202e:	2204      	movs	r2, #4
 8002030:	701a      	strb	r2, [r3, #0]
			pause=true;
 8002032:	4b7b      	ldr	r3, [pc, #492]	; (8002220 <Begin+0x228>)
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
			idx_real++;
 8002038:	4b74      	ldr	r3, [pc, #464]	; (800220c <Begin+0x214>)
 800203a:	f993 3000 	ldrsb.w	r3, [r3]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	3301      	adds	r3, #1
 8002042:	b2db      	uxtb	r3, r3
 8002044:	b25a      	sxtb	r2, r3
 8002046:	4b71      	ldr	r3, [pc, #452]	; (800220c <Begin+0x214>)
 8002048:	701a      	strb	r2, [r3, #0]
		if(repeat){
			HAL_UART_Transmit(&huart3, (uint8_t*)&Repeated, sizeof(Repeated)-1,delay_trans);
			State=REPEAT;
		}
	}
}
 800204a:	e0da      	b.n	8002202 <Begin+0x20a>
			if(Y_desire[idx_real]==Y_real[0]){
 800204c:	4b6f      	ldr	r3, [pc, #444]	; (800220c <Begin+0x214>)
 800204e:	f993 3000 	ldrsb.w	r3, [r3]
 8002052:	461a      	mov	r2, r3
 8002054:	4b73      	ldr	r3, [pc, #460]	; (8002224 <Begin+0x22c>)
 8002056:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 800205a:	4b73      	ldr	r3, [pc, #460]	; (8002228 <Begin+0x230>)
 800205c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002060:	429a      	cmp	r2, r3
 8002062:	d135      	bne.n	80020d0 <Begin+0xd8>
				if(X_desire[idx_real]>X_real[0]){
 8002064:	4b69      	ldr	r3, [pc, #420]	; (800220c <Begin+0x214>)
 8002066:	f993 3000 	ldrsb.w	r3, [r3]
 800206a:	461a      	mov	r2, r3
 800206c:	4b6f      	ldr	r3, [pc, #444]	; (800222c <Begin+0x234>)
 800206e:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8002072:	4b6f      	ldr	r3, [pc, #444]	; (8002230 <Begin+0x238>)
 8002074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002078:	429a      	cmp	r2, r3
 800207a:	dd0e      	ble.n	800209a <Begin+0xa2>
					timeRun(FORWARD, X_desire[idx_real], X_real[0]);
 800207c:	4b63      	ldr	r3, [pc, #396]	; (800220c <Begin+0x214>)
 800207e:	f993 3000 	ldrsb.w	r3, [r3]
 8002082:	461a      	mov	r2, r3
 8002084:	4b69      	ldr	r3, [pc, #420]	; (800222c <Begin+0x234>)
 8002086:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800208a:	4a69      	ldr	r2, [pc, #420]	; (8002230 <Begin+0x238>)
 800208c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002090:	4619      	mov	r1, r3
 8002092:	2000      	movs	r0, #0
 8002094:	f7ff ff1c 	bl	8001ed0 <timeRun>
 8002098:	e05b      	b.n	8002152 <Begin+0x15a>
				}else if(X_desire[idx_real]<X_real[0]){
 800209a:	4b5c      	ldr	r3, [pc, #368]	; (800220c <Begin+0x214>)
 800209c:	f993 3000 	ldrsb.w	r3, [r3]
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b62      	ldr	r3, [pc, #392]	; (800222c <Begin+0x234>)
 80020a4:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 80020a8:	4b61      	ldr	r3, [pc, #388]	; (8002230 <Begin+0x238>)
 80020aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	da4f      	bge.n	8002152 <Begin+0x15a>
					timeRun(BACKWARD, X_real[0], X_desire[idx_real]);
 80020b2:	4b5f      	ldr	r3, [pc, #380]	; (8002230 <Begin+0x238>)
 80020b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b8:	4a54      	ldr	r2, [pc, #336]	; (800220c <Begin+0x214>)
 80020ba:	f992 2000 	ldrsb.w	r2, [r2]
 80020be:	4611      	mov	r1, r2
 80020c0:	4a5a      	ldr	r2, [pc, #360]	; (800222c <Begin+0x234>)
 80020c2:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80020c6:	4619      	mov	r1, r3
 80020c8:	2001      	movs	r0, #1
 80020ca:	f7ff ff01 	bl	8001ed0 <timeRun>
 80020ce:	e040      	b.n	8002152 <Begin+0x15a>
			else if(X_desire[idx_real]==X_real[0]){
 80020d0:	4b4e      	ldr	r3, [pc, #312]	; (800220c <Begin+0x214>)
 80020d2:	f993 3000 	ldrsb.w	r3, [r3]
 80020d6:	461a      	mov	r2, r3
 80020d8:	4b54      	ldr	r3, [pc, #336]	; (800222c <Begin+0x234>)
 80020da:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 80020de:	4b54      	ldr	r3, [pc, #336]	; (8002230 <Begin+0x238>)
 80020e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d134      	bne.n	8002152 <Begin+0x15a>
				if(Y_desire[idx_real]>Y_real[0]){
 80020e8:	4b48      	ldr	r3, [pc, #288]	; (800220c <Begin+0x214>)
 80020ea:	f993 3000 	ldrsb.w	r3, [r3]
 80020ee:	461a      	mov	r2, r3
 80020f0:	4b4c      	ldr	r3, [pc, #304]	; (8002224 <Begin+0x22c>)
 80020f2:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 80020f6:	4b4c      	ldr	r3, [pc, #304]	; (8002228 <Begin+0x230>)
 80020f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dd0e      	ble.n	800211e <Begin+0x126>
					timeRun(RIGHT, Y_desire[idx_real], Y_real[0]);
 8002100:	4b42      	ldr	r3, [pc, #264]	; (800220c <Begin+0x214>)
 8002102:	f993 3000 	ldrsb.w	r3, [r3]
 8002106:	461a      	mov	r2, r3
 8002108:	4b46      	ldr	r3, [pc, #280]	; (8002224 <Begin+0x22c>)
 800210a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800210e:	4a46      	ldr	r2, [pc, #280]	; (8002228 <Begin+0x230>)
 8002110:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002114:	4619      	mov	r1, r3
 8002116:	2003      	movs	r0, #3
 8002118:	f7ff feda 	bl	8001ed0 <timeRun>
 800211c:	e019      	b.n	8002152 <Begin+0x15a>
				}else if(Y_desire[idx_real]<Y_real[0]){
 800211e:	4b3b      	ldr	r3, [pc, #236]	; (800220c <Begin+0x214>)
 8002120:	f993 3000 	ldrsb.w	r3, [r3]
 8002124:	461a      	mov	r2, r3
 8002126:	4b3f      	ldr	r3, [pc, #252]	; (8002224 <Begin+0x22c>)
 8002128:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 800212c:	4b3e      	ldr	r3, [pc, #248]	; (8002228 <Begin+0x230>)
 800212e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002132:	429a      	cmp	r2, r3
 8002134:	da0d      	bge.n	8002152 <Begin+0x15a>
					timeRun(LEFT, Y_real[0], Y_desire[idx_real]);
 8002136:	4b3c      	ldr	r3, [pc, #240]	; (8002228 <Begin+0x230>)
 8002138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800213c:	4a33      	ldr	r2, [pc, #204]	; (800220c <Begin+0x214>)
 800213e:	f992 2000 	ldrsb.w	r2, [r2]
 8002142:	4611      	mov	r1, r2
 8002144:	4a37      	ldr	r2, [pc, #220]	; (8002224 <Begin+0x22c>)
 8002146:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800214a:	4619      	mov	r1, r3
 800214c:	2002      	movs	r0, #2
 800214e:	f7ff febf 	bl	8001ed0 <timeRun>
			HAL_UART_Transmit(&huart3, (uint8_t*)&GoTo, sizeof(GoTo)-1,delay_trans);
 8002152:	f04f 33ff 	mov.w	r3, #4294967295
 8002156:	2206      	movs	r2, #6
 8002158:	4936      	ldr	r1, [pc, #216]	; (8002234 <Begin+0x23c>)
 800215a:	482f      	ldr	r0, [pc, #188]	; (8002218 <Begin+0x220>)
 800215c:	f004 fec8 	bl	8006ef0 <HAL_UART_Transmit>
			Trans(X_desire[idx_real], Y_desire[idx_real]);
 8002160:	4b2a      	ldr	r3, [pc, #168]	; (800220c <Begin+0x214>)
 8002162:	f993 3000 	ldrsb.w	r3, [r3]
 8002166:	461a      	mov	r2, r3
 8002168:	4b30      	ldr	r3, [pc, #192]	; (800222c <Begin+0x234>)
 800216a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800216e:	4a27      	ldr	r2, [pc, #156]	; (800220c <Begin+0x214>)
 8002170:	f992 2000 	ldrsb.w	r2, [r2]
 8002174:	4611      	mov	r1, r2
 8002176:	4a2b      	ldr	r2, [pc, #172]	; (8002224 <Begin+0x22c>)
 8002178:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800217c:	4611      	mov	r1, r2
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fc90 	bl	8001aa4 <Trans>
			X_real[0]=X_desire[idx_real];
 8002184:	4b21      	ldr	r3, [pc, #132]	; (800220c <Begin+0x214>)
 8002186:	f993 3000 	ldrsb.w	r3, [r3]
 800218a:	461a      	mov	r2, r3
 800218c:	4b27      	ldr	r3, [pc, #156]	; (800222c <Begin+0x234>)
 800218e:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8002192:	4b27      	ldr	r3, [pc, #156]	; (8002230 <Begin+0x238>)
 8002194:	801a      	strh	r2, [r3, #0]
			Y_real[0]=Y_desire[idx_real];
 8002196:	4b1d      	ldr	r3, [pc, #116]	; (800220c <Begin+0x214>)
 8002198:	f993 3000 	ldrsb.w	r3, [r3]
 800219c:	461a      	mov	r2, r3
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <Begin+0x22c>)
 80021a0:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 80021a4:	4b20      	ldr	r3, [pc, #128]	; (8002228 <Begin+0x230>)
 80021a6:	801a      	strh	r2, [r3, #0]
			idx_real++;
 80021a8:	4b18      	ldr	r3, [pc, #96]	; (800220c <Begin+0x214>)
 80021aa:	f993 3000 	ldrsb.w	r3, [r3]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	3301      	adds	r3, #1
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	b25a      	sxtb	r2, r3
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <Begin+0x214>)
 80021b8:	701a      	strb	r2, [r3, #0]
}
 80021ba:	e022      	b.n	8002202 <Begin+0x20a>
	else if(idx >1){
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <Begin+0x210>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d91e      	bls.n	8002202 <Begin+0x20a>
		if(!repeat){
 80021c4:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <Begin+0x240>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	f083 0301 	eor.w	r3, r3, #1
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d009      	beq.n	80021e6 <Begin+0x1ee>
			HAL_UART_Transmit(&huart3, (uint8_t*)&Pause, sizeof(Pause)-1,delay_trans);
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295
 80021d6:	2207      	movs	r2, #7
 80021d8:	490e      	ldr	r1, [pc, #56]	; (8002214 <Begin+0x21c>)
 80021da:	480f      	ldr	r0, [pc, #60]	; (8002218 <Begin+0x220>)
 80021dc:	f004 fe88 	bl	8006ef0 <HAL_UART_Transmit>
			State=PAUSE;
 80021e0:	4b0e      	ldr	r3, [pc, #56]	; (800221c <Begin+0x224>)
 80021e2:	2204      	movs	r2, #4
 80021e4:	701a      	strb	r2, [r3, #0]
		if(repeat){
 80021e6:	4b14      	ldr	r3, [pc, #80]	; (8002238 <Begin+0x240>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d009      	beq.n	8002202 <Begin+0x20a>
			HAL_UART_Transmit(&huart3, (uint8_t*)&Repeated, sizeof(Repeated)-1,delay_trans);
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
 80021f2:	2219      	movs	r2, #25
 80021f4:	4911      	ldr	r1, [pc, #68]	; (800223c <Begin+0x244>)
 80021f6:	4808      	ldr	r0, [pc, #32]	; (8002218 <Begin+0x220>)
 80021f8:	f004 fe7a 	bl	8006ef0 <HAL_UART_Transmit>
			State=REPEAT;
 80021fc:	4b07      	ldr	r3, [pc, #28]	; (800221c <Begin+0x224>)
 80021fe:	2202      	movs	r2, #2
 8002200:	701a      	strb	r2, [r3, #0]
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200000a8 	.word	0x200000a8
 800220c:	20000fbe 	.word	0x20000fbe
 8002210:	20000d98 	.word	0x20000d98
 8002214:	20000088 	.word	0x20000088
 8002218:	2000050c 	.word	0x2000050c
 800221c:	20000fc4 	.word	0x20000fc4
 8002220:	20000d93 	.word	0x20000d93
 8002224:	200009a4 	.word	0x200009a4
 8002228:	20000d90 	.word	0x20000d90
 800222c:	200005bc 	.word	0x200005bc
 8002230:	20000d8c 	.word	0x20000d8c
 8002234:	200000a0 	.word	0x200000a0
 8002238:	20000d92 	.word	0x20000d92
 800223c:	20000038 	.word	0x20000038

08002240 <SetDefault>:
void SetDefault(msgQueueObj_t msg, int16_t *X_real, int16_t *Y_real){
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	81b8      	strh	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
	if((msg.buffer)!='\n'&&(msg.buffer)!=' '){
 800224c:	7b3b      	ldrb	r3, [r7, #12]
 800224e:	2b0a      	cmp	r3, #10
 8002250:	d02c      	beq.n	80022ac <SetDefault+0x6c>
 8002252:	7b3b      	ldrb	r3, [r7, #12]
 8002254:	2b20      	cmp	r3, #32
 8002256:	d029      	beq.n	80022ac <SetDefault+0x6c>
		if((msg.buffer)=='-'){
 8002258:	7b3b      	ldrb	r3, [r7, #12]
 800225a:	2b2d      	cmp	r3, #45	; 0x2d
 800225c:	d10d      	bne.n	800227a <SetDefault+0x3a>
			buff[count]=msg.buffer;
 800225e:	7b39      	ldrb	r1, [r7, #12]
 8002260:	4b2e      	ldr	r3, [pc, #184]	; (800231c <SetDefault+0xdc>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	b249      	sxtb	r1, r1
 8002268:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <SetDefault+0xe0>)
 800226a:	5499      	strb	r1, [r3, r2]

			count++;
 800226c:	4b2b      	ldr	r3, [pc, #172]	; (800231c <SetDefault+0xdc>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	3301      	adds	r3, #1
 8002272:	b2da      	uxtb	r2, r3
 8002274:	4b29      	ldr	r3, [pc, #164]	; (800231c <SetDefault+0xdc>)
 8002276:	701a      	strb	r2, [r3, #0]
		if((msg.buffer)=='-'){
 8002278:	e04b      	b.n	8002312 <SetDefault+0xd2>
		}
		else if(isdigit((int)msg.buffer)){
 800227a:	7b3b      	ldrb	r3, [r7, #12]
 800227c:	3301      	adds	r3, #1
 800227e:	4a29      	ldr	r2, [pc, #164]	; (8002324 <SetDefault+0xe4>)
 8002280:	4413      	add	r3, r2
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d042      	beq.n	8002312 <SetDefault+0xd2>
			buff[count]=(msg.buffer-'0');
 800228c:	7b3b      	ldrb	r3, [r7, #12]
 800228e:	3b30      	subs	r3, #48	; 0x30
 8002290:	b2d9      	uxtb	r1, r3
 8002292:	4b22      	ldr	r3, [pc, #136]	; (800231c <SetDefault+0xdc>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	b249      	sxtb	r1, r1
 800229a:	4b21      	ldr	r3, [pc, #132]	; (8002320 <SetDefault+0xe0>)
 800229c:	5499      	strb	r1, [r3, r2]
			count++;
 800229e:	4b1f      	ldr	r3, [pc, #124]	; (800231c <SetDefault+0xdc>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b1d      	ldr	r3, [pc, #116]	; (800231c <SetDefault+0xdc>)
 80022a8:	701a      	strb	r2, [r3, #0]
		if((msg.buffer)=='-'){
 80022aa:	e032      	b.n	8002312 <SetDefault+0xd2>
		}
	}
	else if((msg.buffer)==' '&& count!=0){
 80022ac:	7b3b      	ldrb	r3, [r7, #12]
 80022ae:	2b20      	cmp	r3, #32
 80022b0:	d10e      	bne.n	80022d0 <SetDefault+0x90>
 80022b2:	4b1a      	ldr	r3, [pc, #104]	; (800231c <SetDefault+0xdc>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <SetDefault+0x90>
		Caculate_Desire(X_real, 0, buff);
 80022ba:	4a19      	ldr	r2, [pc, #100]	; (8002320 <SetDefault+0xe0>)
 80022bc:	2100      	movs	r1, #0
 80022be:	68b8      	ldr	r0, [r7, #8]
 80022c0:	f7ff fe3a 	bl	8001f38 <Caculate_Desire>
		X_desire[0]=X_real[0];
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <SetDefault+0xe8>)
 80022cc:	801a      	strh	r2, [r3, #0]
 80022ce:	e021      	b.n	8002314 <SetDefault+0xd4>
	}
	else if((msg.buffer)=='\n' && count!=0){
 80022d0:	7b3b      	ldrb	r3, [r7, #12]
 80022d2:	2b0a      	cmp	r3, #10
 80022d4:	d11e      	bne.n	8002314 <SetDefault+0xd4>
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <SetDefault+0xdc>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d01a      	beq.n	8002314 <SetDefault+0xd4>
		Caculate_Desire(Y_real, 0, buff);
 80022de:	4a10      	ldr	r2, [pc, #64]	; (8002320 <SetDefault+0xe0>)
 80022e0:	2100      	movs	r1, #0
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff fe28 	bl	8001f38 <Caculate_Desire>
		Y_desire[0]=Y_real[0];
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <SetDefault+0xec>)
 80022f0:	801a      	strh	r2, [r3, #0]
		Trans(X_real[0], Y_real[0]);
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022fe:	4619      	mov	r1, r3
 8002300:	4610      	mov	r0, r2
 8002302:	f7ff fbcf 	bl	8001aa4 <Trans>
		memset(buff,0,sizeof(buff));
 8002306:	2232      	movs	r2, #50	; 0x32
 8002308:	2100      	movs	r1, #0
 800230a:	4805      	ldr	r0, [pc, #20]	; (8002320 <SetDefault+0xe0>)
 800230c:	f009 ff49 	bl	800c1a2 <memset>
	}
}
 8002310:	e000      	b.n	8002314 <SetDefault+0xd4>
		if((msg.buffer)=='-'){
 8002312:	bf00      	nop
}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	200005b8 	.word	0x200005b8
 8002320:	20000f8c 	.word	0x20000f8c
 8002324:	08011010 	.word	0x08011010
 8002328:	200005bc 	.word	0x200005bc
 800232c:	200009a4 	.word	0x200009a4

08002330 <Desire>:
void Desire(msgQueueObj_t msg){
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	80b8      	strh	r0, [r7, #4]
	if(pause){
 8002338:	4b58      	ldr	r3, [pc, #352]	; (800249c <Desire+0x16c>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d01b      	beq.n	8002378 <Desire+0x48>
		X_pause[idx]=1;
 8002340:	4b57      	ldr	r3, [pc, #348]	; (80024a0 <Desire+0x170>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	4b57      	ldr	r3, [pc, #348]	; (80024a4 <Desire+0x174>)
 8002348:	2101      	movs	r1, #1
 800234a:	5499      	strb	r1, [r3, r2]
		idx==N-1?idx=1:idx++;
 800234c:	4b54      	ldr	r3, [pc, #336]	; (80024a0 <Desire+0x170>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	3301      	adds	r3, #1
 8002352:	b2da      	uxtb	r2, r3
 8002354:	4b52      	ldr	r3, [pc, #328]	; (80024a0 <Desire+0x170>)
 8002356:	701a      	strb	r2, [r3, #0]
		pause=!pause;
 8002358:	4b50      	ldr	r3, [pc, #320]	; (800249c <Desire+0x16c>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	bf14      	ite	ne
 8002360:	2301      	movne	r3, #1
 8002362:	2300      	moveq	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	f083 0301 	eor.w	r3, r3, #1
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4b4a      	ldr	r3, [pc, #296]	; (800249c <Desire+0x16c>)
 8002374:	701a      	strb	r2, [r3, #0]
		return;
 8002376:	e08d      	b.n	8002494 <Desire+0x164>
	}
	if((msg.buffer)!='\n'&&(msg.buffer)!=' '){
 8002378:	793b      	ldrb	r3, [r7, #4]
 800237a:	2b0a      	cmp	r3, #10
 800237c:	d02c      	beq.n	80023d8 <Desire+0xa8>
 800237e:	793b      	ldrb	r3, [r7, #4]
 8002380:	2b20      	cmp	r3, #32
 8002382:	d029      	beq.n	80023d8 <Desire+0xa8>
		if((msg.buffer)=='-'){
 8002384:	793b      	ldrb	r3, [r7, #4]
 8002386:	2b2d      	cmp	r3, #45	; 0x2d
 8002388:	d10d      	bne.n	80023a6 <Desire+0x76>
			buff[count]=msg.buffer;
 800238a:	7939      	ldrb	r1, [r7, #4]
 800238c:	4b46      	ldr	r3, [pc, #280]	; (80024a8 <Desire+0x178>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	b249      	sxtb	r1, r1
 8002394:	4b45      	ldr	r3, [pc, #276]	; (80024ac <Desire+0x17c>)
 8002396:	5499      	strb	r1, [r3, r2]

			count++;
 8002398:	4b43      	ldr	r3, [pc, #268]	; (80024a8 <Desire+0x178>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	3301      	adds	r3, #1
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	4b41      	ldr	r3, [pc, #260]	; (80024a8 <Desire+0x178>)
 80023a2:	701a      	strb	r2, [r3, #0]
		if((msg.buffer)=='-'){
 80023a4:	e075      	b.n	8002492 <Desire+0x162>
		}
		else if(isdigit((int)msg.buffer)){
 80023a6:	793b      	ldrb	r3, [r7, #4]
 80023a8:	3301      	adds	r3, #1
 80023aa:	4a41      	ldr	r2, [pc, #260]	; (80024b0 <Desire+0x180>)
 80023ac:	4413      	add	r3, r2
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d06c      	beq.n	8002492 <Desire+0x162>
			buff[count]=(msg.buffer-'0');
 80023b8:	793b      	ldrb	r3, [r7, #4]
 80023ba:	3b30      	subs	r3, #48	; 0x30
 80023bc:	b2d9      	uxtb	r1, r3
 80023be:	4b3a      	ldr	r3, [pc, #232]	; (80024a8 <Desire+0x178>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	b249      	sxtb	r1, r1
 80023c6:	4b39      	ldr	r3, [pc, #228]	; (80024ac <Desire+0x17c>)
 80023c8:	5499      	strb	r1, [r3, r2]
			count++;
 80023ca:	4b37      	ldr	r3, [pc, #220]	; (80024a8 <Desire+0x178>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	3301      	adds	r3, #1
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	4b35      	ldr	r3, [pc, #212]	; (80024a8 <Desire+0x178>)
 80023d4:	701a      	strb	r2, [r3, #0]
		if((msg.buffer)=='-'){
 80023d6:	e05c      	b.n	8002492 <Desire+0x162>
		}
	}
	else if((msg.buffer)==' '&& count!=0){
 80023d8:	793b      	ldrb	r3, [r7, #4]
 80023da:	2b20      	cmp	r3, #32
 80023dc:	d10b      	bne.n	80023f6 <Desire+0xc6>
 80023de:	4b32      	ldr	r3, [pc, #200]	; (80024a8 <Desire+0x178>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d007      	beq.n	80023f6 <Desire+0xc6>
		Caculate_Desire(X_desire, idx, buff);
 80023e6:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <Desire+0x170>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	4a30      	ldr	r2, [pc, #192]	; (80024ac <Desire+0x17c>)
 80023ec:	4619      	mov	r1, r3
 80023ee:	4831      	ldr	r0, [pc, #196]	; (80024b4 <Desire+0x184>)
 80023f0:	f7ff fda2 	bl	8001f38 <Caculate_Desire>
 80023f4:	e04e      	b.n	8002494 <Desire+0x164>
	}
	else if((msg.buffer)=='\n' && count!=0){
 80023f6:	793b      	ldrb	r3, [r7, #4]
 80023f8:	2b0a      	cmp	r3, #10
 80023fa:	d14b      	bne.n	8002494 <Desire+0x164>
 80023fc:	4b2a      	ldr	r3, [pc, #168]	; (80024a8 <Desire+0x178>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d047      	beq.n	8002494 <Desire+0x164>
		Caculate_Desire(Y_desire, idx, buff);
 8002404:	4b26      	ldr	r3, [pc, #152]	; (80024a0 <Desire+0x170>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	4a28      	ldr	r2, [pc, #160]	; (80024ac <Desire+0x17c>)
 800240a:	4619      	mov	r1, r3
 800240c:	482a      	ldr	r0, [pc, #168]	; (80024b8 <Desire+0x188>)
 800240e:	f7ff fd93 	bl	8001f38 <Caculate_Desire>

		if(X_desire[idx]!=X_desire[idx-1] && Y_desire[idx]!=Y_desire[idx-1]){
 8002412:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <Desire+0x170>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <Desire+0x184>)
 800241a:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <Desire+0x170>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	3b01      	subs	r3, #1
 8002424:	4923      	ldr	r1, [pc, #140]	; (80024b4 <Desire+0x184>)
 8002426:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800242a:	429a      	cmp	r2, r3
 800242c:	d015      	beq.n	800245a <Desire+0x12a>
 800242e:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <Desire+0x170>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <Desire+0x188>)
 8002436:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 800243a:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <Desire+0x170>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	3b01      	subs	r3, #1
 8002440:	491d      	ldr	r1, [pc, #116]	; (80024b8 <Desire+0x188>)
 8002442:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002446:	429a      	cmp	r2, r3
 8002448:	d007      	beq.n	800245a <Desire+0x12a>
			HAL_UART_Transmit(&huart3, (uint8_t*)&errorValue, sizeof(errorValue)-1,delay_trans);
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
 800244e:	220d      	movs	r2, #13
 8002450:	491a      	ldr	r1, [pc, #104]	; (80024bc <Desire+0x18c>)
 8002452:	481b      	ldr	r0, [pc, #108]	; (80024c0 <Desire+0x190>)
 8002454:	f004 fd4c 	bl	8006ef0 <HAL_UART_Transmit>
			return;
 8002458:	e01c      	b.n	8002494 <Desire+0x164>
		}
		Trans(X_desire[idx], Y_desire[idx]);
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <Desire+0x170>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <Desire+0x184>)
 8002462:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002466:	4a0e      	ldr	r2, [pc, #56]	; (80024a0 <Desire+0x170>)
 8002468:	7812      	ldrb	r2, [r2, #0]
 800246a:	4611      	mov	r1, r2
 800246c:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <Desire+0x188>)
 800246e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fb15 	bl	8001aa4 <Trans>
		memset(buff,0,sizeof(buff));
 800247a:	2232      	movs	r2, #50	; 0x32
 800247c:	2100      	movs	r1, #0
 800247e:	480b      	ldr	r0, [pc, #44]	; (80024ac <Desire+0x17c>)
 8002480:	f009 fe8f 	bl	800c1a2 <memset>
		if(idx==N-1) idx=1;
		else idx++;
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <Desire+0x170>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	3301      	adds	r3, #1
 800248a:	b2da      	uxtb	r2, r3
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <Desire+0x170>)
 800248e:	701a      	strb	r2, [r3, #0]
 8002490:	e000      	b.n	8002494 <Desire+0x164>
		if((msg.buffer)=='-'){
 8002492:	bf00      	nop
	}
}
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000d93 	.word	0x20000d93
 80024a0:	200000a8 	.word	0x200000a8
 80024a4:	20000d98 	.word	0x20000d98
 80024a8:	200005b8 	.word	0x200005b8
 80024ac:	20000f8c 	.word	0x20000f8c
 80024b0:	08011010 	.word	0x08011010
 80024b4:	200005bc 	.word	0x200005bc
 80024b8:	200009a4 	.word	0x200009a4
 80024bc:	20000090 	.word	0x20000090
 80024c0:	2000050c 	.word	0x2000050c

080024c4 <StartAxisXYDesire>:

/* USER CODE END Header_StartAxisXYDesire */
void StartAxisXYDesire(void *argument)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAxisXYDesire */
	uint32_t count;
	msgQueueObj_t msg;
	osStatus_t status=osError;
 80024cc:	f04f 33ff 	mov.w	r3, #4294967295
 80024d0:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	count = osMessageQueueGetCount(AxisDesireQueueHandle);
 80024d2:	4b7b      	ldr	r3, [pc, #492]	; (80026c0 <StartAxisXYDesire+0x1fc>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f005 ffbe 	bl	8008458 <osMessageQueueGetCount>
 80024dc:	6138      	str	r0, [r7, #16]
	if(count >0 ) status = osMessageQueueGet(AxisDesireQueueHandle, &msg.buffer, NULL, delay_trans);   // wait for message
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00a      	beq.n	80024fa <StartAxisXYDesire+0x36>
 80024e4:	4b76      	ldr	r3, [pc, #472]	; (80026c0 <StartAxisXYDesire+0x1fc>)
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	f107 010c 	add.w	r1, r7, #12
 80024ec:	f04f 33ff 	mov.w	r3, #4294967295
 80024f0:	2200      	movs	r2, #0
 80024f2:	f005 ff53 	bl	800839c <osMessageQueueGet>
 80024f6:	6178      	str	r0, [r7, #20]
 80024f8:	e001      	b.n	80024fe <StartAxisXYDesire+0x3a>
	else 	msg.buffer='\0';
 80024fa:	2300      	movs	r3, #0
 80024fc:	733b      	strb	r3, [r7, #12]
	if (status == osOK) {
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b00      	cmp	r3, #0
 8002502:	f040 8083 	bne.w	800260c <StartAxisXYDesire+0x148>
		if(isalpha((int)msg.buffer)){
 8002506:	7b3b      	ldrb	r3, [r7, #12]
 8002508:	3301      	adds	r3, #1
 800250a:	4a6e      	ldr	r2, [pc, #440]	; (80026c4 <StartAxisXYDesire+0x200>)
 800250c:	4413      	add	r3, r2
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d079      	beq.n	800260c <StartAxisXYDesire+0x148>
			if(msg.buffer=='f'){
 8002518:	7b3b      	ldrb	r3, [r7, #12]
 800251a:	2b66      	cmp	r3, #102	; 0x66
 800251c:	d109      	bne.n	8002532 <StartAxisXYDesire+0x6e>
				HAL_UART_Transmit(&huart3, (uint8_t*)&Set_Default, sizeof(Set_Default)-1,delay_trans);
 800251e:	f04f 33ff 	mov.w	r3, #4294967295
 8002522:	2217      	movs	r2, #23
 8002524:	4968      	ldr	r1, [pc, #416]	; (80026c8 <StartAxisXYDesire+0x204>)
 8002526:	4869      	ldr	r0, [pc, #420]	; (80026cc <StartAxisXYDesire+0x208>)
 8002528:	f004 fce2 	bl	8006ef0 <HAL_UART_Transmit>
				State=FIRST;
 800252c:	4b68      	ldr	r3, [pc, #416]	; (80026d0 <StartAxisXYDesire+0x20c>)
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
			}
			if(msg.buffer=='d'){
 8002532:	7b3b      	ldrb	r3, [r7, #12]
 8002534:	2b64      	cmp	r3, #100	; 0x64
 8002536:	d10a      	bne.n	800254e <StartAxisXYDesire+0x8a>
				HAL_UART_Transmit(&huart3, (uint8_t*)&Desired, sizeof(Desired)-1,delay_trans);
 8002538:	f04f 33ff 	mov.w	r3, #4294967295
 800253c:	2219      	movs	r2, #25
 800253e:	4965      	ldr	r1, [pc, #404]	; (80026d4 <StartAxisXYDesire+0x210>)
 8002540:	4862      	ldr	r0, [pc, #392]	; (80026cc <StartAxisXYDesire+0x208>)
 8002542:	f004 fcd5 	bl	8006ef0 <HAL_UART_Transmit>
				State=DESIRE;
 8002546:	4b62      	ldr	r3, [pc, #392]	; (80026d0 <StartAxisXYDesire+0x20c>)
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	e05e      	b.n	800260c <StartAxisXYDesire+0x148>
			}
			else if(msg.buffer=='r'){
 800254e:	7b3b      	ldrb	r3, [r7, #12]
 8002550:	2b72      	cmp	r3, #114	; 0x72
 8002552:	d128      	bne.n	80025a6 <StartAxisXYDesire+0xe2>
				if(!repeat)HAL_UART_Transmit(&huart3, (uint8_t*)&Repeated, sizeof(Repeated)-1,delay_trans);
 8002554:	4b60      	ldr	r3, [pc, #384]	; (80026d8 <StartAxisXYDesire+0x214>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	f083 0301 	eor.w	r3, r3, #1
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d006      	beq.n	8002570 <StartAxisXYDesire+0xac>
 8002562:	f04f 33ff 	mov.w	r3, #4294967295
 8002566:	2219      	movs	r2, #25
 8002568:	495c      	ldr	r1, [pc, #368]	; (80026dc <StartAxisXYDesire+0x218>)
 800256a:	4858      	ldr	r0, [pc, #352]	; (80026cc <StartAxisXYDesire+0x208>)
 800256c:	f004 fcc0 	bl	8006ef0 <HAL_UART_Transmit>
				if(repeat) HAL_UART_Transmit(&huart3, (uint8_t*)&NotRepeated, sizeof(NotRepeated)-1,delay_trans);
 8002570:	4b59      	ldr	r3, [pc, #356]	; (80026d8 <StartAxisXYDesire+0x214>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d006      	beq.n	8002586 <StartAxisXYDesire+0xc2>
 8002578:	f04f 33ff 	mov.w	r3, #4294967295
 800257c:	221d      	movs	r2, #29
 800257e:	4958      	ldr	r1, [pc, #352]	; (80026e0 <StartAxisXYDesire+0x21c>)
 8002580:	4852      	ldr	r0, [pc, #328]	; (80026cc <StartAxisXYDesire+0x208>)
 8002582:	f004 fcb5 	bl	8006ef0 <HAL_UART_Transmit>
				repeat=!repeat;
 8002586:	4b54      	ldr	r3, [pc, #336]	; (80026d8 <StartAxisXYDesire+0x214>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	bf14      	ite	ne
 800258e:	2301      	movne	r3, #1
 8002590:	2300      	moveq	r3, #0
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f083 0301 	eor.w	r3, r3, #1
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	4b4d      	ldr	r3, [pc, #308]	; (80026d8 <StartAxisXYDesire+0x214>)
 80025a2:	701a      	strb	r2, [r3, #0]
 80025a4:	e032      	b.n	800260c <StartAxisXYDesire+0x148>
			}
			else if(msg.buffer=='g'){
 80025a6:	7b3b      	ldrb	r3, [r7, #12]
 80025a8:	2b67      	cmp	r3, #103	; 0x67
 80025aa:	d10a      	bne.n	80025c2 <StartAxisXYDesire+0xfe>
				HAL_UART_Transmit(&huart3, (uint8_t*)&Go, sizeof(Go)-1,delay_trans);
 80025ac:	f04f 33ff 	mov.w	r3, #4294967295
 80025b0:	2207      	movs	r2, #7
 80025b2:	494c      	ldr	r1, [pc, #304]	; (80026e4 <StartAxisXYDesire+0x220>)
 80025b4:	4845      	ldr	r0, [pc, #276]	; (80026cc <StartAxisXYDesire+0x208>)
 80025b6:	f004 fc9b 	bl	8006ef0 <HAL_UART_Transmit>
				State=GO;
 80025ba:	4b45      	ldr	r3, [pc, #276]	; (80026d0 <StartAxisXYDesire+0x20c>)
 80025bc:	2203      	movs	r2, #3
 80025be:	701a      	strb	r2, [r3, #0]
 80025c0:	e024      	b.n	800260c <StartAxisXYDesire+0x148>
			}
			else if(msg.buffer=='s'){
 80025c2:	7b3b      	ldrb	r3, [r7, #12]
 80025c4:	2b73      	cmp	r3, #115	; 0x73
 80025c6:	d10d      	bne.n	80025e4 <StartAxisXYDesire+0x120>
				HAL_UART_Transmit(&huart3, (uint8_t*)&Restart, sizeof(Restart)-1,delay_trans);
 80025c8:	f04f 33ff 	mov.w	r3, #4294967295
 80025cc:	2209      	movs	r2, #9
 80025ce:	4946      	ldr	r1, [pc, #280]	; (80026e8 <StartAxisXYDesire+0x224>)
 80025d0:	483e      	ldr	r0, [pc, #248]	; (80026cc <StartAxisXYDesire+0x208>)
 80025d2:	f004 fc8d 	bl	8006ef0 <HAL_UART_Transmit>
				restart=true;
 80025d6:	4b45      	ldr	r3, [pc, #276]	; (80026ec <StartAxisXYDesire+0x228>)
 80025d8:	2201      	movs	r2, #1
 80025da:	701a      	strb	r2, [r3, #0]
				State=RESTART;
 80025dc:	4b3c      	ldr	r3, [pc, #240]	; (80026d0 <StartAxisXYDesire+0x20c>)
 80025de:	2205      	movs	r2, #5
 80025e0:	701a      	strb	r2, [r3, #0]
 80025e2:	e013      	b.n	800260c <StartAxisXYDesire+0x148>
			}
			else if(msg.buffer=='p'){
 80025e4:	7b3b      	ldrb	r3, [r7, #12]
 80025e6:	2b70      	cmp	r3, #112	; 0x70
 80025e8:	d110      	bne.n	800260c <StartAxisXYDesire+0x148>
				HAL_UART_Transmit(&huart3, (uint8_t*)&Pause, sizeof(Pause)-1,delay_trans);
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
 80025ee:	2207      	movs	r2, #7
 80025f0:	493f      	ldr	r1, [pc, #252]	; (80026f0 <StartAxisXYDesire+0x22c>)
 80025f2:	4836      	ldr	r0, [pc, #216]	; (80026cc <StartAxisXYDesire+0x208>)
 80025f4:	f004 fc7c 	bl	8006ef0 <HAL_UART_Transmit>
				if(State==GO) State=PAUSE;
 80025f8:	4b35      	ldr	r3, [pc, #212]	; (80026d0 <StartAxisXYDesire+0x20c>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d102      	bne.n	8002606 <StartAxisXYDesire+0x142>
 8002600:	4b33      	ldr	r3, [pc, #204]	; (80026d0 <StartAxisXYDesire+0x20c>)
 8002602:	2204      	movs	r2, #4
 8002604:	701a      	strb	r2, [r3, #0]
				pause=true;
 8002606:	4b3b      	ldr	r3, [pc, #236]	; (80026f4 <StartAxisXYDesire+0x230>)
 8002608:	2201      	movs	r2, #1
 800260a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	switch(State){
 800260c:	4b30      	ldr	r3, [pc, #192]	; (80026d0 <StartAxisXYDesire+0x20c>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b05      	cmp	r3, #5
 8002612:	d850      	bhi.n	80026b6 <StartAxisXYDesire+0x1f2>
 8002614:	a201      	add	r2, pc, #4	; (adr r2, 800261c <StartAxisXYDesire+0x158>)
 8002616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261a:	bf00      	nop
 800261c:	08002635 	.word	0x08002635
 8002620:	08002641 	.word	0x08002641
 8002624:	08002649 	.word	0x08002649
 8002628:	08002657 	.word	0x08002657
 800262c:	080026b7 	.word	0x080026b7
 8002630:	0800266b 	.word	0x0800266b
	case FIRST:
		SetDefault(msg, X_real, Y_real);
 8002634:	4a30      	ldr	r2, [pc, #192]	; (80026f8 <StartAxisXYDesire+0x234>)
 8002636:	4931      	ldr	r1, [pc, #196]	; (80026fc <StartAxisXYDesire+0x238>)
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f7ff fe01 	bl	8002240 <SetDefault>
		break;
 800263e:	e03a      	b.n	80026b6 <StartAxisXYDesire+0x1f2>
	case DESIRE:
		Desire(msg);
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f7ff fe75 	bl	8002330 <Desire>
		break;
 8002646:	e036      	b.n	80026b6 <StartAxisXYDesire+0x1f2>
	case REPEAT:
		idx_real=0;
 8002648:	4b2d      	ldr	r3, [pc, #180]	; (8002700 <StartAxisXYDesire+0x23c>)
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
		State=GO;
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <StartAxisXYDesire+0x20c>)
 8002650:	2203      	movs	r2, #3
 8002652:	701a      	strb	r2, [r3, #0]
		break;
 8002654:	e02f      	b.n	80026b6 <StartAxisXYDesire+0x1f2>
	case GO:
		pause = false;
 8002656:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <StartAxisXYDesire+0x230>)
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
		if(runDone){
 800265c:	4b29      	ldr	r3, [pc, #164]	; (8002704 <StartAxisXYDesire+0x240>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d027      	beq.n	80026b4 <StartAxisXYDesire+0x1f0>
			Begin();
 8002664:	f7ff fcc8 	bl	8001ff8 <Begin>
		}
		break;
 8002668:	e024      	b.n	80026b4 <StartAxisXYDesire+0x1f0>
	case PAUSE:
		break;
	case RESTART:
		memset(X_desire,0,sizeof(X_desire));
 800266a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800266e:	2100      	movs	r1, #0
 8002670:	4825      	ldr	r0, [pc, #148]	; (8002708 <StartAxisXYDesire+0x244>)
 8002672:	f009 fd96 	bl	800c1a2 <memset>
		memset(Y_desire,0,sizeof(Y_desire));
 8002676:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800267a:	2100      	movs	r1, #0
 800267c:	4823      	ldr	r0, [pc, #140]	; (800270c <StartAxisXYDesire+0x248>)
 800267e:	f009 fd90 	bl	800c1a2 <memset>
		memset(X_pause,0,sizeof(X_pause));
 8002682:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002686:	2100      	movs	r1, #0
 8002688:	4821      	ldr	r0, [pc, #132]	; (8002710 <StartAxisXYDesire+0x24c>)
 800268a:	f009 fd8a 	bl	800c1a2 <memset>

		X_real[0]=0;
 800268e:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <StartAxisXYDesire+0x238>)
 8002690:	2200      	movs	r2, #0
 8002692:	801a      	strh	r2, [r3, #0]
		Y_real[0]=0;
 8002694:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <StartAxisXYDesire+0x234>)
 8002696:	2200      	movs	r2, #0
 8002698:	801a      	strh	r2, [r3, #0]

		pause = false;
 800269a:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <StartAxisXYDesire+0x230>)
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
		idx=1; idx_real=0;
 80026a0:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <StartAxisXYDesire+0x250>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	701a      	strb	r2, [r3, #0]
 80026a6:	4b16      	ldr	r3, [pc, #88]	; (8002700 <StartAxisXYDesire+0x23c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
		repeat=false;
 80026ac:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <StartAxisXYDesire+0x214>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
		break;
 80026b2:	e000      	b.n	80026b6 <StartAxisXYDesire+0x1f2>
		break;
 80026b4:	bf00      	nop
	}
    osDelay(1);
 80026b6:	2001      	movs	r0, #1
 80026b8:	f005 fd82 	bl	80081c0 <osDelay>
	count = osMessageQueueGetCount(AxisDesireQueueHandle);
 80026bc:	e709      	b.n	80024d2 <StartAxisXYDesire+0xe>
 80026be:	bf00      	nop
 80026c0:	20000568 	.word	0x20000568
 80026c4:	08011010 	.word	0x08011010
 80026c8:	20000004 	.word	0x20000004
 80026cc:	2000050c 	.word	0x2000050c
 80026d0:	20000fc4 	.word	0x20000fc4
 80026d4:	2000001c 	.word	0x2000001c
 80026d8:	20000d92 	.word	0x20000d92
 80026dc:	20000038 	.word	0x20000038
 80026e0:	20000054 	.word	0x20000054
 80026e4:	20000074 	.word	0x20000074
 80026e8:	2000007c 	.word	0x2000007c
 80026ec:	20000d94 	.word	0x20000d94
 80026f0:	20000088 	.word	0x20000088
 80026f4:	20000d93 	.word	0x20000d93
 80026f8:	20000d90 	.word	0x20000d90
 80026fc:	20000d8c 	.word	0x20000d8c
 8002700:	20000fbe 	.word	0x20000fbe
 8002704:	200000a7 	.word	0x200000a7
 8002708:	200005bc 	.word	0x200005bc
 800270c:	200009a4 	.word	0x200009a4
 8002710:	20000d98 	.word	0x20000d98
 8002714:	200000a8 	.word	0x200000a8

08002718 <Caculate_Run>:
* @retval None
*/
static uint32_t updateTimeToRun=0;
static uint8_t flag_dr=donot;

void Caculate_Run(){
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
	if(restart){
 800271c:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <Caculate_Run+0xa0>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00b      	beq.n	800273c <Caculate_Run+0x24>
		Robot_Move(0, 0, 0);
 8002724:	ed9f 2b1e 	vldr	d2, [pc, #120]	; 80027a0 <Caculate_Run+0x88>
 8002728:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 80027a0 <Caculate_Run+0x88>
 800272c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80027a0 <Caculate_Run+0x88>
 8002730:	f000 fa46 	bl	8002bc0 <Robot_Move>
		Run=NO;
 8002734:	4b21      	ldr	r3, [pc, #132]	; (80027bc <Caculate_Run+0xa4>)
 8002736:	2204      	movs	r2, #4
 8002738:	701a      	strb	r2, [r3, #0]
		return;
 800273a:	e02d      	b.n	8002798 <Caculate_Run+0x80>
	}
	if(pause){
 800273c:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <Caculate_Run+0xa8>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <Caculate_Run+0x3e>
		Robot_Move(0, 0, 0);
 8002744:	ed9f 2b16 	vldr	d2, [pc, #88]	; 80027a0 <Caculate_Run+0x88>
 8002748:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80027a0 <Caculate_Run+0x88>
 800274c:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80027a0 <Caculate_Run+0x88>
 8002750:	f000 fa36 	bl	8002bc0 <Robot_Move>
		return;
 8002754:	e020      	b.n	8002798 <Caculate_Run+0x80>
	}
	if(flag_dr==right || flag_dr==left){
 8002756:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <Caculate_Run+0xac>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d01b      	beq.n	8002796 <Caculate_Run+0x7e>
 800275e:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <Caculate_Run+0xac>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d017      	beq.n	8002796 <Caculate_Run+0x7e>
		return;
	}
	if(updateTimeToRun<=timeToRun ){
 8002766:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <Caculate_Run+0xb0>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	4b18      	ldr	r3, [pc, #96]	; (80027cc <Caculate_Run+0xb4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d80d      	bhi.n	800278e <Caculate_Run+0x76>
		Robot_Move(0.2, 60, 0);
 8002772:	ed9f 2b0b 	vldr	d2, [pc, #44]	; 80027a0 <Caculate_Run+0x88>
 8002776:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 80027a8 <Caculate_Run+0x90>
 800277a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80027b0 <Caculate_Run+0x98>
 800277e:	f000 fa1f 	bl	8002bc0 <Robot_Move>
		updateTimeToRun+=ticktak;
 8002782:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <Caculate_Run+0xb0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	330a      	adds	r3, #10
 8002788:	4a0f      	ldr	r2, [pc, #60]	; (80027c8 <Caculate_Run+0xb0>)
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	e004      	b.n	8002798 <Caculate_Run+0x80>
	}
	else{
		Run=NO;
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <Caculate_Run+0xa4>)
 8002790:	2204      	movs	r2, #4
 8002792:	701a      	strb	r2, [r3, #0]
 8002794:	e000      	b.n	8002798 <Caculate_Run+0x80>
		return;
 8002796:	bf00      	nop
	}

}
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	f3af 8000 	nop.w
	...
 80027ac:	404e0000 	.word	0x404e0000
 80027b0:	9999999a 	.word	0x9999999a
 80027b4:	3fc99999 	.word	0x3fc99999
 80027b8:	20000d94 	.word	0x20000d94
 80027bc:	200000a9 	.word	0x200000a9
 80027c0:	20000d93 	.word	0x20000d93
 80027c4:	200000aa 	.word	0x200000aa
 80027c8:	20000fc8 	.word	0x20000fc8
 80027cc:	20000fc0 	.word	0x20000fc0

080027d0 <StartAutoRun>:
/* USER CODE END Header_StartAutoRun */
void StartAutoRun(void *argument)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAutoRun */
  /* Infinite loop */
  for(;;)
  {
	switch(Run){
 80027d8:	4b15      	ldr	r3, [pc, #84]	; (8002830 <StartAutoRun+0x60>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d823      	bhi.n	8002828 <StartAutoRun+0x58>
 80027e0:	a201      	add	r2, pc, #4	; (adr r2, 80027e8 <StartAutoRun+0x18>)
 80027e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e6:	bf00      	nop
 80027e8:	080027fd 	.word	0x080027fd
 80027ec:	08002803 	.word	0x08002803
 80027f0:	0800280f 	.word	0x0800280f
 80027f4:	08002809 	.word	0x08002809
 80027f8:	08002815 	.word	0x08002815
	case FORWARD:
		Caculate_Run();
 80027fc:	f7ff ff8c 	bl	8002718 <Caculate_Run>
		break;
 8002800:	e012      	b.n	8002828 <StartAutoRun+0x58>
	case BACKWARD:
		Caculate_Run();
 8002802:	f7ff ff89 	bl	8002718 <Caculate_Run>
		break;
 8002806:	e00f      	b.n	8002828 <StartAutoRun+0x58>
	case RIGHT:
		Caculate_Run();
 8002808:	f7ff ff86 	bl	8002718 <Caculate_Run>
		break;
 800280c:	e00c      	b.n	8002828 <StartAutoRun+0x58>
	case LEFT:
		Caculate_Run();
 800280e:	f7ff ff83 	bl	8002718 <Caculate_Run>
		break;
 8002812:	e009      	b.n	8002828 <StartAutoRun+0x58>
	case NO:
		runDone=true;
 8002814:	4b07      	ldr	r3, [pc, #28]	; (8002834 <StartAutoRun+0x64>)
 8002816:	2201      	movs	r2, #1
 8002818:	701a      	strb	r2, [r3, #0]
		updateTimeToRun=0;
 800281a:	4b07      	ldr	r3, [pc, #28]	; (8002838 <StartAutoRun+0x68>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
		restart=false;
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <StartAutoRun+0x6c>)
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
		break;
 8002826:	bf00      	nop
	}
	osDelay(ticktak);
 8002828:	200a      	movs	r0, #10
 800282a:	f005 fcc9 	bl	80081c0 <osDelay>
	switch(Run){
 800282e:	e7d3      	b.n	80027d8 <StartAutoRun+0x8>
 8002830:	200000a9 	.word	0x200000a9
 8002834:	200000a7 	.word	0x200000a7
 8002838:	20000fc8 	.word	0x20000fc8
 800283c:	20000d94 	.word	0x20000d94

08002840 <StartTaskWit>:
*/
int16_t angle_desire=0;
int16_t diff;
/* USER CODE END Header_StartTaskWit */
void StartTaskWit(void *argument)
{
 8002840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskWit */
  /* Infinite loop */
  for(;;)
  {
	switch(Run){
 800284a:	4ba5      	ldr	r3, [pc, #660]	; (8002ae0 <StartTaskWit+0x2a0>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b04      	cmp	r3, #4
 8002850:	d81e      	bhi.n	8002890 <StartTaskWit+0x50>
 8002852:	a201      	add	r2, pc, #4	; (adr r2, 8002858 <StartTaskWit+0x18>)
 8002854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002858:	0800286d 	.word	0x0800286d
 800285c:	08002875 	.word	0x08002875
 8002860:	08002889 	.word	0x08002889
 8002864:	0800287f 	.word	0x0800287f
 8002868:	08002891 	.word	0x08002891
	case FORWARD:
		angle_desire=0;
 800286c:	4b9d      	ldr	r3, [pc, #628]	; (8002ae4 <StartTaskWit+0x2a4>)
 800286e:	2200      	movs	r2, #0
 8002870:	801a      	strh	r2, [r3, #0]
		break;
 8002872:	e00d      	b.n	8002890 <StartTaskWit+0x50>
	case BACKWARD:
		angle_desire=-179;
 8002874:	4b9b      	ldr	r3, [pc, #620]	; (8002ae4 <StartTaskWit+0x2a4>)
 8002876:	f64f 724d 	movw	r2, #65357	; 0xff4d
 800287a:	801a      	strh	r2, [r3, #0]
		break;
 800287c:	e008      	b.n	8002890 <StartTaskWit+0x50>
	case RIGHT:
		angle_desire=-90;
 800287e:	4b99      	ldr	r3, [pc, #612]	; (8002ae4 <StartTaskWit+0x2a4>)
 8002880:	f64f 72a6 	movw	r2, #65446	; 0xffa6
 8002884:	801a      	strh	r2, [r3, #0]
		break;
 8002886:	e003      	b.n	8002890 <StartTaskWit+0x50>
	case LEFT:
		angle_desire=90;
 8002888:	4b96      	ldr	r3, [pc, #600]	; (8002ae4 <StartTaskWit+0x2a4>)
 800288a:	225a      	movs	r2, #90	; 0x5a
 800288c:	801a      	strh	r2, [r3, #0]
		break;
 800288e:	bf00      	nop
	case NO:
		break;
	}
//	UARTprintf("angle z: %d \r\n",angle_real.z);
	if(Run==BACKWARD){
 8002890:	4b93      	ldr	r3, [pc, #588]	; (8002ae0 <StartTaskWit+0x2a0>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d132      	bne.n	80028fe <StartTaskWit+0xbe>
		if (angle_real.z >= 0) diff=fabs(179 - angle_real.z);
 8002898:	4b93      	ldr	r3, [pc, #588]	; (8002ae8 <StartTaskWit+0x2a8>)
 800289a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	db15      	blt.n	80028ce <StartTaskWit+0x8e>
 80028a2:	4b91      	ldr	r3, [pc, #580]	; (8002ae8 <StartTaskWit+0x2a8>)
 80028a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80028a8:	f1c3 03b3 	rsb	r3, r3, #179	; 0xb3
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fd fe39 	bl	8000524 <__aeabi_i2d>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4614      	mov	r4, r2
 80028b8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80028bc:	4620      	mov	r0, r4
 80028be:	4629      	mov	r1, r5
 80028c0:	f7fe f94a 	bl	8000b58 <__aeabi_d2iz>
 80028c4:	4603      	mov	r3, r0
 80028c6:	b21a      	sxth	r2, r3
 80028c8:	4b88      	ldr	r3, [pc, #544]	; (8002aec <StartTaskWit+0x2ac>)
 80028ca:	801a      	strh	r2, [r3, #0]
 80028cc:	e02f      	b.n	800292e <StartTaskWit+0xee>
		else diff=fabs(-179 - angle_real.z);
 80028ce:	4b86      	ldr	r3, [pc, #536]	; (8002ae8 <StartTaskWit+0x2a8>)
 80028d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80028d4:	461a      	mov	r2, r3
 80028d6:	f06f 03b2 	mvn.w	r3, #178	; 0xb2
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fd fe21 	bl	8000524 <__aeabi_i2d>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4690      	mov	r8, r2
 80028e8:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80028ec:	4640      	mov	r0, r8
 80028ee:	4649      	mov	r1, r9
 80028f0:	f7fe f932 	bl	8000b58 <__aeabi_d2iz>
 80028f4:	4603      	mov	r3, r0
 80028f6:	b21a      	sxth	r2, r3
 80028f8:	4b7c      	ldr	r3, [pc, #496]	; (8002aec <StartTaskWit+0x2ac>)
 80028fa:	801a      	strh	r2, [r3, #0]
 80028fc:	e017      	b.n	800292e <StartTaskWit+0xee>
	}
	else diff=fabs(angle_desire - angle_real.z);
 80028fe:	4b79      	ldr	r3, [pc, #484]	; (8002ae4 <StartTaskWit+0x2a4>)
 8002900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002904:	461a      	mov	r2, r3
 8002906:	4b78      	ldr	r3, [pc, #480]	; (8002ae8 <StartTaskWit+0x2a8>)
 8002908:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd fe08 	bl	8000524 <__aeabi_i2d>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4692      	mov	sl, r2
 800291a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800291e:	4650      	mov	r0, sl
 8002920:	4659      	mov	r1, fp
 8002922:	f7fe f919 	bl	8000b58 <__aeabi_d2iz>
 8002926:	4603      	mov	r3, r0
 8002928:	b21a      	sxth	r2, r3
 800292a:	4b70      	ldr	r3, [pc, #448]	; (8002aec <StartTaskWit+0x2ac>)
 800292c:	801a      	strh	r2, [r3, #0]

	if(pause==true || runDone == true){
 800292e:	4b70      	ldr	r3, [pc, #448]	; (8002af0 <StartTaskWit+0x2b0>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d103      	bne.n	800293e <StartTaskWit+0xfe>
 8002936:	4b6f      	ldr	r3, [pc, #444]	; (8002af4 <StartTaskWit+0x2b4>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <StartTaskWit+0x106>
		flag_dr=no;
 800293e:	4b6e      	ldr	r3, [pc, #440]	; (8002af8 <StartTaskWit+0x2b8>)
 8002940:	2203      	movs	r2, #3
 8002942:	701a      	strb	r2, [r3, #0]
 8002944:	e05b      	b.n	80029fe <StartTaskWit+0x1be>
	}
	else if(Run==BACKWARD && ((angle_real.z >= 179 - tolerance) || (angle_real.z <= -179 + tolerance))){
 8002946:	4b66      	ldr	r3, [pc, #408]	; (8002ae0 <StartTaskWit+0x2a0>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d10e      	bne.n	800296c <StartTaskWit+0x12c>
 800294e:	4b66      	ldr	r3, [pc, #408]	; (8002ae8 <StartTaskWit+0x2a8>)
 8002950:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002954:	2bb1      	cmp	r3, #177	; 0xb1
 8002956:	dc05      	bgt.n	8002964 <StartTaskWit+0x124>
 8002958:	4b63      	ldr	r3, [pc, #396]	; (8002ae8 <StartTaskWit+0x2a8>)
 800295a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800295e:	f113 0fb1 	cmn.w	r3, #177	; 0xb1
 8002962:	da03      	bge.n	800296c <StartTaskWit+0x12c>
		flag_dr=donot;
 8002964:	4b64      	ldr	r3, [pc, #400]	; (8002af8 <StartTaskWit+0x2b8>)
 8002966:	2202      	movs	r2, #2
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	e048      	b.n	80029fe <StartTaskWit+0x1be>
	}
	else if(Run!=BACKWARD && angle_real.z >= angle_desire-tolerance && angle_real.z <= angle_desire+tolerance){
 800296c:	4b5c      	ldr	r3, [pc, #368]	; (8002ae0 <StartTaskWit+0x2a0>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d017      	beq.n	80029a4 <StartTaskWit+0x164>
 8002974:	4b5c      	ldr	r3, [pc, #368]	; (8002ae8 <StartTaskWit+0x2a8>)
 8002976:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800297a:	461a      	mov	r2, r3
 800297c:	4b59      	ldr	r3, [pc, #356]	; (8002ae4 <StartTaskWit+0x2a4>)
 800297e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002982:	3b01      	subs	r3, #1
 8002984:	429a      	cmp	r2, r3
 8002986:	db0d      	blt.n	80029a4 <StartTaskWit+0x164>
 8002988:	4b57      	ldr	r3, [pc, #348]	; (8002ae8 <StartTaskWit+0x2a8>)
 800298a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800298e:	461a      	mov	r2, r3
 8002990:	4b54      	ldr	r3, [pc, #336]	; (8002ae4 <StartTaskWit+0x2a4>)
 8002992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002996:	3301      	adds	r3, #1
 8002998:	429a      	cmp	r2, r3
 800299a:	dc03      	bgt.n	80029a4 <StartTaskWit+0x164>
		flag_dr=donot;
 800299c:	4b56      	ldr	r3, [pc, #344]	; (8002af8 <StartTaskWit+0x2b8>)
 800299e:	2202      	movs	r2, #2
 80029a0:	701a      	strb	r2, [r3, #0]
 80029a2:	e02c      	b.n	80029fe <StartTaskWit+0x1be>
	}
	else if(angle_real.z > angle_desire+tolerance ){
 80029a4:	4b50      	ldr	r3, [pc, #320]	; (8002ae8 <StartTaskWit+0x2a8>)
 80029a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029aa:	461a      	mov	r2, r3
 80029ac:	4b4d      	ldr	r3, [pc, #308]	; (8002ae4 <StartTaskWit+0x2a4>)
 80029ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029b2:	3301      	adds	r3, #1
 80029b4:	429a      	cmp	r2, r3
 80029b6:	dd0c      	ble.n	80029d2 <StartTaskWit+0x192>
		if(diff <= 180) flag_dr=right;
 80029b8:	4b4c      	ldr	r3, [pc, #304]	; (8002aec <StartTaskWit+0x2ac>)
 80029ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029be:	2bb4      	cmp	r3, #180	; 0xb4
 80029c0:	dc03      	bgt.n	80029ca <StartTaskWit+0x18a>
 80029c2:	4b4d      	ldr	r3, [pc, #308]	; (8002af8 <StartTaskWit+0x2b8>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	701a      	strb	r2, [r3, #0]
 80029c8:	e019      	b.n	80029fe <StartTaskWit+0x1be>
		else flag_dr=left;
 80029ca:	4b4b      	ldr	r3, [pc, #300]	; (8002af8 <StartTaskWit+0x2b8>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
 80029d0:	e015      	b.n	80029fe <StartTaskWit+0x1be>
	}
	else if(angle_real.z < angle_desire-tolerance){
 80029d2:	4b45      	ldr	r3, [pc, #276]	; (8002ae8 <StartTaskWit+0x2a8>)
 80029d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029d8:	461a      	mov	r2, r3
 80029da:	4b42      	ldr	r3, [pc, #264]	; (8002ae4 <StartTaskWit+0x2a4>)
 80029dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029e0:	3b01      	subs	r3, #1
 80029e2:	429a      	cmp	r2, r3
 80029e4:	da0b      	bge.n	80029fe <StartTaskWit+0x1be>
		if(diff <= 180) flag_dr=left;
 80029e6:	4b41      	ldr	r3, [pc, #260]	; (8002aec <StartTaskWit+0x2ac>)
 80029e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ec:	2bb4      	cmp	r3, #180	; 0xb4
 80029ee:	dc03      	bgt.n	80029f8 <StartTaskWit+0x1b8>
 80029f0:	4b41      	ldr	r3, [pc, #260]	; (8002af8 <StartTaskWit+0x2b8>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	e002      	b.n	80029fe <StartTaskWit+0x1be>
		else flag_dr=right;
 80029f8:	4b3f      	ldr	r3, [pc, #252]	; (8002af8 <StartTaskWit+0x2b8>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
	}

	if (flag_dr==no){
 80029fe:	4b3e      	ldr	r3, [pc, #248]	; (8002af8 <StartTaskWit+0x2b8>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d108      	bne.n	8002a18 <StartTaskWit+0x1d8>
		Robot_Move(0, 0, 0);
 8002a06:	ed9f 2b2c 	vldr	d2, [pc, #176]	; 8002ab8 <StartTaskWit+0x278>
 8002a0a:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8002ab8 <StartTaskWit+0x278>
 8002a0e:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8002ab8 <StartTaskWit+0x278>
 8002a12:	f000 f8d5 	bl	8002bc0 <Robot_Move>
 8002a16:	e048      	b.n	8002aaa <StartTaskWit+0x26a>
	}
	else if (flag_dr==donot){
 8002a18:	4b37      	ldr	r3, [pc, #220]	; (8002af8 <StartTaskWit+0x2b8>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d105      	bne.n	8002a2c <StartTaskWit+0x1ec>
		vTaskResume(AutoRunHandle);
 8002a20:	4b36      	ldr	r3, [pc, #216]	; (8002afc <StartTaskWit+0x2bc>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f006 fe85 	bl	8009734 <vTaskResume>
 8002a2a:	e03e      	b.n	8002aaa <StartTaskWit+0x26a>
	}
	else if(flag_dr==right){
 8002a2c:	4b32      	ldr	r3, [pc, #200]	; (8002af8 <StartTaskWit+0x2b8>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d11b      	bne.n	8002a6c <StartTaskWit+0x22c>
		vTaskSuspend(AutoRunHandle);
 8002a34:	4b31      	ldr	r3, [pc, #196]	; (8002afc <StartTaskWit+0x2bc>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f006 fdd3 	bl	80095e4 <vTaskSuspend>
		if(diff>=40) Robot_Move(0, 0, -0.2);
 8002a3e:	4b2b      	ldr	r3, [pc, #172]	; (8002aec <StartTaskWit+0x2ac>)
 8002a40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a44:	2b27      	cmp	r3, #39	; 0x27
 8002a46:	dd08      	ble.n	8002a5a <StartTaskWit+0x21a>
 8002a48:	ed9f 2b1d 	vldr	d2, [pc, #116]	; 8002ac0 <StartTaskWit+0x280>
 8002a4c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8002ab8 <StartTaskWit+0x278>
 8002a50:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8002ab8 <StartTaskWit+0x278>
 8002a54:	f000 f8b4 	bl	8002bc0 <Robot_Move>
 8002a58:	e027      	b.n	8002aaa <StartTaskWit+0x26a>
		else Robot_Move(0, 0, -0.025);
 8002a5a:	ed9f 2b1b 	vldr	d2, [pc, #108]	; 8002ac8 <StartTaskWit+0x288>
 8002a5e:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8002ab8 <StartTaskWit+0x278>
 8002a62:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8002ab8 <StartTaskWit+0x278>
 8002a66:	f000 f8ab 	bl	8002bc0 <Robot_Move>
 8002a6a:	e01e      	b.n	8002aaa <StartTaskWit+0x26a>
	}
	else if(flag_dr==left){
 8002a6c:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <StartTaskWit+0x2b8>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d11a      	bne.n	8002aaa <StartTaskWit+0x26a>
		vTaskSuspend(AutoRunHandle);
 8002a74:	4b21      	ldr	r3, [pc, #132]	; (8002afc <StartTaskWit+0x2bc>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f006 fdb3 	bl	80095e4 <vTaskSuspend>
		if(diff>=40) Robot_Move(0, 0, 0.2);
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <StartTaskWit+0x2ac>)
 8002a80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a84:	2b27      	cmp	r3, #39	; 0x27
 8002a86:	dd08      	ble.n	8002a9a <StartTaskWit+0x25a>
 8002a88:	ed9f 2b11 	vldr	d2, [pc, #68]	; 8002ad0 <StartTaskWit+0x290>
 8002a8c:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8002ab8 <StartTaskWit+0x278>
 8002a90:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8002ab8 <StartTaskWit+0x278>
 8002a94:	f000 f894 	bl	8002bc0 <Robot_Move>
 8002a98:	e007      	b.n	8002aaa <StartTaskWit+0x26a>
		else Robot_Move(0, 0, 0.025);
 8002a9a:	ed9f 2b0f 	vldr	d2, [pc, #60]	; 8002ad8 <StartTaskWit+0x298>
 8002a9e:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8002ab8 <StartTaskWit+0x278>
 8002aa2:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8002ab8 <StartTaskWit+0x278>
 8002aa6:	f000 f88b 	bl	8002bc0 <Robot_Move>
	}
	osDelay(50);
 8002aaa:	2032      	movs	r0, #50	; 0x32
 8002aac:	f005 fb88 	bl	80081c0 <osDelay>
	switch(Run){
 8002ab0:	e6cb      	b.n	800284a <StartTaskWit+0xa>
 8002ab2:	bf00      	nop
 8002ab4:	f3af 8000 	nop.w
	...
 8002ac0:	9999999a 	.word	0x9999999a
 8002ac4:	bfc99999 	.word	0xbfc99999
 8002ac8:	9999999a 	.word	0x9999999a
 8002acc:	bf999999 	.word	0xbf999999
 8002ad0:	9999999a 	.word	0x9999999a
 8002ad4:	3fc99999 	.word	0x3fc99999
 8002ad8:	9999999a 	.word	0x9999999a
 8002adc:	3f999999 	.word	0x3f999999
 8002ae0:	200000a9 	.word	0x200000a9
 8002ae4:	20000fcc 	.word	0x20000fcc
 8002ae8:	20001074 	.word	0x20001074
 8002aec:	20000fce 	.word	0x20000fce
 8002af0:	20000d93 	.word	0x20000d93
 8002af4:	200000a7 	.word	0x200000a7
 8002af8:	200000aa 	.word	0x200000aa
 8002afc:	2000055c 	.word	0x2000055c

08002b00 <StartPID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPID */
void StartPID(void *argument)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPID */
  /* Infinite loop */
  for(;;)
  {
//	  PID();
    osDelay(100);
 8002b08:	2064      	movs	r0, #100	; 0x64
 8002b0a:	f005 fb59 	bl	80081c0 <osDelay>
 8002b0e:	e7fb      	b.n	8002b08 <StartPID+0x8>

08002b10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d101      	bne.n	8002b26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b22:	f001 f9c5 	bl	8003eb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40014400 	.word	0x40014400

08002b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b38:	b672      	cpsid	i
}
 8002b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b3c:	e7fe      	b.n	8002b3c <Error_Handler+0x8>
	...

08002b40 <rpm_to_duty>:

bool flag_rot_1=true, flag_rot_2=true, flag_rot_3=true;

double prev_duty_1=100, prev_duty_2=100, prev_duty_3=100;
double duty=100;
double rpm_to_duty(double rpm){
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	ed87 0b00 	vstr	d0, [r7]
	if((int32_t)rpm==0){
 8002b4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b4e:	f7fe f803 	bl	8000b58 <__aeabi_d2iz>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d109      	bne.n	8002b6c <rpm_to_duty+0x2c>
		duty=100;
 8002b58:	4917      	ldr	r1, [pc, #92]	; (8002bb8 <rpm_to_duty+0x78>)
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <rpm_to_duty+0x7c>)
 8002b60:	e9c1 2300 	strd	r2, r3, [r1]
		return duty;
 8002b64:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <rpm_to_duty+0x78>)
 8002b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6a:	e013      	b.n	8002b94 <rpm_to_duty+0x54>
	}
	double duty=(98.15-0.6*rpm);
 8002b6c:	a30e      	add	r3, pc, #56	; (adr r3, 8002ba8 <rpm_to_duty+0x68>)
 8002b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b76:	f7fd fd3f 	bl	80005f8 <__aeabi_dmul>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	a10c      	add	r1, pc, #48	; (adr r1, 8002bb0 <rpm_to_duty+0x70>)
 8002b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b84:	f7fd fb80 	bl	8000288 <__aeabi_dsub>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return duty;
 8002b90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8002b94:	ec43 2b17 	vmov	d7, r2, r3
 8002b98:	eeb0 0a47 	vmov.f32	s0, s14
 8002b9c:	eef0 0a67 	vmov.f32	s1, s15
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	33333333 	.word	0x33333333
 8002bac:	3fe33333 	.word	0x3fe33333
 8002bb0:	9999999a 	.word	0x9999999a
 8002bb4:	40588999 	.word	0x40588999
 8002bb8:	200000b0 	.word	0x200000b0
 8002bbc:	40590000 	.word	0x40590000

08002bc0 <Robot_Move>:
void Robot_Move(double Vd, double Theta, double Vtheta){
 8002bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bc4:	b092      	sub	sp, #72	; 0x48
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	ed87 0b06 	vstr	d0, [r7, #24]
 8002bcc:	ed87 1b04 	vstr	d1, [r7, #16]
 8002bd0:	ed87 2b02 	vstr	d2, [r7, #8]
	double V1_abs, V2_abs, V3_abs, Vmax, Temp;

	V2=Vd*(-0.87*cos(Theta*PI/180)-0.5f*sin(Theta*PI/180))+Vtheta;
 8002bd4:	a396      	add	r3, pc, #600	; (adr r3, 8002e30 <Robot_Move+0x270>)
 8002bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bda:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bde:	f7fd fd0b 	bl	80005f8 <__aeabi_dmul>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4610      	mov	r0, r2
 8002be8:	4619      	mov	r1, r3
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	4b94      	ldr	r3, [pc, #592]	; (8002e40 <Robot_Move+0x280>)
 8002bf0:	f7fd fe2c 	bl	800084c <__aeabi_ddiv>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	ec43 2b17 	vmov	d7, r2, r3
 8002bfc:	eeb0 0a47 	vmov.f32	s0, s14
 8002c00:	eef0 0a67 	vmov.f32	s1, s15
 8002c04:	f00d f8a8 	bl	800fd58 <cos>
 8002c08:	ec51 0b10 	vmov	r0, r1, d0
 8002c0c:	a386      	add	r3, pc, #536	; (adr r3, 8002e28 <Robot_Move+0x268>)
 8002c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c12:	f7fd fcf1 	bl	80005f8 <__aeabi_dmul>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	e9c7 2300 	strd	r2, r3, [r7]
 8002c1e:	a384      	add	r3, pc, #528	; (adr r3, 8002e30 <Robot_Move+0x270>)
 8002c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c24:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c28:	f7fd fce6 	bl	80005f8 <__aeabi_dmul>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4610      	mov	r0, r2
 8002c32:	4619      	mov	r1, r3
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	4b81      	ldr	r3, [pc, #516]	; (8002e40 <Robot_Move+0x280>)
 8002c3a:	f7fd fe07 	bl	800084c <__aeabi_ddiv>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	ec43 2b17 	vmov	d7, r2, r3
 8002c46:	eeb0 0a47 	vmov.f32	s0, s14
 8002c4a:	eef0 0a67 	vmov.f32	s1, s15
 8002c4e:	f00d f8e3 	bl	800fe18 <sin>
 8002c52:	ec51 0b10 	vmov	r0, r1, d0
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	4b7a      	ldr	r3, [pc, #488]	; (8002e44 <Robot_Move+0x284>)
 8002c5c:	f7fd fccc 	bl	80005f8 <__aeabi_dmul>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c68:	f7fd fb0e 	bl	8000288 <__aeabi_dsub>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c78:	f7fd fcbe 	bl	80005f8 <__aeabi_dmul>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c88:	f7fd fb00 	bl	800028c <__adddf3>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	496d      	ldr	r1, [pc, #436]	; (8002e48 <Robot_Move+0x288>)
 8002c92:	e9c1 2300 	strd	r2, r3, [r1]
	V3=Vd*(0.87*cos(Theta*PI/180)-0.5f*sin(Theta*PI/180))+Vtheta;
 8002c96:	a366      	add	r3, pc, #408	; (adr r3, 8002e30 <Robot_Move+0x270>)
 8002c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ca0:	f7fd fcaa 	bl	80005f8 <__aeabi_dmul>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	4b63      	ldr	r3, [pc, #396]	; (8002e40 <Robot_Move+0x280>)
 8002cb2:	f7fd fdcb 	bl	800084c <__aeabi_ddiv>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	ec43 2b17 	vmov	d7, r2, r3
 8002cbe:	eeb0 0a47 	vmov.f32	s0, s14
 8002cc2:	eef0 0a67 	vmov.f32	s1, s15
 8002cc6:	f00d f847 	bl	800fd58 <cos>
 8002cca:	ec51 0b10 	vmov	r0, r1, d0
 8002cce:	a35a      	add	r3, pc, #360	; (adr r3, 8002e38 <Robot_Move+0x278>)
 8002cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd4:	f7fd fc90 	bl	80005f8 <__aeabi_dmul>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	e9c7 2300 	strd	r2, r3, [r7]
 8002ce0:	a353      	add	r3, pc, #332	; (adr r3, 8002e30 <Robot_Move+0x270>)
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cea:	f7fd fc85 	bl	80005f8 <__aeabi_dmul>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	4b51      	ldr	r3, [pc, #324]	; (8002e40 <Robot_Move+0x280>)
 8002cfc:	f7fd fda6 	bl	800084c <__aeabi_ddiv>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	ec43 2b17 	vmov	d7, r2, r3
 8002d08:	eeb0 0a47 	vmov.f32	s0, s14
 8002d0c:	eef0 0a67 	vmov.f32	s1, s15
 8002d10:	f00d f882 	bl	800fe18 <sin>
 8002d14:	ec51 0b10 	vmov	r0, r1, d0
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	4b49      	ldr	r3, [pc, #292]	; (8002e44 <Robot_Move+0x284>)
 8002d1e:	f7fd fc6b 	bl	80005f8 <__aeabi_dmul>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d2a:	f7fd faad 	bl	8000288 <__aeabi_dsub>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d3a:	f7fd fc5d 	bl	80005f8 <__aeabi_dmul>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d4a:	f7fd fa9f 	bl	800028c <__adddf3>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	493e      	ldr	r1, [pc, #248]	; (8002e4c <Robot_Move+0x28c>)
 8002d54:	e9c1 2300 	strd	r2, r3, [r1]
	V1=Vd*sin(Theta*PI/180)+Vtheta;
 8002d58:	a335      	add	r3, pc, #212	; (adr r3, 8002e30 <Robot_Move+0x270>)
 8002d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d62:	f7fd fc49 	bl	80005f8 <__aeabi_dmul>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	4b33      	ldr	r3, [pc, #204]	; (8002e40 <Robot_Move+0x280>)
 8002d74:	f7fd fd6a 	bl	800084c <__aeabi_ddiv>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	ec43 2b17 	vmov	d7, r2, r3
 8002d80:	eeb0 0a47 	vmov.f32	s0, s14
 8002d84:	eef0 0a67 	vmov.f32	s1, s15
 8002d88:	f00d f846 	bl	800fe18 <sin>
 8002d8c:	ec51 0b10 	vmov	r0, r1, d0
 8002d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d94:	f7fd fc30 	bl	80005f8 <__aeabi_dmul>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002da4:	f7fd fa72 	bl	800028c <__adddf3>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4928      	ldr	r1, [pc, #160]	; (8002e50 <Robot_Move+0x290>)
 8002dae:	e9c1 2300 	strd	r2, r3, [r1]

	V1_abs=fabs(V1);
 8002db2:	4b27      	ldr	r3, [pc, #156]	; (8002e50 <Robot_Move+0x290>)
 8002db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db8:	4611      	mov	r1, r2
 8002dba:	6439      	str	r1, [r7, #64]	; 0x40
 8002dbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dc0:	647b      	str	r3, [r7, #68]	; 0x44
	V2_abs=fabs(V2);
 8002dc2:	4b21      	ldr	r3, [pc, #132]	; (8002e48 <Robot_Move+0x288>)
 8002dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc8:	4611      	mov	r1, r2
 8002dca:	63b9      	str	r1, [r7, #56]	; 0x38
 8002dcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
	V3_abs=fabs(V3);
 8002dd2:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <Robot_Move+0x28c>)
 8002dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd8:	4611      	mov	r1, r2
 8002dda:	6339      	str	r1, [r7, #48]	; 0x30
 8002ddc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002de0:	637b      	str	r3, [r7, #52]	; 0x34

	Vmax = V1_abs;
 8002de2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002de6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Vmax = (V2_abs > Vmax) ? V2_abs : Vmax;
 8002dea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dee:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002df2:	f7fd fe91 	bl	8000b18 <__aeabi_dcmpgt>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <Robot_Move+0x242>
 8002dfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e00:	e001      	b.n	8002e06 <Robot_Move+0x246>
 8002e02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Vmax = (V3_abs > Vmax) ? V3_abs : Vmax;
 8002e0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e0e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002e12:	f7fd fe81 	bl	8000b18 <__aeabi_dcmpgt>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d01b      	beq.n	8002e54 <Robot_Move+0x294>
 8002e1c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002e20:	e01a      	b.n	8002e58 <Robot_Move+0x298>
 8002e22:	bf00      	nop
 8002e24:	f3af 8000 	nop.w
 8002e28:	3d70a3d7 	.word	0x3d70a3d7
 8002e2c:	bfebd70a 	.word	0xbfebd70a
 8002e30:	54524550 	.word	0x54524550
 8002e34:	400921fb 	.word	0x400921fb
 8002e38:	3d70a3d7 	.word	0x3d70a3d7
 8002e3c:	3febd70a 	.word	0x3febd70a
 8002e40:	40668000 	.word	0x40668000
 8002e44:	3fe00000 	.word	0x3fe00000
 8002e48:	20000fd8 	.word	0x20000fd8
 8002e4c:	20000fe0 	.word	0x20000fe0
 8002e50:	20000fd0 	.word	0x20000fd0
 8002e54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e58:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (Vmax>3){
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	4b9e      	ldr	r3, [pc, #632]	; (80030dc <Robot_Move+0x51c>)
 8002e62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e66:	f7fd fe57 	bl	8000b18 <__aeabi_dcmpgt>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d02e      	beq.n	8002ece <Robot_Move+0x30e>
	Temp=3/Vmax;
 8002e70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e74:	f04f 0000 	mov.w	r0, #0
 8002e78:	4998      	ldr	r1, [pc, #608]	; (80030dc <Robot_Move+0x51c>)
 8002e7a:	f7fd fce7 	bl	800084c <__aeabi_ddiv>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	e9c7 2308 	strd	r2, r3, [r7, #32]
		V1= V1*Temp;
 8002e86:	4b96      	ldr	r3, [pc, #600]	; (80030e0 <Robot_Move+0x520>)
 8002e88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e8c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e90:	f7fd fbb2 	bl	80005f8 <__aeabi_dmul>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4991      	ldr	r1, [pc, #580]	; (80030e0 <Robot_Move+0x520>)
 8002e9a:	e9c1 2300 	strd	r2, r3, [r1]
		V2= V2*Temp;
 8002e9e:	4b91      	ldr	r3, [pc, #580]	; (80030e4 <Robot_Move+0x524>)
 8002ea0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ea4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ea8:	f7fd fba6 	bl	80005f8 <__aeabi_dmul>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	498c      	ldr	r1, [pc, #560]	; (80030e4 <Robot_Move+0x524>)
 8002eb2:	e9c1 2300 	strd	r2, r3, [r1]
		V3= V3*Temp;
 8002eb6:	4b8c      	ldr	r3, [pc, #560]	; (80030e8 <Robot_Move+0x528>)
 8002eb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ebc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ec0:	f7fd fb9a 	bl	80005f8 <__aeabi_dmul>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4987      	ldr	r1, [pc, #540]	; (80030e8 <Robot_Move+0x528>)
 8002eca:	e9c1 2300 	strd	r2, r3, [r1]
//	 V1 = Vmax*V1/10000;
//	 V2 = Vmax*V2/10000;
//	 V3 = Vmax*V3/10000;

//	 printf("V1= %.2f m/s \t V2= %.2f m/s \t V3= %.2f m/s \r\n", V1,V2,V3);
	if(V1<0){
 8002ece:	4b84      	ldr	r3, [pc, #528]	; (80030e0 <Robot_Move+0x520>)
 8002ed0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	f7fd fdfe 	bl	8000adc <__aeabi_dcmplt>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00d      	beq.n	8002f02 <Robot_Move+0x342>
	 Rotation(MOTOR_1, !CLOCK_WISE);
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	2001      	movs	r0, #1
 8002eea:	f000 f903 	bl	80030f4 <Rotation>
	 V1=fabs(V1);
 8002eee:	4b7c      	ldr	r3, [pc, #496]	; (80030e0 <Robot_Move+0x520>)
 8002ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef4:	4692      	mov	sl, r2
 8002ef6:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8002efa:	4b79      	ldr	r3, [pc, #484]	; (80030e0 <Robot_Move+0x520>)
 8002efc:	e9c3 ab00 	strd	sl, fp, [r3]
 8002f00:	e00f      	b.n	8002f22 <Robot_Move+0x362>
	} else if(V1>0){
 8002f02:	4b77      	ldr	r3, [pc, #476]	; (80030e0 <Robot_Move+0x520>)
 8002f04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	f7fd fe02 	bl	8000b18 <__aeabi_dcmpgt>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <Robot_Move+0x362>
	 Rotation(MOTOR_1, CLOCK_WISE);
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	2001      	movs	r0, #1
 8002f1e:	f000 f8e9 	bl	80030f4 <Rotation>
	}
	if(V2<0){
 8002f22:	4b70      	ldr	r3, [pc, #448]	; (80030e4 <Robot_Move+0x524>)
 8002f24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	f7fd fdd4 	bl	8000adc <__aeabi_dcmplt>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00d      	beq.n	8002f56 <Robot_Move+0x396>
	 Rotation(MOTOR_2, !CLOCK_WISE);
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	2002      	movs	r0, #2
 8002f3e:	f000 f8d9 	bl	80030f4 <Rotation>
	 V2=fabs(V2);
 8002f42:	4b68      	ldr	r3, [pc, #416]	; (80030e4 <Robot_Move+0x524>)
 8002f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f48:	4690      	mov	r8, r2
 8002f4a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002f4e:	4b65      	ldr	r3, [pc, #404]	; (80030e4 <Robot_Move+0x524>)
 8002f50:	e9c3 8900 	strd	r8, r9, [r3]
 8002f54:	e00f      	b.n	8002f76 <Robot_Move+0x3b6>
	} else if(V2>0){
 8002f56:	4b63      	ldr	r3, [pc, #396]	; (80030e4 <Robot_Move+0x524>)
 8002f58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	f7fd fdd8 	bl	8000b18 <__aeabi_dcmpgt>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <Robot_Move+0x3b6>
	 Rotation(MOTOR_2, CLOCK_WISE);
 8002f6e:	2101      	movs	r1, #1
 8002f70:	2002      	movs	r0, #2
 8002f72:	f000 f8bf 	bl	80030f4 <Rotation>
	}
	if(V3<0){
 8002f76:	4b5c      	ldr	r3, [pc, #368]	; (80030e8 <Robot_Move+0x528>)
 8002f78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	f7fd fdaa 	bl	8000adc <__aeabi_dcmplt>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <Robot_Move+0x3ea>
	 Rotation(MOTOR_3, !CLOCK_WISE);
 8002f8e:	2100      	movs	r1, #0
 8002f90:	2003      	movs	r0, #3
 8002f92:	f000 f8af 	bl	80030f4 <Rotation>
	 V3=fabs(V3);
 8002f96:	4b54      	ldr	r3, [pc, #336]	; (80030e8 <Robot_Move+0x528>)
 8002f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9c:	4614      	mov	r4, r2
 8002f9e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002fa2:	4b51      	ldr	r3, [pc, #324]	; (80030e8 <Robot_Move+0x528>)
 8002fa4:	e9c3 4500 	strd	r4, r5, [r3]
 8002fa8:	e00f      	b.n	8002fca <Robot_Move+0x40a>
	} else if(V3>0){
 8002faa:	4b4f      	ldr	r3, [pc, #316]	; (80030e8 <Robot_Move+0x528>)
 8002fac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	f7fd fdae 	bl	8000b18 <__aeabi_dcmpgt>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <Robot_Move+0x40a>
	 Rotation(MOTOR_3, CLOCK_WISE);
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	2003      	movs	r0, #3
 8002fc6:	f000 f895 	bl	80030f4 <Rotation>
	}

	V1=v2rpm(V1);
 8002fca:	4b45      	ldr	r3, [pc, #276]	; (80030e0 <Robot_Move+0x520>)
 8002fcc:	ed93 7b00 	vldr	d7, [r3]
 8002fd0:	eeb0 0a47 	vmov.f32	s0, s14
 8002fd4:	eef0 0a67 	vmov.f32	s1, s15
 8002fd8:	f000 f8ea 	bl	80031b0 <v2rpm>
 8002fdc:	eeb0 7a40 	vmov.f32	s14, s0
 8002fe0:	eef0 7a60 	vmov.f32	s15, s1
 8002fe4:	4b3e      	ldr	r3, [pc, #248]	; (80030e0 <Robot_Move+0x520>)
 8002fe6:	ed83 7b00 	vstr	d7, [r3]
	V2=v2rpm(V2);
 8002fea:	4b3e      	ldr	r3, [pc, #248]	; (80030e4 <Robot_Move+0x524>)
 8002fec:	ed93 7b00 	vldr	d7, [r3]
 8002ff0:	eeb0 0a47 	vmov.f32	s0, s14
 8002ff4:	eef0 0a67 	vmov.f32	s1, s15
 8002ff8:	f000 f8da 	bl	80031b0 <v2rpm>
 8002ffc:	eeb0 7a40 	vmov.f32	s14, s0
 8003000:	eef0 7a60 	vmov.f32	s15, s1
 8003004:	4b37      	ldr	r3, [pc, #220]	; (80030e4 <Robot_Move+0x524>)
 8003006:	ed83 7b00 	vstr	d7, [r3]
	V3=v2rpm(V3);
 800300a:	4b37      	ldr	r3, [pc, #220]	; (80030e8 <Robot_Move+0x528>)
 800300c:	ed93 7b00 	vldr	d7, [r3]
 8003010:	eeb0 0a47 	vmov.f32	s0, s14
 8003014:	eef0 0a67 	vmov.f32	s1, s15
 8003018:	f000 f8ca 	bl	80031b0 <v2rpm>
 800301c:	eeb0 7a40 	vmov.f32	s14, s0
 8003020:	eef0 7a60 	vmov.f32	s15, s1
 8003024:	4b30      	ldr	r3, [pc, #192]	; (80030e8 <Robot_Move+0x528>)
 8003026:	ed83 7b00 	vstr	d7, [r3]
	pid_config();
 800302a:	f000 f8e9 	bl	8003200 <pid_config>

	V1=rpm_to_duty(V1);
 800302e:	4b2c      	ldr	r3, [pc, #176]	; (80030e0 <Robot_Move+0x520>)
 8003030:	ed93 7b00 	vldr	d7, [r3]
 8003034:	eeb0 0a47 	vmov.f32	s0, s14
 8003038:	eef0 0a67 	vmov.f32	s1, s15
 800303c:	f7ff fd80 	bl	8002b40 <rpm_to_duty>
 8003040:	eeb0 7a40 	vmov.f32	s14, s0
 8003044:	eef0 7a60 	vmov.f32	s15, s1
 8003048:	4b25      	ldr	r3, [pc, #148]	; (80030e0 <Robot_Move+0x520>)
 800304a:	ed83 7b00 	vstr	d7, [r3]
	V2=rpm_to_duty(V2);
 800304e:	4b25      	ldr	r3, [pc, #148]	; (80030e4 <Robot_Move+0x524>)
 8003050:	ed93 7b00 	vldr	d7, [r3]
 8003054:	eeb0 0a47 	vmov.f32	s0, s14
 8003058:	eef0 0a67 	vmov.f32	s1, s15
 800305c:	f7ff fd70 	bl	8002b40 <rpm_to_duty>
 8003060:	eeb0 7a40 	vmov.f32	s14, s0
 8003064:	eef0 7a60 	vmov.f32	s15, s1
 8003068:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <Robot_Move+0x524>)
 800306a:	ed83 7b00 	vstr	d7, [r3]
	V3=rpm_to_duty(V3);
 800306e:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <Robot_Move+0x528>)
 8003070:	ed93 7b00 	vldr	d7, [r3]
 8003074:	eeb0 0a47 	vmov.f32	s0, s14
 8003078:	eef0 0a67 	vmov.f32	s1, s15
 800307c:	f7ff fd60 	bl	8002b40 <rpm_to_duty>
 8003080:	eeb0 7a40 	vmov.f32	s14, s0
 8003084:	eef0 7a60 	vmov.f32	s15, s1
 8003088:	4b17      	ldr	r3, [pc, #92]	; (80030e8 <Robot_Move+0x528>)
 800308a:	ed83 7b00 	vstr	d7, [r3]

	__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3, V1);
 800308e:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <Robot_Move+0x520>)
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	4915      	ldr	r1, [pc, #84]	; (80030ec <Robot_Move+0x52c>)
 8003096:	680c      	ldr	r4, [r1, #0]
 8003098:	4610      	mov	r0, r2
 800309a:	4619      	mov	r1, r3
 800309c:	f7fd fd84 	bl	8000ba8 <__aeabi_d2uiz>
 80030a0:	4603      	mov	r3, r0
 80030a2:	63e3      	str	r3, [r4, #60]	; 0x3c
	__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_4, V2);
 80030a4:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <Robot_Move+0x524>)
 80030a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030aa:	4910      	ldr	r1, [pc, #64]	; (80030ec <Robot_Move+0x52c>)
 80030ac:	680c      	ldr	r4, [r1, #0]
 80030ae:	4610      	mov	r0, r2
 80030b0:	4619      	mov	r1, r3
 80030b2:	f7fd fd79 	bl	8000ba8 <__aeabi_d2uiz>
 80030b6:	4603      	mov	r3, r0
 80030b8:	6423      	str	r3, [r4, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim9, TIM_CHANNEL_1, V3);
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <Robot_Move+0x528>)
 80030bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c0:	490b      	ldr	r1, [pc, #44]	; (80030f0 <Robot_Move+0x530>)
 80030c2:	680c      	ldr	r4, [r1, #0]
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	f7fd fd6e 	bl	8000ba8 <__aeabi_d2uiz>
 80030cc:	4603      	mov	r3, r0
 80030ce:	6363      	str	r3, [r4, #52]	; 0x34
}
 80030d0:	bf00      	nop
 80030d2:	3748      	adds	r7, #72	; 0x48
 80030d4:	46bd      	mov	sp, r7
 80030d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030da:	bf00      	nop
 80030dc:	40080000 	.word	0x40080000
 80030e0:	20000fd0 	.word	0x20000fd0
 80030e4:	20000fd8 	.word	0x20000fd8
 80030e8:	20000fe0 	.word	0x20000fe0
 80030ec:	200003ec 	.word	0x200003ec
 80030f0:	2000047c 	.word	0x2000047c

080030f4 <Rotation>:
//
//	__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3, duty_1);
//	__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_4, duty_2);
//	__HAL_TIM_SetCompare(&htim9, TIM_CHANNEL_1, duty_3);
}
void Rotation(int motor, int rotation){
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
	if(motor==MOTOR_1){
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d115      	bne.n	8003130 <Rotation+0x3c>
		if(rotation==CLOCK_WISE){
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d109      	bne.n	800311e <Rotation+0x2a>
			HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, CLOCK_WISE);
 800310a:	2201      	movs	r2, #1
 800310c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003110:	4822      	ldr	r0, [pc, #136]	; (800319c <Rotation+0xa8>)
 8003112:	f001 f9fd 	bl	8004510 <HAL_GPIO_WritePin>
			flag_rot_1=true;
 8003116:	4b22      	ldr	r3, [pc, #136]	; (80031a0 <Rotation+0xac>)
 8003118:	2201      	movs	r2, #1
 800311a:	701a      	strb	r2, [r3, #0]
 800311c:	e008      	b.n	8003130 <Rotation+0x3c>
		} else {
			HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, !CLOCK_WISE);
 800311e:	2200      	movs	r2, #0
 8003120:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003124:	481d      	ldr	r0, [pc, #116]	; (800319c <Rotation+0xa8>)
 8003126:	f001 f9f3 	bl	8004510 <HAL_GPIO_WritePin>
			flag_rot_1=false;
 800312a:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <Rotation+0xac>)
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]
		}
	}
	if(motor==MOTOR_2){
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d115      	bne.n	8003162 <Rotation+0x6e>
		if(rotation==CLOCK_WISE){
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d109      	bne.n	8003150 <Rotation+0x5c>
			HAL_GPIO_WritePin(DIRECTION_2_GPIO_Port, DIRECTION_2_Pin, CLOCK_WISE);
 800313c:	2201      	movs	r2, #1
 800313e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003142:	4816      	ldr	r0, [pc, #88]	; (800319c <Rotation+0xa8>)
 8003144:	f001 f9e4 	bl	8004510 <HAL_GPIO_WritePin>
			flag_rot_2=true;
 8003148:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <Rotation+0xb0>)
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	e008      	b.n	8003162 <Rotation+0x6e>
		} else {
			HAL_GPIO_WritePin(DIRECTION_2_GPIO_Port, DIRECTION_2_Pin, !CLOCK_WISE);
 8003150:	2200      	movs	r2, #0
 8003152:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003156:	4811      	ldr	r0, [pc, #68]	; (800319c <Rotation+0xa8>)
 8003158:	f001 f9da 	bl	8004510 <HAL_GPIO_WritePin>
			flag_rot_2=false;
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <Rotation+0xb0>)
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
		}
	}
	if(motor==MOTOR_3){
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b03      	cmp	r3, #3
 8003166:	d115      	bne.n	8003194 <Rotation+0xa0>
		if(rotation==CLOCK_WISE){
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d109      	bne.n	8003182 <Rotation+0x8e>
			HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, CLOCK_WISE);
 800316e:	2201      	movs	r2, #1
 8003170:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003174:	4809      	ldr	r0, [pc, #36]	; (800319c <Rotation+0xa8>)
 8003176:	f001 f9cb 	bl	8004510 <HAL_GPIO_WritePin>
			flag_rot_3=true;
 800317a:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <Rotation+0xb4>)
 800317c:	2201      	movs	r2, #1
 800317e:	701a      	strb	r2, [r3, #0]
		} else {
			HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, !CLOCK_WISE);
			flag_rot_3=false;
		}
	}
}
 8003180:	e008      	b.n	8003194 <Rotation+0xa0>
			HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, !CLOCK_WISE);
 8003182:	2200      	movs	r2, #0
 8003184:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003188:	4804      	ldr	r0, [pc, #16]	; (800319c <Rotation+0xa8>)
 800318a:	f001 f9c1 	bl	8004510 <HAL_GPIO_WritePin>
			flag_rot_3=false;
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <Rotation+0xb4>)
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40021000 	.word	0x40021000
 80031a0:	200000ab 	.word	0x200000ab
 80031a4:	200000ac 	.word	0x200000ac
 80031a8:	200000ad 	.word	0x200000ad
 80031ac:	00000000 	.word	0x00000000

080031b0 <v2rpm>:

double v2rpm (double vantoc){
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	ed87 0b00 	vstr	d0, [r7]
    return (vantoc/(PI*diameter))*60;
 80031ba:	a30e      	add	r3, pc, #56	; (adr r3, 80031f4 <v2rpm+0x44>)
 80031bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031c4:	f7fd fb42 	bl	800084c <__aeabi_ddiv>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4610      	mov	r0, r2
 80031ce:	4619      	mov	r1, r3
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <v2rpm+0x40>)
 80031d6:	f7fd fa0f 	bl	80005f8 <__aeabi_dmul>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	ec43 2b17 	vmov	d7, r2, r3
}
 80031e2:	eeb0 0a47 	vmov.f32	s0, s14
 80031e6:	eef0 0a67 	vmov.f32	s1, s15
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	404e0000 	.word	0x404e0000
 80031f4:	5b30428a 	.word	0x5b30428a
 80031f8:	3fd8209f 	.word	0x3fd8209f
 80031fc:	00000000 	.word	0x00000000

08003200 <pid_config>:
,err_next
,actual_val
,pre_actual_val_1=0
,pre_actual_val_2=0
,pre_actual_val_3=0;
void pid_config(void){
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
	pid.Kp=0.3;
 8003204:	491a      	ldr	r1, [pc, #104]	; (8003270 <pid_config+0x70>)
 8003206:	a314      	add	r3, pc, #80	; (adr r3, 8003258 <pid_config+0x58>)
 8003208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320c:	e9c1 2300 	strd	r2, r3, [r1]
	pid.Ki=0.2;
 8003210:	4917      	ldr	r1, [pc, #92]	; (8003270 <pid_config+0x70>)
 8003212:	a313      	add	r3, pc, #76	; (adr r3, 8003260 <pid_config+0x60>)
 8003214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003218:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pid.Kd=0.005;
 800321c:	4914      	ldr	r1, [pc, #80]	; (8003270 <pid_config+0x70>)
 800321e:	a312      	add	r3, pc, #72	; (adr r3, 8003268 <pid_config+0x68>)
 8003220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003224:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pid.target_val_1=V1;
 8003228:	4b12      	ldr	r3, [pc, #72]	; (8003274 <pid_config+0x74>)
 800322a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322e:	4910      	ldr	r1, [pc, #64]	; (8003270 <pid_config+0x70>)
 8003230:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pid.target_val_2=V2;
 8003234:	4b10      	ldr	r3, [pc, #64]	; (8003278 <pid_config+0x78>)
 8003236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323a:	490d      	ldr	r1, [pc, #52]	; (8003270 <pid_config+0x70>)
 800323c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	pid.target_val_3=V3;
 8003240:	4b0e      	ldr	r3, [pc, #56]	; (800327c <pid_config+0x7c>)
 8003242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003246:	490a      	ldr	r1, [pc, #40]	; (8003270 <pid_config+0x70>)
 8003248:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	PID_init(&pid);
 800324c:	4808      	ldr	r0, [pc, #32]	; (8003270 <pid_config+0x70>)
 800324e:	f000 f817 	bl	8003280 <PID_init>
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	33333333 	.word	0x33333333
 800325c:	3fd33333 	.word	0x3fd33333
 8003260:	9999999a 	.word	0x9999999a
 8003264:	3fc99999 	.word	0x3fc99999
 8003268:	47ae147b 	.word	0x47ae147b
 800326c:	3f747ae1 	.word	0x3f747ae1
 8003270:	20000570 	.word	0x20000570
 8003274:	20000fd0 	.word	0x20000fd0
 8003278:	20000fd8 	.word	0x20000fd8
 800327c:	20000fe0 	.word	0x20000fe0

08003280 <PID_init>:
void PID_init(PID_Param_t *par){
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
	Kp=par->Kp;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328e:	4913      	ldr	r1, [pc, #76]	; (80032dc <PID_init+0x5c>)
 8003290:	e9c1 2300 	strd	r2, r3, [r1]
	Ki=par->Ki;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800329a:	4911      	ldr	r1, [pc, #68]	; (80032e0 <PID_init+0x60>)
 800329c:	e9c1 2300 	strd	r2, r3, [r1]
	Kd=par->Kd;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80032a6:	490f      	ldr	r1, [pc, #60]	; (80032e4 <PID_init+0x64>)
 80032a8:	e9c1 2300 	strd	r2, r3, [r1]
	target_val_1=par->target_val_1;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80032b2:	490d      	ldr	r1, [pc, #52]	; (80032e8 <PID_init+0x68>)
 80032b4:	e9c1 2300 	strd	r2, r3, [r1]
	target_val_2=par->target_val_2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80032be:	490b      	ldr	r1, [pc, #44]	; (80032ec <PID_init+0x6c>)
 80032c0:	e9c1 2300 	strd	r2, r3, [r1]
	target_val_3=par->target_val_3;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80032ca:	4909      	ldr	r1, [pc, #36]	; (80032f0 <PID_init+0x70>)
 80032cc:	e9c1 2300 	strd	r2, r3, [r1]
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	20000fe8 	.word	0x20000fe8
 80032e0:	20000ff0 	.word	0x20000ff0
 80032e4:	20000ff8 	.word	0x20000ff8
 80032e8:	20001000 	.word	0x20001000
 80032ec:	20001008 	.word	0x20001008
 80032f0:	20001010 	.word	0x20001010

080032f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	607b      	str	r3, [r7, #4]
 80032fe:	4b12      	ldr	r3, [pc, #72]	; (8003348 <HAL_MspInit+0x54>)
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	4a11      	ldr	r2, [pc, #68]	; (8003348 <HAL_MspInit+0x54>)
 8003304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003308:	6453      	str	r3, [r2, #68]	; 0x44
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <HAL_MspInit+0x54>)
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003312:	607b      	str	r3, [r7, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_MspInit+0x54>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <HAL_MspInit+0x54>)
 8003320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003324:	6413      	str	r3, [r2, #64]	; 0x40
 8003326:	4b08      	ldr	r3, [pc, #32]	; (8003348 <HAL_MspInit+0x54>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003332:	2200      	movs	r2, #0
 8003334:	210f      	movs	r1, #15
 8003336:	f06f 0001 	mvn.w	r0, #1
 800333a:	f000 fe91 	bl	8004060 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800

0800334c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08a      	sub	sp, #40	; 0x28
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003354:	f107 0314 	add.w	r3, r7, #20
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	60da      	str	r2, [r3, #12]
 8003362:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a28      	ldr	r2, [pc, #160]	; (800340c <HAL_SPI_MspInit+0xc0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d14a      	bne.n	8003404 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	4b27      	ldr	r3, [pc, #156]	; (8003410 <HAL_SPI_MspInit+0xc4>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	4a26      	ldr	r2, [pc, #152]	; (8003410 <HAL_SPI_MspInit+0xc4>)
 8003378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800337c:	6413      	str	r3, [r2, #64]	; 0x40
 800337e:	4b24      	ldr	r3, [pc, #144]	; (8003410 <HAL_SPI_MspInit+0xc4>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	4b20      	ldr	r3, [pc, #128]	; (8003410 <HAL_SPI_MspInit+0xc4>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	4a1f      	ldr	r2, [pc, #124]	; (8003410 <HAL_SPI_MspInit+0xc4>)
 8003394:	f043 0304 	orr.w	r3, r3, #4
 8003398:	6313      	str	r3, [r2, #48]	; 0x30
 800339a:	4b1d      	ldr	r3, [pc, #116]	; (8003410 <HAL_SPI_MspInit+0xc4>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	4b19      	ldr	r3, [pc, #100]	; (8003410 <HAL_SPI_MspInit+0xc4>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	4a18      	ldr	r2, [pc, #96]	; (8003410 <HAL_SPI_MspInit+0xc4>)
 80033b0:	f043 0302 	orr.w	r3, r3, #2
 80033b4:	6313      	str	r3, [r2, #48]	; 0x30
 80033b6:	4b16      	ldr	r3, [pc, #88]	; (8003410 <HAL_SPI_MspInit+0xc4>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	60bb      	str	r3, [r7, #8]
 80033c0:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80033c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80033c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c8:	2302      	movs	r3, #2
 80033ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d0:	2303      	movs	r3, #3
 80033d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80033d4:	2306      	movs	r3, #6
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d8:	f107 0314 	add.w	r3, r7, #20
 80033dc:	4619      	mov	r1, r3
 80033de:	480d      	ldr	r0, [pc, #52]	; (8003414 <HAL_SPI_MspInit+0xc8>)
 80033e0:	f000 fefa 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80033e4:	2320      	movs	r3, #32
 80033e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e8:	2302      	movs	r3, #2
 80033ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ec:	2300      	movs	r3, #0
 80033ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f0:	2303      	movs	r3, #3
 80033f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80033f4:	2306      	movs	r3, #6
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033f8:	f107 0314 	add.w	r3, r7, #20
 80033fc:	4619      	mov	r1, r3
 80033fe:	4806      	ldr	r0, [pc, #24]	; (8003418 <HAL_SPI_MspInit+0xcc>)
 8003400:	f000 feea 	bl	80041d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003404:	bf00      	nop
 8003406:	3728      	adds	r7, #40	; 0x28
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40003c00 	.word	0x40003c00
 8003410:	40023800 	.word	0x40023800
 8003414:	40020800 	.word	0x40020800
 8003418:	40020400 	.word	0x40020400

0800341c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08e      	sub	sp, #56	; 0x38
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	609a      	str	r2, [r3, #8]
 8003430:	60da      	str	r2, [r3, #12]
 8003432:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a50      	ldr	r2, [pc, #320]	; (800357c <HAL_TIM_Encoder_MspInit+0x160>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d135      	bne.n	80034aa <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	623b      	str	r3, [r7, #32]
 8003442:	4b4f      	ldr	r3, [pc, #316]	; (8003580 <HAL_TIM_Encoder_MspInit+0x164>)
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	4a4e      	ldr	r2, [pc, #312]	; (8003580 <HAL_TIM_Encoder_MspInit+0x164>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6453      	str	r3, [r2, #68]	; 0x44
 800344e:	4b4c      	ldr	r3, [pc, #304]	; (8003580 <HAL_TIM_Encoder_MspInit+0x164>)
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	623b      	str	r3, [r7, #32]
 8003458:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
 800345e:	4b48      	ldr	r3, [pc, #288]	; (8003580 <HAL_TIM_Encoder_MspInit+0x164>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	4a47      	ldr	r2, [pc, #284]	; (8003580 <HAL_TIM_Encoder_MspInit+0x164>)
 8003464:	f043 0310 	orr.w	r3, r3, #16
 8003468:	6313      	str	r3, [r2, #48]	; 0x30
 800346a:	4b45      	ldr	r3, [pc, #276]	; (8003580 <HAL_TIM_Encoder_MspInit+0x164>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	61fb      	str	r3, [r7, #28]
 8003474:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003476:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347c:	2302      	movs	r3, #2
 800347e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003480:	2300      	movs	r3, #0
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003484:	2300      	movs	r3, #0
 8003486:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003488:	2301      	movs	r3, #1
 800348a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800348c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003490:	4619      	mov	r1, r3
 8003492:	483c      	ldr	r0, [pc, #240]	; (8003584 <HAL_TIM_Encoder_MspInit+0x168>)
 8003494:	f000 fea0 	bl	80041d8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8003498:	2200      	movs	r2, #0
 800349a:	210f      	movs	r1, #15
 800349c:	2019      	movs	r0, #25
 800349e:	f000 fddf 	bl	8004060 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80034a2:	2019      	movs	r0, #25
 80034a4:	f000 fdf8 	bl	8004098 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80034a8:	e063      	b.n	8003572 <HAL_TIM_Encoder_MspInit+0x156>
  else if(htim_encoder->Instance==TIM3)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a36      	ldr	r2, [pc, #216]	; (8003588 <HAL_TIM_Encoder_MspInit+0x16c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d12c      	bne.n	800350e <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034b4:	2300      	movs	r3, #0
 80034b6:	61bb      	str	r3, [r7, #24]
 80034b8:	4b31      	ldr	r3, [pc, #196]	; (8003580 <HAL_TIM_Encoder_MspInit+0x164>)
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	4a30      	ldr	r2, [pc, #192]	; (8003580 <HAL_TIM_Encoder_MspInit+0x164>)
 80034be:	f043 0302 	orr.w	r3, r3, #2
 80034c2:	6413      	str	r3, [r2, #64]	; 0x40
 80034c4:	4b2e      	ldr	r3, [pc, #184]	; (8003580 <HAL_TIM_Encoder_MspInit+0x164>)
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	4b2a      	ldr	r3, [pc, #168]	; (8003580 <HAL_TIM_Encoder_MspInit+0x164>)
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	4a29      	ldr	r2, [pc, #164]	; (8003580 <HAL_TIM_Encoder_MspInit+0x164>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6313      	str	r3, [r2, #48]	; 0x30
 80034e0:	4b27      	ldr	r3, [pc, #156]	; (8003580 <HAL_TIM_Encoder_MspInit+0x164>)
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034ec:	23c0      	movs	r3, #192	; 0xc0
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f0:	2302      	movs	r3, #2
 80034f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f8:	2300      	movs	r3, #0
 80034fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034fc:	2302      	movs	r3, #2
 80034fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003504:	4619      	mov	r1, r3
 8003506:	4821      	ldr	r0, [pc, #132]	; (800358c <HAL_TIM_Encoder_MspInit+0x170>)
 8003508:	f000 fe66 	bl	80041d8 <HAL_GPIO_Init>
}
 800350c:	e031      	b.n	8003572 <HAL_TIM_Encoder_MspInit+0x156>
  else if(htim_encoder->Instance==TIM4)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1f      	ldr	r2, [pc, #124]	; (8003590 <HAL_TIM_Encoder_MspInit+0x174>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d12c      	bne.n	8003572 <HAL_TIM_Encoder_MspInit+0x156>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003518:	2300      	movs	r3, #0
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	4b18      	ldr	r3, [pc, #96]	; (8003580 <HAL_TIM_Encoder_MspInit+0x164>)
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	4a17      	ldr	r2, [pc, #92]	; (8003580 <HAL_TIM_Encoder_MspInit+0x164>)
 8003522:	f043 0304 	orr.w	r3, r3, #4
 8003526:	6413      	str	r3, [r2, #64]	; 0x40
 8003528:	4b15      	ldr	r3, [pc, #84]	; (8003580 <HAL_TIM_Encoder_MspInit+0x164>)
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	4b11      	ldr	r3, [pc, #68]	; (8003580 <HAL_TIM_Encoder_MspInit+0x164>)
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353c:	4a10      	ldr	r2, [pc, #64]	; (8003580 <HAL_TIM_Encoder_MspInit+0x164>)
 800353e:	f043 0308 	orr.w	r3, r3, #8
 8003542:	6313      	str	r3, [r2, #48]	; 0x30
 8003544:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <HAL_TIM_Encoder_MspInit+0x164>)
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003550:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003556:	2302      	movs	r3, #2
 8003558:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355a:	2300      	movs	r3, #0
 800355c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355e:	2300      	movs	r3, #0
 8003560:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003562:	2302      	movs	r3, #2
 8003564:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800356a:	4619      	mov	r1, r3
 800356c:	4809      	ldr	r0, [pc, #36]	; (8003594 <HAL_TIM_Encoder_MspInit+0x178>)
 800356e:	f000 fe33 	bl	80041d8 <HAL_GPIO_Init>
}
 8003572:	bf00      	nop
 8003574:	3738      	adds	r7, #56	; 0x38
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40010000 	.word	0x40010000
 8003580:	40023800 	.word	0x40023800
 8003584:	40021000 	.word	0x40021000
 8003588:	40000400 	.word	0x40000400
 800358c:	40020000 	.word	0x40020000
 8003590:	40000800 	.word	0x40000800
 8003594:	40020c00 	.word	0x40020c00

08003598 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08c      	sub	sp, #48	; 0x30
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a0:	f107 031c 	add.w	r3, r7, #28
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM5)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a31      	ldr	r2, [pc, #196]	; (800367c <HAL_TIM_Base_MspInit+0xe4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d10e      	bne.n	80035d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	4b30      	ldr	r3, [pc, #192]	; (8003680 <HAL_TIM_Base_MspInit+0xe8>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	4a2f      	ldr	r2, [pc, #188]	; (8003680 <HAL_TIM_Base_MspInit+0xe8>)
 80035c4:	f043 0308 	orr.w	r3, r3, #8
 80035c8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ca:	4b2d      	ldr	r3, [pc, #180]	; (8003680 <HAL_TIM_Base_MspInit+0xe8>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	61bb      	str	r3, [r7, #24]
 80035d4:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80035d6:	e04c      	b.n	8003672 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM8)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a29      	ldr	r2, [pc, #164]	; (8003684 <HAL_TIM_Base_MspInit+0xec>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d134      	bne.n	800364c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	4b26      	ldr	r3, [pc, #152]	; (8003680 <HAL_TIM_Base_MspInit+0xe8>)
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	4a25      	ldr	r2, [pc, #148]	; (8003680 <HAL_TIM_Base_MspInit+0xe8>)
 80035ec:	f043 0302 	orr.w	r3, r3, #2
 80035f0:	6453      	str	r3, [r2, #68]	; 0x44
 80035f2:	4b23      	ldr	r3, [pc, #140]	; (8003680 <HAL_TIM_Base_MspInit+0xe8>)
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	4b1f      	ldr	r3, [pc, #124]	; (8003680 <HAL_TIM_Base_MspInit+0xe8>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	4a1e      	ldr	r2, [pc, #120]	; (8003680 <HAL_TIM_Base_MspInit+0xe8>)
 8003608:	f043 0304 	orr.w	r3, r3, #4
 800360c:	6313      	str	r3, [r2, #48]	; 0x30
 800360e:	4b1c      	ldr	r3, [pc, #112]	; (8003680 <HAL_TIM_Base_MspInit+0xe8>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800361a:	2340      	movs	r3, #64	; 0x40
 800361c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361e:	2302      	movs	r3, #2
 8003620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003622:	2300      	movs	r3, #0
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003626:	2300      	movs	r3, #0
 8003628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800362a:	2303      	movs	r3, #3
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800362e:	f107 031c 	add.w	r3, r7, #28
 8003632:	4619      	mov	r1, r3
 8003634:	4814      	ldr	r0, [pc, #80]	; (8003688 <HAL_TIM_Base_MspInit+0xf0>)
 8003636:	f000 fdcf 	bl	80041d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 800363a:	2200      	movs	r2, #0
 800363c:	2105      	movs	r1, #5
 800363e:	202e      	movs	r0, #46	; 0x2e
 8003640:	f000 fd0e 	bl	8004060 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8003644:	202e      	movs	r0, #46	; 0x2e
 8003646:	f000 fd27 	bl	8004098 <HAL_NVIC_EnableIRQ>
}
 800364a:	e012      	b.n	8003672 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM9)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a0e      	ldr	r2, [pc, #56]	; (800368c <HAL_TIM_Base_MspInit+0xf4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d10d      	bne.n	8003672 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	4b09      	ldr	r3, [pc, #36]	; (8003680 <HAL_TIM_Base_MspInit+0xe8>)
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	4a08      	ldr	r2, [pc, #32]	; (8003680 <HAL_TIM_Base_MspInit+0xe8>)
 8003660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003664:	6453      	str	r3, [r2, #68]	; 0x44
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <HAL_TIM_Base_MspInit+0xe8>)
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
}
 8003672:	bf00      	nop
 8003674:	3730      	adds	r7, #48	; 0x30
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40000c00 	.word	0x40000c00
 8003680:	40023800 	.word	0x40023800
 8003684:	40010400 	.word	0x40010400
 8003688:	40020800 	.word	0x40020800
 800368c:	40014000 	.word	0x40014000

08003690 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08a      	sub	sp, #40	; 0x28
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003698:	f107 0314 	add.w	r3, r7, #20
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	605a      	str	r2, [r3, #4]
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	60da      	str	r2, [r3, #12]
 80036a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a24      	ldr	r2, [pc, #144]	; (8003740 <HAL_TIM_MspPostInit+0xb0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d11e      	bne.n	80036f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	4b23      	ldr	r3, [pc, #140]	; (8003744 <HAL_TIM_MspPostInit+0xb4>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	4a22      	ldr	r2, [pc, #136]	; (8003744 <HAL_TIM_MspPostInit+0xb4>)
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	6313      	str	r3, [r2, #48]	; 0x30
 80036c2:	4b20      	ldr	r3, [pc, #128]	; (8003744 <HAL_TIM_MspPostInit+0xb4>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80036ce:	230c      	movs	r3, #12
 80036d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d2:	2302      	movs	r3, #2
 80036d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036da:	2300      	movs	r3, #0
 80036dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80036de:	2302      	movs	r3, #2
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e2:	f107 0314 	add.w	r3, r7, #20
 80036e6:	4619      	mov	r1, r3
 80036e8:	4817      	ldr	r0, [pc, #92]	; (8003748 <HAL_TIM_MspPostInit+0xb8>)
 80036ea:	f000 fd75 	bl	80041d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80036ee:	e022      	b.n	8003736 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM9)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a15      	ldr	r2, [pc, #84]	; (800374c <HAL_TIM_MspPostInit+0xbc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d11d      	bne.n	8003736 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	4b11      	ldr	r3, [pc, #68]	; (8003744 <HAL_TIM_MspPostInit+0xb4>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	4a10      	ldr	r2, [pc, #64]	; (8003744 <HAL_TIM_MspPostInit+0xb4>)
 8003704:	f043 0310 	orr.w	r3, r3, #16
 8003708:	6313      	str	r3, [r2, #48]	; 0x30
 800370a:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <HAL_TIM_MspPostInit+0xb4>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	f003 0310 	and.w	r3, r3, #16
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003716:	2320      	movs	r3, #32
 8003718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371a:	2302      	movs	r3, #2
 800371c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003722:	2300      	movs	r3, #0
 8003724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003726:	2303      	movs	r3, #3
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800372a:	f107 0314 	add.w	r3, r7, #20
 800372e:	4619      	mov	r1, r3
 8003730:	4807      	ldr	r0, [pc, #28]	; (8003750 <HAL_TIM_MspPostInit+0xc0>)
 8003732:	f000 fd51 	bl	80041d8 <HAL_GPIO_Init>
}
 8003736:	bf00      	nop
 8003738:	3728      	adds	r7, #40	; 0x28
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40000c00 	.word	0x40000c00
 8003744:	40023800 	.word	0x40023800
 8003748:	40020000 	.word	0x40020000
 800374c:	40014000 	.word	0x40014000
 8003750:	40021000 	.word	0x40021000

08003754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08c      	sub	sp, #48	; 0x30
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800375c:	f107 031c 	add.w	r3, r7, #28
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a3b      	ldr	r2, [pc, #236]	; (8003860 <HAL_UART_MspInit+0x10c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d135      	bne.n	80037e2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	4b3a      	ldr	r3, [pc, #232]	; (8003864 <HAL_UART_MspInit+0x110>)
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	4a39      	ldr	r2, [pc, #228]	; (8003864 <HAL_UART_MspInit+0x110>)
 8003780:	f043 0310 	orr.w	r3, r3, #16
 8003784:	6453      	str	r3, [r2, #68]	; 0x44
 8003786:	4b37      	ldr	r3, [pc, #220]	; (8003864 <HAL_UART_MspInit+0x110>)
 8003788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378a:	f003 0310 	and.w	r3, r3, #16
 800378e:	61bb      	str	r3, [r7, #24]
 8003790:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	4b33      	ldr	r3, [pc, #204]	; (8003864 <HAL_UART_MspInit+0x110>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	4a32      	ldr	r2, [pc, #200]	; (8003864 <HAL_UART_MspInit+0x110>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	6313      	str	r3, [r2, #48]	; 0x30
 80037a2:	4b30      	ldr	r3, [pc, #192]	; (8003864 <HAL_UART_MspInit+0x110>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80037ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80037b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b4:	2302      	movs	r3, #2
 80037b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037bc:	2303      	movs	r3, #3
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037c0:	2307      	movs	r3, #7
 80037c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c4:	f107 031c 	add.w	r3, r7, #28
 80037c8:	4619      	mov	r1, r3
 80037ca:	4827      	ldr	r0, [pc, #156]	; (8003868 <HAL_UART_MspInit+0x114>)
 80037cc:	f000 fd04 	bl	80041d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80037d0:	2200      	movs	r2, #0
 80037d2:	2105      	movs	r1, #5
 80037d4:	2025      	movs	r0, #37	; 0x25
 80037d6:	f000 fc43 	bl	8004060 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80037da:	2025      	movs	r0, #37	; 0x25
 80037dc:	f000 fc5c 	bl	8004098 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80037e0:	e039      	b.n	8003856 <HAL_UART_MspInit+0x102>
  else if(huart->Instance==USART3)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a21      	ldr	r2, [pc, #132]	; (800386c <HAL_UART_MspInit+0x118>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d134      	bne.n	8003856 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 80037ec:	2300      	movs	r3, #0
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <HAL_UART_MspInit+0x110>)
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	4a1b      	ldr	r2, [pc, #108]	; (8003864 <HAL_UART_MspInit+0x110>)
 80037f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037fa:	6413      	str	r3, [r2, #64]	; 0x40
 80037fc:	4b19      	ldr	r3, [pc, #100]	; (8003864 <HAL_UART_MspInit+0x110>)
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003808:	2300      	movs	r3, #0
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	4b15      	ldr	r3, [pc, #84]	; (8003864 <HAL_UART_MspInit+0x110>)
 800380e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003810:	4a14      	ldr	r2, [pc, #80]	; (8003864 <HAL_UART_MspInit+0x110>)
 8003812:	f043 0302 	orr.w	r3, r3, #2
 8003816:	6313      	str	r3, [r2, #48]	; 0x30
 8003818:	4b12      	ldr	r3, [pc, #72]	; (8003864 <HAL_UART_MspInit+0x110>)
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003824:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382a:	2302      	movs	r3, #2
 800382c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382e:	2300      	movs	r3, #0
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003832:	2303      	movs	r3, #3
 8003834:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003836:	2307      	movs	r3, #7
 8003838:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800383a:	f107 031c 	add.w	r3, r7, #28
 800383e:	4619      	mov	r1, r3
 8003840:	480b      	ldr	r0, [pc, #44]	; (8003870 <HAL_UART_MspInit+0x11c>)
 8003842:	f000 fcc9 	bl	80041d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003846:	2200      	movs	r2, #0
 8003848:	2105      	movs	r1, #5
 800384a:	2027      	movs	r0, #39	; 0x27
 800384c:	f000 fc08 	bl	8004060 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003850:	2027      	movs	r0, #39	; 0x27
 8003852:	f000 fc21 	bl	8004098 <HAL_NVIC_EnableIRQ>
}
 8003856:	bf00      	nop
 8003858:	3730      	adds	r7, #48	; 0x30
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40011000 	.word	0x40011000
 8003864:	40023800 	.word	0x40023800
 8003868:	40020000 	.word	0x40020000
 800386c:	40004800 	.word	0x40004800
 8003870:	40020400 	.word	0x40020400

08003874 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08c      	sub	sp, #48	; 0x30
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8003884:	2300      	movs	r3, #0
 8003886:	60bb      	str	r3, [r7, #8]
 8003888:	4b2e      	ldr	r3, [pc, #184]	; (8003944 <HAL_InitTick+0xd0>)
 800388a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388c:	4a2d      	ldr	r2, [pc, #180]	; (8003944 <HAL_InitTick+0xd0>)
 800388e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003892:	6453      	str	r3, [r2, #68]	; 0x44
 8003894:	4b2b      	ldr	r3, [pc, #172]	; (8003944 <HAL_InitTick+0xd0>)
 8003896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038a0:	f107 020c 	add.w	r2, r7, #12
 80038a4:	f107 0310 	add.w	r3, r7, #16
 80038a8:	4611      	mov	r1, r2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f001 faa2 	bl	8004df4 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80038b0:	f001 fa8c 	bl	8004dcc <HAL_RCC_GetPCLK2Freq>
 80038b4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b8:	4a23      	ldr	r2, [pc, #140]	; (8003948 <HAL_InitTick+0xd4>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	0c9b      	lsrs	r3, r3, #18
 80038c0:	3b01      	subs	r3, #1
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80038c4:	4b21      	ldr	r3, [pc, #132]	; (800394c <HAL_InitTick+0xd8>)
 80038c6:	4a22      	ldr	r2, [pc, #136]	; (8003950 <HAL_InitTick+0xdc>)
 80038c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80038ca:	4b20      	ldr	r3, [pc, #128]	; (800394c <HAL_InitTick+0xd8>)
 80038cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038d0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80038d2:	4a1e      	ldr	r2, [pc, #120]	; (800394c <HAL_InitTick+0xd8>)
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80038d8:	4b1c      	ldr	r3, [pc, #112]	; (800394c <HAL_InitTick+0xd8>)
 80038da:	2200      	movs	r2, #0
 80038dc:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038de:	4b1b      	ldr	r3, [pc, #108]	; (800394c <HAL_InitTick+0xd8>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038e4:	4b19      	ldr	r3, [pc, #100]	; (800394c <HAL_InitTick+0xd8>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80038ea:	4818      	ldr	r0, [pc, #96]	; (800394c <HAL_InitTick+0xd8>)
 80038ec:	f001 fdca 	bl	8005484 <HAL_TIM_Base_Init>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80038f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d11b      	bne.n	8003936 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 80038fe:	4813      	ldr	r0, [pc, #76]	; (800394c <HAL_InitTick+0xd8>)
 8003900:	f001 fe10 	bl	8005524 <HAL_TIM_Base_Start_IT>
 8003904:	4603      	mov	r3, r0
 8003906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800390a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800390e:	2b00      	cmp	r3, #0
 8003910:	d111      	bne.n	8003936 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003912:	2019      	movs	r0, #25
 8003914:	f000 fbc0 	bl	8004098 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b0f      	cmp	r3, #15
 800391c:	d808      	bhi.n	8003930 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800391e:	2200      	movs	r2, #0
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	2019      	movs	r0, #25
 8003924:	f000 fb9c 	bl	8004060 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003928:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <HAL_InitTick+0xe0>)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e002      	b.n	8003936 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800393a:	4618      	mov	r0, r3
 800393c:	3730      	adds	r7, #48	; 0x30
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40023800 	.word	0x40023800
 8003948:	431bde83 	.word	0x431bde83
 800394c:	20001018 	.word	0x20001018
 8003950:	40014400 	.word	0x40014400
 8003954:	200000bc 	.word	0x200000bc

08003958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800395c:	e7fe      	b.n	800395c <NMI_Handler+0x4>

0800395e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800395e:	b480      	push	{r7}
 8003960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003962:	e7fe      	b.n	8003962 <HardFault_Handler+0x4>

08003964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003968:	e7fe      	b.n	8003968 <MemManage_Handler+0x4>

0800396a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800396a:	b480      	push	{r7}
 800396c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800396e:	e7fe      	b.n	800396e <BusFault_Handler+0x4>

08003970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003974:	e7fe      	b.n	8003974 <UsageFault_Handler+0x4>

08003976 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003976:	b480      	push	{r7}
 8003978:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800397a:	bf00      	nop
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003988:	4803      	ldr	r0, [pc, #12]	; (8003998 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800398a:	f002 fa13 	bl	8005db4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800398e:	4803      	ldr	r0, [pc, #12]	; (800399c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003990:	f002 fa10 	bl	8005db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003994:	bf00      	nop
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20000314 	.word	0x20000314
 800399c:	20001018 	.word	0x20001018

080039a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint8_t data;
	HAL_UART_Receive(&huart1, (uint8_t*)&data, sizeof(data),0);
 80039a6:	1df9      	adds	r1, r7, #7
 80039a8:	2300      	movs	r3, #0
 80039aa:	2201      	movs	r2, #1
 80039ac:	4808      	ldr	r0, [pc, #32]	; (80039d0 <USART1_IRQHandler+0x30>)
 80039ae:	f003 fb2a 	bl	8007006 <HAL_UART_Receive>
	data_receive(data);
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 f94b 	bl	8003c50 <data_receive>
	uart_handle(&angle_real);
 80039ba:	4806      	ldr	r0, [pc, #24]	; (80039d4 <USART1_IRQHandler+0x34>)
 80039bc:	f000 f99a 	bl	8003cf4 <uart_handle>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80039c0:	4803      	ldr	r0, [pc, #12]	; (80039d0 <USART1_IRQHandler+0x30>)
 80039c2:	f003 fbb7 	bl	8007134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	200004c4 	.word	0x200004c4
 80039d4:	20001074 	.word	0x20001074

080039d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
		msgQueueObj_t msg;
		msg.buffer_index=0;
 80039de:	2300      	movs	r3, #0
 80039e0:	707b      	strb	r3, [r7, #1]

		HAL_UART_Receive(&huart3, (uint8_t*)&msg.buffer, sizeof(msg.buffer),0);
 80039e2:	4639      	mov	r1, r7
 80039e4:	2300      	movs	r3, #0
 80039e6:	2201      	movs	r2, #1
 80039e8:	4810      	ldr	r0, [pc, #64]	; (8003a2c <USART3_IRQHandler+0x54>)
 80039ea:	f003 fb0c 	bl	8007006 <HAL_UART_Receive>
	//	UARTprintf("msg is: %d \r\n", msg.buffer);
		osMessageQueuePut(AxisDesireQueueHandle, &msg.buffer, 0, 0);
 80039ee:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <USART3_IRQHandler+0x58>)
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	4639      	mov	r1, r7
 80039f4:	2300      	movs	r3, #0
 80039f6:	2200      	movs	r2, #0
 80039f8:	f004 fc70 	bl	80082dc <osMessageQueuePut>
		BaseType_t checkIfYieldRequired;
		checkIfYieldRequired = xTaskResumeFromISR(AxisXYDesireHandle);
 80039fc:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <USART3_IRQHandler+0x5c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f005 fef5 	bl	80097f0 <xTaskResumeFromISR>
 8003a06:	6078      	str	r0, [r7, #4]
		portYIELD_FROM_ISR(checkIfYieldRequired);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d007      	beq.n	8003a1e <USART3_IRQHandler+0x46>
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <USART3_IRQHandler+0x60>)
 8003a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	f3bf 8f6f 	isb	sy
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003a1e:	4803      	ldr	r0, [pc, #12]	; (8003a2c <USART3_IRQHandler+0x54>)
 8003a20:	f003 fb88 	bl	8007134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	2000050c 	.word	0x2000050c
 8003a30:	20000568 	.word	0x20000568
 8003a34:	20000558 	.word	0x20000558
 8003a38:	e000ed04 	.word	0xe000ed04

08003a3c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003a40:	4802      	ldr	r0, [pc, #8]	; (8003a4c <TIM8_CC_IRQHandler+0x10>)
 8003a42:	f002 f9b7 	bl	8005db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000434 	.word	0x20000434

08003a50 <ITM_SendChar>:
//ITM Register Address
#define ITM_STIMULUS_PORT0		*((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN			*((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	71fb      	strb	r3, [r7, #7]
	// Enable TRCENA
	DEMCR |= (1<<24);
 8003a5a:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <ITM_SendChar+0x48>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a0e      	ldr	r2, [pc, #56]	; (8003a98 <ITM_SendChar+0x48>)
 8003a60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a64:	6013      	str	r3, [r2, #0]

	// Enable Stimulus Port0
	ITM_TRACE_EN |= (1<<0);
 8003a66:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <ITM_SendChar+0x4c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a0c      	ldr	r2, [pc, #48]	; (8003a9c <ITM_SendChar+0x4c>)
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	6013      	str	r3, [r2, #0]

	// Read FIFO Status in bit[0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8003a72:	bf00      	nop
 8003a74:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f8      	beq.n	8003a74 <ITM_SendChar+0x24>

	// Write to ITM Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 8003a82:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	6013      	str	r3, [r2, #0]
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	e000edfc 	.word	0xe000edfc
 8003a9c:	e0000e00 	.word	0xe0000e00

08003aa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  return 1;
 8003aa4:	2301      	movs	r3, #1
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <_kill>:

int _kill(int pid, int sig)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003aba:	f008 fbc5 	bl	800c248 <__errno>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2216      	movs	r2, #22
 8003ac2:	601a      	str	r2, [r3, #0]
  return -1;
 8003ac4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <_exit>:

void _exit (int status)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff ffe7 	bl	8003ab0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ae2:	e7fe      	b.n	8003ae2 <_exit+0x12>

08003ae4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	e00a      	b.n	8003b0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003af6:	f3af 8000 	nop.w
 8003afa:	4601      	mov	r1, r0
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	60ba      	str	r2, [r7, #8]
 8003b02:	b2ca      	uxtb	r2, r1
 8003b04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	dbf0      	blt.n	8003af6 <_read+0x12>
  }

  return len;
 8003b14:	687b      	ldr	r3, [r7, #4]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b086      	sub	sp, #24
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	e009      	b.n	8003b44 <_write+0x26>
  {
//    __io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	60ba      	str	r2, [r7, #8]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff ff89 	bl	8003a50 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	3301      	adds	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	dbf1      	blt.n	8003b30 <_write+0x12>
  }
  return len;
 8003b4c:	687b      	ldr	r3, [r7, #4]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <_close>:

int _close(int file)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b7e:	605a      	str	r2, [r3, #4]
  return 0;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <_isatty>:

int _isatty(int file)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b96:	2301      	movs	r3, #1
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
	...

08003bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bc8:	4a14      	ldr	r2, [pc, #80]	; (8003c1c <_sbrk+0x5c>)
 8003bca:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <_sbrk+0x60>)
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bd4:	4b13      	ldr	r3, [pc, #76]	; (8003c24 <_sbrk+0x64>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d102      	bne.n	8003be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bdc:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <_sbrk+0x64>)
 8003bde:	4a12      	ldr	r2, [pc, #72]	; (8003c28 <_sbrk+0x68>)
 8003be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003be2:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <_sbrk+0x64>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4413      	add	r3, r2
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d207      	bcs.n	8003c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bf0:	f008 fb2a 	bl	800c248 <__errno>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	220c      	movs	r2, #12
 8003bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfe:	e009      	b.n	8003c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c00:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <_sbrk+0x64>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c06:	4b07      	ldr	r3, [pc, #28]	; (8003c24 <_sbrk+0x64>)
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	4a05      	ldr	r2, [pc, #20]	; (8003c24 <_sbrk+0x64>)
 8003c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c12:	68fb      	ldr	r3, [r7, #12]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20020000 	.word	0x20020000
 8003c20:	00000400 	.word	0x00000400
 8003c24:	20001060 	.word	0x20001060
 8003c28:	20005b38 	.word	0x20005b38

08003c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <SystemInit+0x20>)
 8003c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c36:	4a05      	ldr	r2, [pc, #20]	; (8003c4c <SystemInit+0x20>)
 8003c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c40:	bf00      	nop
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <data_receive>:
static uint8_t uart_flag = 0;
static uint8_t receive_flag = 0;
angleRead_t angle_real;
//Receive and storage data from uart protocol
void data_receive(uint8_t data)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	71fb      	strb	r3, [r7, #7]
	if(data == 0x55 && uart_len == 0)
 8003c5a:	79fb      	ldrb	r3, [r7, #7]
 8003c5c:	2b55      	cmp	r3, #85	; 0x55
 8003c5e:	d106      	bne.n	8003c6e <data_receive+0x1e>
 8003c60:	4b14      	ldr	r3, [pc, #80]	; (8003cb4 <data_receive+0x64>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d102      	bne.n	8003c6e <data_receive+0x1e>
	{
		receive_flag = 1;
 8003c68:	4b13      	ldr	r3, [pc, #76]	; (8003cb8 <data_receive+0x68>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	701a      	strb	r2, [r3, #0]
	}

	if(receive_flag)
 8003c6e:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <data_receive+0x68>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d017      	beq.n	8003ca6 <data_receive+0x56>
	{
		if(uart_len == 10)
 8003c76:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <data_receive+0x64>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b0a      	cmp	r3, #10
 8003c7c:	d109      	bne.n	8003c92 <data_receive+0x42>
		{
			buff[uart_len] = data;
 8003c7e:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <data_receive+0x64>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	4619      	mov	r1, r3
 8003c84:	4a0d      	ldr	r2, [pc, #52]	; (8003cbc <data_receive+0x6c>)
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	5453      	strb	r3, [r2, r1]
			uart_flag = 1;
 8003c8a:	4b0d      	ldr	r3, [pc, #52]	; (8003cc0 <data_receive+0x70>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	701a      	strb	r2, [r3, #0]
		else
		{
			buff[uart_len++] = data;
		}
	}
}
 8003c90:	e009      	b.n	8003ca6 <data_receive+0x56>
			buff[uart_len++] = data;
 8003c92:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <data_receive+0x64>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	b2d1      	uxtb	r1, r2
 8003c9a:	4a06      	ldr	r2, [pc, #24]	; (8003cb4 <data_receive+0x64>)
 8003c9c:	7011      	strb	r1, [r2, #0]
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4a06      	ldr	r2, [pc, #24]	; (8003cbc <data_receive+0x6c>)
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	5453      	strb	r3, [r2, r1]
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	2000106f 	.word	0x2000106f
 8003cb8:	20001071 	.word	0x20001071
 8003cbc:	20001064 	.word	0x20001064
 8003cc0:	20001070 	.word	0x20001070

08003cc4 <data_handle>:
//==============================================//
// handling hex data to the angle of x, y, z

short data_handle(uint8_t dataH, uint8_t dataL)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	460a      	mov	r2, r1
 8003cce:	71fb      	strb	r3, [r7, #7]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	71bb      	strb	r3, [r7, #6]
	short data;
	data = ((short)((short)dataH<<8)|dataL);
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	b21a      	sxth	r2, r3
 8003cda:	79bb      	ldrb	r3, [r7, #6]
 8003cdc:	b21b      	sxth	r3, r3
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	81fb      	strh	r3, [r7, #14]
	return data;
 8003ce2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
	...

08003cf4 <uart_handle>:
//---------------------------------------------//
void uart_handle(angleRead_t *angle)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	if(uart_flag)
 8003cfc:	4b40      	ldr	r3, [pc, #256]	; (8003e00 <uart_handle+0x10c>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d078      	beq.n	8003df6 <uart_handle+0x102>
	{
		if(buff[1] == 0x53) // so sanh xem loai du lieu gui la gi, 0x53: goc quay
 8003d04:	4b3f      	ldr	r3, [pc, #252]	; (8003e04 <uart_handle+0x110>)
 8003d06:	785b      	ldrb	r3, [r3, #1]
 8003d08:	2b53      	cmp	r3, #83	; 0x53
 8003d0a:	d16b      	bne.n	8003de4 <uart_handle+0xf0>
		{
			angle->x = (int16_t)(data_handle(buff[3], buff[2]) / 32768.0*180.0);
 8003d0c:	4b3d      	ldr	r3, [pc, #244]	; (8003e04 <uart_handle+0x110>)
 8003d0e:	78db      	ldrb	r3, [r3, #3]
 8003d10:	4a3c      	ldr	r2, [pc, #240]	; (8003e04 <uart_handle+0x110>)
 8003d12:	7892      	ldrb	r2, [r2, #2]
 8003d14:	4611      	mov	r1, r2
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff ffd4 	bl	8003cc4 <data_handle>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fc fc00 	bl	8000524 <__aeabi_i2d>
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	4b37      	ldr	r3, [pc, #220]	; (8003e08 <uart_handle+0x114>)
 8003d2a:	f7fc fd8f 	bl	800084c <__aeabi_ddiv>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4610      	mov	r0, r2
 8003d34:	4619      	mov	r1, r3
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	4b34      	ldr	r3, [pc, #208]	; (8003e0c <uart_handle+0x118>)
 8003d3c:	f7fc fc5c 	bl	80005f8 <__aeabi_dmul>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4610      	mov	r0, r2
 8003d46:	4619      	mov	r1, r3
 8003d48:	f7fc ff06 	bl	8000b58 <__aeabi_d2iz>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	b21a      	sxth	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	801a      	strh	r2, [r3, #0]
			angle->y = (int16_t)(data_handle(buff[5], buff[4]) / 32768.0*180.0);
 8003d54:	4b2b      	ldr	r3, [pc, #172]	; (8003e04 <uart_handle+0x110>)
 8003d56:	795b      	ldrb	r3, [r3, #5]
 8003d58:	4a2a      	ldr	r2, [pc, #168]	; (8003e04 <uart_handle+0x110>)
 8003d5a:	7912      	ldrb	r2, [r2, #4]
 8003d5c:	4611      	mov	r1, r2
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff ffb0 	bl	8003cc4 <data_handle>
 8003d64:	4603      	mov	r3, r0
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fc fbdc 	bl	8000524 <__aeabi_i2d>
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	4b25      	ldr	r3, [pc, #148]	; (8003e08 <uart_handle+0x114>)
 8003d72:	f7fc fd6b 	bl	800084c <__aeabi_ddiv>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	4b22      	ldr	r3, [pc, #136]	; (8003e0c <uart_handle+0x118>)
 8003d84:	f7fc fc38 	bl	80005f8 <__aeabi_dmul>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	4619      	mov	r1, r3
 8003d90:	f7fc fee2 	bl	8000b58 <__aeabi_d2iz>
 8003d94:	4603      	mov	r3, r0
 8003d96:	b21a      	sxth	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	805a      	strh	r2, [r3, #2]
			angle->z = (int16_t)(data_handle(buff[7], buff[6]) / 32768.0*180.0);
 8003d9c:	4b19      	ldr	r3, [pc, #100]	; (8003e04 <uart_handle+0x110>)
 8003d9e:	79db      	ldrb	r3, [r3, #7]
 8003da0:	4a18      	ldr	r2, [pc, #96]	; (8003e04 <uart_handle+0x110>)
 8003da2:	7992      	ldrb	r2, [r2, #6]
 8003da4:	4611      	mov	r1, r2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff ff8c 	bl	8003cc4 <data_handle>
 8003dac:	4603      	mov	r3, r0
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fc fbb8 	bl	8000524 <__aeabi_i2d>
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	4b13      	ldr	r3, [pc, #76]	; (8003e08 <uart_handle+0x114>)
 8003dba:	f7fc fd47 	bl	800084c <__aeabi_ddiv>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <uart_handle+0x118>)
 8003dcc:	f7fc fc14 	bl	80005f8 <__aeabi_dmul>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	f7fc febe 	bl	8000b58 <__aeabi_d2iz>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	b21a      	sxth	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	809a      	strh	r2, [r3, #4]
		}
		receive_flag = 0;
 8003de4:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <uart_handle+0x11c>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	701a      	strb	r2, [r3, #0]
		uart_len = 0;
 8003dea:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <uart_handle+0x120>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	701a      	strb	r2, [r3, #0]
		uart_flag = 0;
 8003df0:	4b03      	ldr	r3, [pc, #12]	; (8003e00 <uart_handle+0x10c>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	701a      	strb	r2, [r3, #0]
	}
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20001070 	.word	0x20001070
 8003e04:	20001064 	.word	0x20001064
 8003e08:	40e00000 	.word	0x40e00000
 8003e0c:	40668000 	.word	0x40668000
 8003e10:	20001071 	.word	0x20001071
 8003e14:	2000106f 	.word	0x2000106f

08003e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack     /* set stack pointer */
 8003e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003e1c:	f7ff ff06 	bl	8003c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e20:	480c      	ldr	r0, [pc, #48]	; (8003e54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e22:	490d      	ldr	r1, [pc, #52]	; (8003e58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e24:	4a0d      	ldr	r2, [pc, #52]	; (8003e5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e28:	e002      	b.n	8003e30 <LoopCopyDataInit>

08003e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e2e:	3304      	adds	r3, #4

08003e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e34:	d3f9      	bcc.n	8003e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e36:	4a0a      	ldr	r2, [pc, #40]	; (8003e60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e38:	4c0a      	ldr	r4, [pc, #40]	; (8003e64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e3c:	e001      	b.n	8003e42 <LoopFillZerobss>

08003e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e40:	3204      	adds	r2, #4

08003e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e44:	d3fb      	bcc.n	8003e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e46:	f008 fa05 	bl	800c254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e4a:	f7fd f981 	bl	8001150 <main>
  bx  lr    
 8003e4e:	4770      	bx	lr
   ldr   sp, =_estack     /* set stack pointer */
 8003e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e58:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8003e5c:	08011660 	.word	0x08011660
  ldr r2, =_sbss
 8003e60:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8003e64:	20005b34 	.word	0x20005b34

08003e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e68:	e7fe      	b.n	8003e68 <ADC_IRQHandler>
	...

08003e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e70:	4b0e      	ldr	r3, [pc, #56]	; (8003eac <HAL_Init+0x40>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a0d      	ldr	r2, [pc, #52]	; (8003eac <HAL_Init+0x40>)
 8003e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <HAL_Init+0x40>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a0a      	ldr	r2, [pc, #40]	; (8003eac <HAL_Init+0x40>)
 8003e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e88:	4b08      	ldr	r3, [pc, #32]	; (8003eac <HAL_Init+0x40>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a07      	ldr	r2, [pc, #28]	; (8003eac <HAL_Init+0x40>)
 8003e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e94:	2003      	movs	r0, #3
 8003e96:	f000 f8d8 	bl	800404a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e9a:	200f      	movs	r0, #15
 8003e9c:	f7ff fcea 	bl	8003874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ea0:	f7ff fa28 	bl	80032f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40023c00 	.word	0x40023c00

08003eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003eb4:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <HAL_IncTick+0x20>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4b06      	ldr	r3, [pc, #24]	; (8003ed4 <HAL_IncTick+0x24>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	4a04      	ldr	r2, [pc, #16]	; (8003ed4 <HAL_IncTick+0x24>)
 8003ec2:	6013      	str	r3, [r2, #0]
}
 8003ec4:	bf00      	nop
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	200000c0 	.word	0x200000c0
 8003ed4:	2000107c 	.word	0x2000107c

08003ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  return uwTick;
 8003edc:	4b03      	ldr	r3, [pc, #12]	; (8003eec <HAL_GetTick+0x14>)
 8003ede:	681b      	ldr	r3, [r3, #0]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	2000107c 	.word	0x2000107c

08003ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f00:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <__NVIC_SetPriorityGrouping+0x44>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f22:	4a04      	ldr	r2, [pc, #16]	; (8003f34 <__NVIC_SetPriorityGrouping+0x44>)
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	60d3      	str	r3, [r2, #12]
}
 8003f28:	bf00      	nop
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	e000ed00 	.word	0xe000ed00

08003f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f3c:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <__NVIC_GetPriorityGrouping+0x18>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	0a1b      	lsrs	r3, r3, #8
 8003f42:	f003 0307 	and.w	r3, r3, #7
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	e000ed00 	.word	0xe000ed00

08003f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	db0b      	blt.n	8003f7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f66:	79fb      	ldrb	r3, [r7, #7]
 8003f68:	f003 021f 	and.w	r2, r3, #31
 8003f6c:	4907      	ldr	r1, [pc, #28]	; (8003f8c <__NVIC_EnableIRQ+0x38>)
 8003f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	2001      	movs	r0, #1
 8003f76:	fa00 f202 	lsl.w	r2, r0, r2
 8003f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	e000e100 	.word	0xe000e100

08003f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	6039      	str	r1, [r7, #0]
 8003f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	db0a      	blt.n	8003fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	490c      	ldr	r1, [pc, #48]	; (8003fdc <__NVIC_SetPriority+0x4c>)
 8003faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fae:	0112      	lsls	r2, r2, #4
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	440b      	add	r3, r1
 8003fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fb8:	e00a      	b.n	8003fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	4908      	ldr	r1, [pc, #32]	; (8003fe0 <__NVIC_SetPriority+0x50>)
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	3b04      	subs	r3, #4
 8003fc8:	0112      	lsls	r2, r2, #4
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	440b      	add	r3, r1
 8003fce:	761a      	strb	r2, [r3, #24]
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	e000e100 	.word	0xe000e100
 8003fe0:	e000ed00 	.word	0xe000ed00

08003fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b089      	sub	sp, #36	; 0x24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	f1c3 0307 	rsb	r3, r3, #7
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	bf28      	it	cs
 8004002:	2304      	movcs	r3, #4
 8004004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	3304      	adds	r3, #4
 800400a:	2b06      	cmp	r3, #6
 800400c:	d902      	bls.n	8004014 <NVIC_EncodePriority+0x30>
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	3b03      	subs	r3, #3
 8004012:	e000      	b.n	8004016 <NVIC_EncodePriority+0x32>
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004018:	f04f 32ff 	mov.w	r2, #4294967295
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	43da      	mvns	r2, r3
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	401a      	ands	r2, r3
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800402c:	f04f 31ff 	mov.w	r1, #4294967295
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	fa01 f303 	lsl.w	r3, r1, r3
 8004036:	43d9      	mvns	r1, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800403c:	4313      	orrs	r3, r2
         );
}
 800403e:	4618      	mov	r0, r3
 8004040:	3724      	adds	r7, #36	; 0x24
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff ff4c 	bl	8003ef0 <__NVIC_SetPriorityGrouping>
}
 8004058:	bf00      	nop
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004072:	f7ff ff61 	bl	8003f38 <__NVIC_GetPriorityGrouping>
 8004076:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	68b9      	ldr	r1, [r7, #8]
 800407c:	6978      	ldr	r0, [r7, #20]
 800407e:	f7ff ffb1 	bl	8003fe4 <NVIC_EncodePriority>
 8004082:	4602      	mov	r2, r0
 8004084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff ff80 	bl	8003f90 <__NVIC_SetPriority>
}
 8004090:	bf00      	nop
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff ff54 	bl	8003f54 <__NVIC_EnableIRQ>
}
 80040ac:	bf00      	nop
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040c2:	f7ff ff09 	bl	8003ed8 <HAL_GetTick>
 80040c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d008      	beq.n	80040e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2280      	movs	r2, #128	; 0x80
 80040d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e052      	b.n	800418c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0216 	bic.w	r2, r2, #22
 80040f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695a      	ldr	r2, [r3, #20]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004104:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	2b00      	cmp	r3, #0
 800410c:	d103      	bne.n	8004116 <HAL_DMA_Abort+0x62>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004112:	2b00      	cmp	r3, #0
 8004114:	d007      	beq.n	8004126 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0208 	bic.w	r2, r2, #8
 8004124:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004136:	e013      	b.n	8004160 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004138:	f7ff fece 	bl	8003ed8 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b05      	cmp	r3, #5
 8004144:	d90c      	bls.n	8004160 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2203      	movs	r2, #3
 8004150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e015      	b.n	800418c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e4      	bne.n	8004138 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004172:	223f      	movs	r2, #63	; 0x3f
 8004174:	409a      	lsls	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d004      	beq.n	80041b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2280      	movs	r2, #128	; 0x80
 80041ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e00c      	b.n	80041cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2205      	movs	r2, #5
 80041b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0201 	bic.w	r2, r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041d8:	b480      	push	{r7}
 80041da:	b089      	sub	sp, #36	; 0x24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	e16b      	b.n	80044cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041f4:	2201      	movs	r2, #1
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4013      	ands	r3, r2
 8004206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	429a      	cmp	r2, r3
 800420e:	f040 815a 	bne.w	80044c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b01      	cmp	r3, #1
 800421c:	d005      	beq.n	800422a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004226:	2b02      	cmp	r3, #2
 8004228:	d130      	bne.n	800428c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	2203      	movs	r2, #3
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4013      	ands	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	4313      	orrs	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004260:	2201      	movs	r2, #1
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	43db      	mvns	r3, r3
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4013      	ands	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	091b      	lsrs	r3, r3, #4
 8004276:	f003 0201 	and.w	r2, r3, #1
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	4313      	orrs	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f003 0303 	and.w	r3, r3, #3
 8004294:	2b03      	cmp	r3, #3
 8004296:	d017      	beq.n	80042c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	2203      	movs	r2, #3
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	43db      	mvns	r3, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4013      	ands	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d123      	bne.n	800431c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	08da      	lsrs	r2, r3, #3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3208      	adds	r2, #8
 80042dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	220f      	movs	r2, #15
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	43db      	mvns	r3, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4013      	ands	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	4313      	orrs	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	08da      	lsrs	r2, r3, #3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3208      	adds	r2, #8
 8004316:	69b9      	ldr	r1, [r7, #24]
 8004318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	2203      	movs	r2, #3
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	43db      	mvns	r3, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4013      	ands	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 0203 	and.w	r2, r3, #3
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	4313      	orrs	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80b4 	beq.w	80044c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	4b60      	ldr	r3, [pc, #384]	; (80044e4 <HAL_GPIO_Init+0x30c>)
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	4a5f      	ldr	r2, [pc, #380]	; (80044e4 <HAL_GPIO_Init+0x30c>)
 8004368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800436c:	6453      	str	r3, [r2, #68]	; 0x44
 800436e:	4b5d      	ldr	r3, [pc, #372]	; (80044e4 <HAL_GPIO_Init+0x30c>)
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800437a:	4a5b      	ldr	r2, [pc, #364]	; (80044e8 <HAL_GPIO_Init+0x310>)
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	089b      	lsrs	r3, r3, #2
 8004380:	3302      	adds	r3, #2
 8004382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	220f      	movs	r2, #15
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43db      	mvns	r3, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4013      	ands	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a52      	ldr	r2, [pc, #328]	; (80044ec <HAL_GPIO_Init+0x314>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d02b      	beq.n	80043fe <HAL_GPIO_Init+0x226>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a51      	ldr	r2, [pc, #324]	; (80044f0 <HAL_GPIO_Init+0x318>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d025      	beq.n	80043fa <HAL_GPIO_Init+0x222>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a50      	ldr	r2, [pc, #320]	; (80044f4 <HAL_GPIO_Init+0x31c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d01f      	beq.n	80043f6 <HAL_GPIO_Init+0x21e>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a4f      	ldr	r2, [pc, #316]	; (80044f8 <HAL_GPIO_Init+0x320>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d019      	beq.n	80043f2 <HAL_GPIO_Init+0x21a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a4e      	ldr	r2, [pc, #312]	; (80044fc <HAL_GPIO_Init+0x324>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d013      	beq.n	80043ee <HAL_GPIO_Init+0x216>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a4d      	ldr	r2, [pc, #308]	; (8004500 <HAL_GPIO_Init+0x328>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00d      	beq.n	80043ea <HAL_GPIO_Init+0x212>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a4c      	ldr	r2, [pc, #304]	; (8004504 <HAL_GPIO_Init+0x32c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d007      	beq.n	80043e6 <HAL_GPIO_Init+0x20e>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a4b      	ldr	r2, [pc, #300]	; (8004508 <HAL_GPIO_Init+0x330>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d101      	bne.n	80043e2 <HAL_GPIO_Init+0x20a>
 80043de:	2307      	movs	r3, #7
 80043e0:	e00e      	b.n	8004400 <HAL_GPIO_Init+0x228>
 80043e2:	2308      	movs	r3, #8
 80043e4:	e00c      	b.n	8004400 <HAL_GPIO_Init+0x228>
 80043e6:	2306      	movs	r3, #6
 80043e8:	e00a      	b.n	8004400 <HAL_GPIO_Init+0x228>
 80043ea:	2305      	movs	r3, #5
 80043ec:	e008      	b.n	8004400 <HAL_GPIO_Init+0x228>
 80043ee:	2304      	movs	r3, #4
 80043f0:	e006      	b.n	8004400 <HAL_GPIO_Init+0x228>
 80043f2:	2303      	movs	r3, #3
 80043f4:	e004      	b.n	8004400 <HAL_GPIO_Init+0x228>
 80043f6:	2302      	movs	r3, #2
 80043f8:	e002      	b.n	8004400 <HAL_GPIO_Init+0x228>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <HAL_GPIO_Init+0x228>
 80043fe:	2300      	movs	r3, #0
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	f002 0203 	and.w	r2, r2, #3
 8004406:	0092      	lsls	r2, r2, #2
 8004408:	4093      	lsls	r3, r2
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	4313      	orrs	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004410:	4935      	ldr	r1, [pc, #212]	; (80044e8 <HAL_GPIO_Init+0x310>)
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	089b      	lsrs	r3, r3, #2
 8004416:	3302      	adds	r3, #2
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800441e:	4b3b      	ldr	r3, [pc, #236]	; (800450c <HAL_GPIO_Init+0x334>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	43db      	mvns	r3, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4013      	ands	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004442:	4a32      	ldr	r2, [pc, #200]	; (800450c <HAL_GPIO_Init+0x334>)
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004448:	4b30      	ldr	r3, [pc, #192]	; (800450c <HAL_GPIO_Init+0x334>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	43db      	mvns	r3, r3
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4013      	ands	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800446c:	4a27      	ldr	r2, [pc, #156]	; (800450c <HAL_GPIO_Init+0x334>)
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004472:	4b26      	ldr	r3, [pc, #152]	; (800450c <HAL_GPIO_Init+0x334>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	43db      	mvns	r3, r3
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	4013      	ands	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004496:	4a1d      	ldr	r2, [pc, #116]	; (800450c <HAL_GPIO_Init+0x334>)
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800449c:	4b1b      	ldr	r3, [pc, #108]	; (800450c <HAL_GPIO_Init+0x334>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	43db      	mvns	r3, r3
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	4013      	ands	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044c0:	4a12      	ldr	r2, [pc, #72]	; (800450c <HAL_GPIO_Init+0x334>)
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	3301      	adds	r3, #1
 80044ca:	61fb      	str	r3, [r7, #28]
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	2b0f      	cmp	r3, #15
 80044d0:	f67f ae90 	bls.w	80041f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	3724      	adds	r7, #36	; 0x24
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40023800 	.word	0x40023800
 80044e8:	40013800 	.word	0x40013800
 80044ec:	40020000 	.word	0x40020000
 80044f0:	40020400 	.word	0x40020400
 80044f4:	40020800 	.word	0x40020800
 80044f8:	40020c00 	.word	0x40020c00
 80044fc:	40021000 	.word	0x40021000
 8004500:	40021400 	.word	0x40021400
 8004504:	40021800 	.word	0x40021800
 8004508:	40021c00 	.word	0x40021c00
 800450c:	40013c00 	.word	0x40013c00

08004510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	807b      	strh	r3, [r7, #2]
 800451c:	4613      	mov	r3, r2
 800451e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004520:	787b      	ldrb	r3, [r7, #1]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004526:	887a      	ldrh	r2, [r7, #2]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800452c:	e003      	b.n	8004536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800452e:	887b      	ldrh	r3, [r7, #2]
 8004530:	041a      	lsls	r2, r3, #16
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	619a      	str	r2, [r3, #24]
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
	...

08004544 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e267      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d075      	beq.n	800464e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004562:	4b88      	ldr	r3, [pc, #544]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b04      	cmp	r3, #4
 800456c:	d00c      	beq.n	8004588 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800456e:	4b85      	ldr	r3, [pc, #532]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004576:	2b08      	cmp	r3, #8
 8004578:	d112      	bne.n	80045a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800457a:	4b82      	ldr	r3, [pc, #520]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004586:	d10b      	bne.n	80045a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004588:	4b7e      	ldr	r3, [pc, #504]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d05b      	beq.n	800464c <HAL_RCC_OscConfig+0x108>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d157      	bne.n	800464c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e242      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a8:	d106      	bne.n	80045b8 <HAL_RCC_OscConfig+0x74>
 80045aa:	4b76      	ldr	r3, [pc, #472]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a75      	ldr	r2, [pc, #468]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	e01d      	b.n	80045f4 <HAL_RCC_OscConfig+0xb0>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045c0:	d10c      	bne.n	80045dc <HAL_RCC_OscConfig+0x98>
 80045c2:	4b70      	ldr	r3, [pc, #448]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a6f      	ldr	r2, [pc, #444]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	4b6d      	ldr	r3, [pc, #436]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a6c      	ldr	r2, [pc, #432]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	e00b      	b.n	80045f4 <HAL_RCC_OscConfig+0xb0>
 80045dc:	4b69      	ldr	r3, [pc, #420]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a68      	ldr	r2, [pc, #416]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	4b66      	ldr	r3, [pc, #408]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a65      	ldr	r2, [pc, #404]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d013      	beq.n	8004624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fc:	f7ff fc6c 	bl	8003ed8 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004604:	f7ff fc68 	bl	8003ed8 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b64      	cmp	r3, #100	; 0x64
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e207      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004616:	4b5b      	ldr	r3, [pc, #364]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0xc0>
 8004622:	e014      	b.n	800464e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004624:	f7ff fc58 	bl	8003ed8 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800462c:	f7ff fc54 	bl	8003ed8 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b64      	cmp	r3, #100	; 0x64
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e1f3      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463e:	4b51      	ldr	r3, [pc, #324]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0xe8>
 800464a:	e000      	b.n	800464e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800464c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d063      	beq.n	8004722 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800465a:	4b4a      	ldr	r3, [pc, #296]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00b      	beq.n	800467e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004666:	4b47      	ldr	r3, [pc, #284]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800466e:	2b08      	cmp	r3, #8
 8004670:	d11c      	bne.n	80046ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004672:	4b44      	ldr	r3, [pc, #272]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d116      	bne.n	80046ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467e:	4b41      	ldr	r3, [pc, #260]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d005      	beq.n	8004696 <HAL_RCC_OscConfig+0x152>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d001      	beq.n	8004696 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e1c7      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004696:	4b3b      	ldr	r3, [pc, #236]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4937      	ldr	r1, [pc, #220]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046aa:	e03a      	b.n	8004722 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d020      	beq.n	80046f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046b4:	4b34      	ldr	r3, [pc, #208]	; (8004788 <HAL_RCC_OscConfig+0x244>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ba:	f7ff fc0d 	bl	8003ed8 <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046c2:	f7ff fc09 	bl	8003ed8 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e1a8      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d4:	4b2b      	ldr	r3, [pc, #172]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e0:	4b28      	ldr	r3, [pc, #160]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	4925      	ldr	r1, [pc, #148]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	600b      	str	r3, [r1, #0]
 80046f4:	e015      	b.n	8004722 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046f6:	4b24      	ldr	r3, [pc, #144]	; (8004788 <HAL_RCC_OscConfig+0x244>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fc:	f7ff fbec 	bl	8003ed8 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004704:	f7ff fbe8 	bl	8003ed8 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e187      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004716:	4b1b      	ldr	r3, [pc, #108]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d036      	beq.n	800479c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d016      	beq.n	8004764 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004736:	4b15      	ldr	r3, [pc, #84]	; (800478c <HAL_RCC_OscConfig+0x248>)
 8004738:	2201      	movs	r2, #1
 800473a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473c:	f7ff fbcc 	bl	8003ed8 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004744:	f7ff fbc8 	bl	8003ed8 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e167      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004756:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f0      	beq.n	8004744 <HAL_RCC_OscConfig+0x200>
 8004762:	e01b      	b.n	800479c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004764:	4b09      	ldr	r3, [pc, #36]	; (800478c <HAL_RCC_OscConfig+0x248>)
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476a:	f7ff fbb5 	bl	8003ed8 <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004770:	e00e      	b.n	8004790 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004772:	f7ff fbb1 	bl	8003ed8 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d907      	bls.n	8004790 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e150      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
 8004784:	40023800 	.word	0x40023800
 8004788:	42470000 	.word	0x42470000
 800478c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004790:	4b88      	ldr	r3, [pc, #544]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1ea      	bne.n	8004772 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8097 	beq.w	80048d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047aa:	2300      	movs	r3, #0
 80047ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ae:	4b81      	ldr	r3, [pc, #516]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10f      	bne.n	80047da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	60bb      	str	r3, [r7, #8]
 80047be:	4b7d      	ldr	r3, [pc, #500]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	4a7c      	ldr	r2, [pc, #496]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80047c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c8:	6413      	str	r3, [r2, #64]	; 0x40
 80047ca:	4b7a      	ldr	r3, [pc, #488]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d2:	60bb      	str	r3, [r7, #8]
 80047d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047d6:	2301      	movs	r3, #1
 80047d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047da:	4b77      	ldr	r3, [pc, #476]	; (80049b8 <HAL_RCC_OscConfig+0x474>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d118      	bne.n	8004818 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047e6:	4b74      	ldr	r3, [pc, #464]	; (80049b8 <HAL_RCC_OscConfig+0x474>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a73      	ldr	r2, [pc, #460]	; (80049b8 <HAL_RCC_OscConfig+0x474>)
 80047ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047f2:	f7ff fb71 	bl	8003ed8 <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047fa:	f7ff fb6d 	bl	8003ed8 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e10c      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480c:	4b6a      	ldr	r3, [pc, #424]	; (80049b8 <HAL_RCC_OscConfig+0x474>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0f0      	beq.n	80047fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d106      	bne.n	800482e <HAL_RCC_OscConfig+0x2ea>
 8004820:	4b64      	ldr	r3, [pc, #400]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004824:	4a63      	ldr	r2, [pc, #396]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	6713      	str	r3, [r2, #112]	; 0x70
 800482c:	e01c      	b.n	8004868 <HAL_RCC_OscConfig+0x324>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b05      	cmp	r3, #5
 8004834:	d10c      	bne.n	8004850 <HAL_RCC_OscConfig+0x30c>
 8004836:	4b5f      	ldr	r3, [pc, #380]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	4a5e      	ldr	r2, [pc, #376]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 800483c:	f043 0304 	orr.w	r3, r3, #4
 8004840:	6713      	str	r3, [r2, #112]	; 0x70
 8004842:	4b5c      	ldr	r3, [pc, #368]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004846:	4a5b      	ldr	r2, [pc, #364]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004848:	f043 0301 	orr.w	r3, r3, #1
 800484c:	6713      	str	r3, [r2, #112]	; 0x70
 800484e:	e00b      	b.n	8004868 <HAL_RCC_OscConfig+0x324>
 8004850:	4b58      	ldr	r3, [pc, #352]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004854:	4a57      	ldr	r2, [pc, #348]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004856:	f023 0301 	bic.w	r3, r3, #1
 800485a:	6713      	str	r3, [r2, #112]	; 0x70
 800485c:	4b55      	ldr	r3, [pc, #340]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 800485e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004860:	4a54      	ldr	r2, [pc, #336]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004862:	f023 0304 	bic.w	r3, r3, #4
 8004866:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d015      	beq.n	800489c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004870:	f7ff fb32 	bl	8003ed8 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004876:	e00a      	b.n	800488e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004878:	f7ff fb2e 	bl	8003ed8 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	f241 3288 	movw	r2, #5000	; 0x1388
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e0cb      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800488e:	4b49      	ldr	r3, [pc, #292]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0ee      	beq.n	8004878 <HAL_RCC_OscConfig+0x334>
 800489a:	e014      	b.n	80048c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800489c:	f7ff fb1c 	bl	8003ed8 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048a2:	e00a      	b.n	80048ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048a4:	f7ff fb18 	bl	8003ed8 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e0b5      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ba:	4b3e      	ldr	r3, [pc, #248]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80048bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1ee      	bne.n	80048a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048c6:	7dfb      	ldrb	r3, [r7, #23]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d105      	bne.n	80048d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048cc:	4b39      	ldr	r3, [pc, #228]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80048ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d0:	4a38      	ldr	r2, [pc, #224]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80048d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80a1 	beq.w	8004a24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048e2:	4b34      	ldr	r3, [pc, #208]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 030c 	and.w	r3, r3, #12
 80048ea:	2b08      	cmp	r3, #8
 80048ec:	d05c      	beq.n	80049a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d141      	bne.n	800497a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f6:	4b31      	ldr	r3, [pc, #196]	; (80049bc <HAL_RCC_OscConfig+0x478>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7ff faec 	bl	8003ed8 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004904:	f7ff fae8 	bl	8003ed8 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e087      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004916:	4b27      	ldr	r3, [pc, #156]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69da      	ldr	r2, [r3, #28]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	019b      	lsls	r3, r3, #6
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	085b      	lsrs	r3, r3, #1
 800493a:	3b01      	subs	r3, #1
 800493c:	041b      	lsls	r3, r3, #16
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	061b      	lsls	r3, r3, #24
 8004946:	491b      	ldr	r1, [pc, #108]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004948:	4313      	orrs	r3, r2
 800494a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800494c:	4b1b      	ldr	r3, [pc, #108]	; (80049bc <HAL_RCC_OscConfig+0x478>)
 800494e:	2201      	movs	r2, #1
 8004950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004952:	f7ff fac1 	bl	8003ed8 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800495a:	f7ff fabd 	bl	8003ed8 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e05c      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800496c:	4b11      	ldr	r3, [pc, #68]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0f0      	beq.n	800495a <HAL_RCC_OscConfig+0x416>
 8004978:	e054      	b.n	8004a24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497a:	4b10      	ldr	r3, [pc, #64]	; (80049bc <HAL_RCC_OscConfig+0x478>)
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004980:	f7ff faaa 	bl	8003ed8 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004988:	f7ff faa6 	bl	8003ed8 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e045      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800499a:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0x444>
 80049a6:	e03d      	b.n	8004a24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d107      	bne.n	80049c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e038      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
 80049b4:	40023800 	.word	0x40023800
 80049b8:	40007000 	.word	0x40007000
 80049bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049c0:	4b1b      	ldr	r3, [pc, #108]	; (8004a30 <HAL_RCC_OscConfig+0x4ec>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d028      	beq.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049d8:	429a      	cmp	r2, r3
 80049da:	d121      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d11a      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049f0:	4013      	ands	r3, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d111      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a06:	085b      	lsrs	r3, r3, #1
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800

08004a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0cc      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a48:	4b68      	ldr	r3, [pc, #416]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d90c      	bls.n	8004a70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a56:	4b65      	ldr	r3, [pc, #404]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a5e:	4b63      	ldr	r3, [pc, #396]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d001      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e0b8      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d020      	beq.n	8004abe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a88:	4b59      	ldr	r3, [pc, #356]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	4a58      	ldr	r2, [pc, #352]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d005      	beq.n	8004aac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aa0:	4b53      	ldr	r3, [pc, #332]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	4a52      	ldr	r2, [pc, #328]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004aaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aac:	4b50      	ldr	r3, [pc, #320]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	494d      	ldr	r1, [pc, #308]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d044      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d107      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad2:	4b47      	ldr	r3, [pc, #284]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d119      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e07f      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d003      	beq.n	8004af2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	d107      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af2:	4b3f      	ldr	r3, [pc, #252]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e06f      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b02:	4b3b      	ldr	r3, [pc, #236]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e067      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b12:	4b37      	ldr	r3, [pc, #220]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f023 0203 	bic.w	r2, r3, #3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	4934      	ldr	r1, [pc, #208]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b24:	f7ff f9d8 	bl	8003ed8 <HAL_GetTick>
 8004b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2a:	e00a      	b.n	8004b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b2c:	f7ff f9d4 	bl	8003ed8 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e04f      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b42:	4b2b      	ldr	r3, [pc, #172]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 020c 	and.w	r2, r3, #12
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d1eb      	bne.n	8004b2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b54:	4b25      	ldr	r3, [pc, #148]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d20c      	bcs.n	8004b7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b62:	4b22      	ldr	r3, [pc, #136]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6a:	4b20      	ldr	r3, [pc, #128]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e032      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b88:	4b19      	ldr	r3, [pc, #100]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4916      	ldr	r1, [pc, #88]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ba6:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	490e      	ldr	r1, [pc, #56]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bba:	f000 f821 	bl	8004c00 <HAL_RCC_GetSysClockFreq>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	091b      	lsrs	r3, r3, #4
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	490a      	ldr	r1, [pc, #40]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004bcc:	5ccb      	ldrb	r3, [r1, r3]
 8004bce:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd2:	4a09      	ldr	r2, [pc, #36]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bd6:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <HAL_RCC_ClockConfig+0x1c8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fe fe4a 	bl	8003874 <HAL_InitTick>

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40023c00 	.word	0x40023c00
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	08010ff8 	.word	0x08010ff8
 8004bf8:	200000b8 	.word	0x200000b8
 8004bfc:	200000bc 	.word	0x200000bc

08004c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c04:	b090      	sub	sp, #64	; 0x40
 8004c06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c10:	2300      	movs	r3, #0
 8004c12:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c18:	4b59      	ldr	r3, [pc, #356]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 030c 	and.w	r3, r3, #12
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d00d      	beq.n	8004c40 <HAL_RCC_GetSysClockFreq+0x40>
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	f200 80a1 	bhi.w	8004d6c <HAL_RCC_GetSysClockFreq+0x16c>
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_RCC_GetSysClockFreq+0x34>
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d003      	beq.n	8004c3a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c32:	e09b      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c34:	4b53      	ldr	r3, [pc, #332]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c36:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004c38:	e09b      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c3a:	4b53      	ldr	r3, [pc, #332]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c3e:	e098      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c40:	4b4f      	ldr	r3, [pc, #316]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c48:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c4a:	4b4d      	ldr	r3, [pc, #308]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d028      	beq.n	8004ca8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c56:	4b4a      	ldr	r3, [pc, #296]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	099b      	lsrs	r3, r3, #6
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	623b      	str	r3, [r7, #32]
 8004c60:	627a      	str	r2, [r7, #36]	; 0x24
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c68:	2100      	movs	r1, #0
 8004c6a:	4b47      	ldr	r3, [pc, #284]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c6c:	fb03 f201 	mul.w	r2, r3, r1
 8004c70:	2300      	movs	r3, #0
 8004c72:	fb00 f303 	mul.w	r3, r0, r3
 8004c76:	4413      	add	r3, r2
 8004c78:	4a43      	ldr	r2, [pc, #268]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c7a:	fba0 1202 	umull	r1, r2, r0, r2
 8004c7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c80:	460a      	mov	r2, r1
 8004c82:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c86:	4413      	add	r3, r2
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	61bb      	str	r3, [r7, #24]
 8004c90:	61fa      	str	r2, [r7, #28]
 8004c92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c9a:	f7fb fff5 	bl	8000c88 <__aeabi_uldivmod>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ca6:	e053      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ca8:	4b35      	ldr	r3, [pc, #212]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	099b      	lsrs	r3, r3, #6
 8004cae:	2200      	movs	r2, #0
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	617a      	str	r2, [r7, #20]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004cba:	f04f 0b00 	mov.w	fp, #0
 8004cbe:	4652      	mov	r2, sl
 8004cc0:	465b      	mov	r3, fp
 8004cc2:	f04f 0000 	mov.w	r0, #0
 8004cc6:	f04f 0100 	mov.w	r1, #0
 8004cca:	0159      	lsls	r1, r3, #5
 8004ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cd0:	0150      	lsls	r0, r2, #5
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	ebb2 080a 	subs.w	r8, r2, sl
 8004cda:	eb63 090b 	sbc.w	r9, r3, fp
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004cea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004cee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004cf2:	ebb2 0408 	subs.w	r4, r2, r8
 8004cf6:	eb63 0509 	sbc.w	r5, r3, r9
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	00eb      	lsls	r3, r5, #3
 8004d04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d08:	00e2      	lsls	r2, r4, #3
 8004d0a:	4614      	mov	r4, r2
 8004d0c:	461d      	mov	r5, r3
 8004d0e:	eb14 030a 	adds.w	r3, r4, sl
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	eb45 030b 	adc.w	r3, r5, fp
 8004d18:	607b      	str	r3, [r7, #4]
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d26:	4629      	mov	r1, r5
 8004d28:	028b      	lsls	r3, r1, #10
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d30:	4621      	mov	r1, r4
 8004d32:	028a      	lsls	r2, r1, #10
 8004d34:	4610      	mov	r0, r2
 8004d36:	4619      	mov	r1, r3
 8004d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	60fa      	str	r2, [r7, #12]
 8004d40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d44:	f7fb ffa0 	bl	8000c88 <__aeabi_uldivmod>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	0c1b      	lsrs	r3, r3, #16
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004d60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d6a:	e002      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d6c:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d6e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3740      	adds	r7, #64	; 0x40
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d7e:	bf00      	nop
 8004d80:	40023800 	.word	0x40023800
 8004d84:	00f42400 	.word	0x00f42400
 8004d88:	017d7840 	.word	0x017d7840

08004d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d90:	4b03      	ldr	r3, [pc, #12]	; (8004da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d92:	681b      	ldr	r3, [r3, #0]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	200000b8 	.word	0x200000b8

08004da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004da8:	f7ff fff0 	bl	8004d8c <HAL_RCC_GetHCLKFreq>
 8004dac:	4602      	mov	r2, r0
 8004dae:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	0a9b      	lsrs	r3, r3, #10
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	4903      	ldr	r1, [pc, #12]	; (8004dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dba:	5ccb      	ldrb	r3, [r1, r3]
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	08011008 	.word	0x08011008

08004dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004dd0:	f7ff ffdc 	bl	8004d8c <HAL_RCC_GetHCLKFreq>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	4b05      	ldr	r3, [pc, #20]	; (8004dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	0b5b      	lsrs	r3, r3, #13
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	4903      	ldr	r1, [pc, #12]	; (8004df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004de2:	5ccb      	ldrb	r3, [r1, r3]
 8004de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40023800 	.word	0x40023800
 8004df0:	08011008 	.word	0x08011008

08004df4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	220f      	movs	r2, #15
 8004e02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e04:	4b12      	ldr	r3, [pc, #72]	; (8004e50 <HAL_RCC_GetClockConfig+0x5c>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f003 0203 	and.w	r2, r3, #3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e10:	4b0f      	ldr	r3, [pc, #60]	; (8004e50 <HAL_RCC_GetClockConfig+0x5c>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e1c:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <HAL_RCC_GetClockConfig+0x5c>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e28:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <HAL_RCC_GetClockConfig+0x5c>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	08db      	lsrs	r3, r3, #3
 8004e2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e36:	4b07      	ldr	r3, [pc, #28]	; (8004e54 <HAL_RCC_GetClockConfig+0x60>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0207 	and.w	r2, r3, #7
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	601a      	str	r2, [r3, #0]
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40023800 	.word	0x40023800
 8004e54:	40023c00 	.word	0x40023c00

08004e58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e07b      	b.n	8004f62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d108      	bne.n	8004e84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e7a:	d009      	beq.n	8004e90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	61da      	str	r2, [r3, #28]
 8004e82:	e005      	b.n	8004e90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7fe fa4e 	bl	800334c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ec6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	431a      	orrs	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f14:	ea42 0103 	orr.w	r1, r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	0c1b      	lsrs	r3, r3, #16
 8004f2e:	f003 0104 	and.w	r1, r3, #4
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	f003 0210 	and.w	r2, r3, #16
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69da      	ldr	r2, [r3, #28]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b08c      	sub	sp, #48	; 0x30
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	607a      	str	r2, [r7, #4]
 8004f76:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d101      	bne.n	8004f90 <HAL_SPI_TransmitReceive+0x26>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e198      	b.n	80052c2 <HAL_SPI_TransmitReceive+0x358>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f98:	f7fe ff9e 	bl	8003ed8 <HAL_GetTick>
 8004f9c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004fae:	887b      	ldrh	r3, [r7, #2]
 8004fb0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d00f      	beq.n	8004fda <HAL_SPI_TransmitReceive+0x70>
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc0:	d107      	bne.n	8004fd2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d103      	bne.n	8004fd2 <HAL_SPI_TransmitReceive+0x68>
 8004fca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	d003      	beq.n	8004fda <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fd8:	e16d      	b.n	80052b6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <HAL_SPI_TransmitReceive+0x82>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <HAL_SPI_TransmitReceive+0x82>
 8004fe6:	887b      	ldrh	r3, [r7, #2]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d103      	bne.n	8004ff4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ff2:	e160      	b.n	80052b6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d003      	beq.n	8005008 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2205      	movs	r2, #5
 8005004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	887a      	ldrh	r2, [r7, #2]
 8005018:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	887a      	ldrh	r2, [r7, #2]
 800501e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	887a      	ldrh	r2, [r7, #2]
 800502a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	887a      	ldrh	r2, [r7, #2]
 8005030:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005048:	2b40      	cmp	r3, #64	; 0x40
 800504a:	d007      	beq.n	800505c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800505a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005064:	d17c      	bne.n	8005160 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <HAL_SPI_TransmitReceive+0x10a>
 800506e:	8b7b      	ldrh	r3, [r7, #26]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d16a      	bne.n	800514a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005078:	881a      	ldrh	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	1c9a      	adds	r2, r3, #2
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005098:	e057      	b.n	800514a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d11b      	bne.n	80050e0 <HAL_SPI_TransmitReceive+0x176>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d016      	beq.n	80050e0 <HAL_SPI_TransmitReceive+0x176>
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d113      	bne.n	80050e0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050bc:	881a      	ldrh	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c8:	1c9a      	adds	r2, r3, #2
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d119      	bne.n	8005122 <HAL_SPI_TransmitReceive+0x1b8>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d014      	beq.n	8005122 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	b292      	uxth	r2, r2
 8005104:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	1c9a      	adds	r2, r3, #2
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005114:	b29b      	uxth	r3, r3
 8005116:	3b01      	subs	r3, #1
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800511e:	2301      	movs	r3, #1
 8005120:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005122:	f7fe fed9 	bl	8003ed8 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800512e:	429a      	cmp	r2, r3
 8005130:	d80b      	bhi.n	800514a <HAL_SPI_TransmitReceive+0x1e0>
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005138:	d007      	beq.n	800514a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005148:	e0b5      	b.n	80052b6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800514e:	b29b      	uxth	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1a2      	bne.n	800509a <HAL_SPI_TransmitReceive+0x130>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d19d      	bne.n	800509a <HAL_SPI_TransmitReceive+0x130>
 800515e:	e080      	b.n	8005262 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <HAL_SPI_TransmitReceive+0x204>
 8005168:	8b7b      	ldrh	r3, [r7, #26]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d16f      	bne.n	800524e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	330c      	adds	r3, #12
 8005178:	7812      	ldrb	r2, [r2, #0]
 800517a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005194:	e05b      	b.n	800524e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d11c      	bne.n	80051de <HAL_SPI_TransmitReceive+0x274>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d017      	beq.n	80051de <HAL_SPI_TransmitReceive+0x274>
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d114      	bne.n	80051de <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	330c      	adds	r3, #12
 80051be:	7812      	ldrb	r2, [r2, #0]
 80051c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	3b01      	subs	r3, #1
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d119      	bne.n	8005220 <HAL_SPI_TransmitReceive+0x2b6>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d014      	beq.n	8005220 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800521c:	2301      	movs	r3, #1
 800521e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005220:	f7fe fe5a 	bl	8003ed8 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800522c:	429a      	cmp	r2, r3
 800522e:	d803      	bhi.n	8005238 <HAL_SPI_TransmitReceive+0x2ce>
 8005230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005236:	d102      	bne.n	800523e <HAL_SPI_TransmitReceive+0x2d4>
 8005238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523a:	2b00      	cmp	r3, #0
 800523c:	d107      	bne.n	800524e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800524c:	e033      	b.n	80052b6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005252:	b29b      	uxth	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d19e      	bne.n	8005196 <HAL_SPI_TransmitReceive+0x22c>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d199      	bne.n	8005196 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005264:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 f8b8 	bl	80053dc <SPI_EndRxTxTransaction>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d006      	beq.n	8005280 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2220      	movs	r2, #32
 800527c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800527e:	e01a      	b.n	80052b6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10a      	bne.n	800529e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005288:	2300      	movs	r3, #0
 800528a:	617b      	str	r3, [r7, #20]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ac:	e003      	b.n	80052b6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3730      	adds	r7, #48	; 0x30
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
	...

080052cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	4613      	mov	r3, r2
 80052da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052dc:	f7fe fdfc 	bl	8003ed8 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	1a9b      	subs	r3, r3, r2
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	4413      	add	r3, r2
 80052ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052ec:	f7fe fdf4 	bl	8003ed8 <HAL_GetTick>
 80052f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052f2:	4b39      	ldr	r3, [pc, #228]	; (80053d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	015b      	lsls	r3, r3, #5
 80052f8:	0d1b      	lsrs	r3, r3, #20
 80052fa:	69fa      	ldr	r2, [r7, #28]
 80052fc:	fb02 f303 	mul.w	r3, r2, r3
 8005300:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005302:	e054      	b.n	80053ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530a:	d050      	beq.n	80053ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800530c:	f7fe fde4 	bl	8003ed8 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	429a      	cmp	r2, r3
 800531a:	d902      	bls.n	8005322 <SPI_WaitFlagStateUntilTimeout+0x56>
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d13d      	bne.n	800539e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005330:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800533a:	d111      	bne.n	8005360 <SPI_WaitFlagStateUntilTimeout+0x94>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005344:	d004      	beq.n	8005350 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800534e:	d107      	bne.n	8005360 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800535e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005368:	d10f      	bne.n	800538a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005388:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e017      	b.n	80053ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4013      	ands	r3, r2
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	bf0c      	ite	eq
 80053be:	2301      	moveq	r3, #1
 80053c0:	2300      	movne	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	461a      	mov	r2, r3
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d19b      	bne.n	8005304 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3720      	adds	r7, #32
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	200000b8 	.word	0x200000b8

080053dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2201      	movs	r2, #1
 80053f0:	2102      	movs	r1, #2
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f7ff ff6a 	bl	80052cc <SPI_WaitFlagStateUntilTimeout>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d007      	beq.n	800540e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005402:	f043 0220 	orr.w	r2, r3, #32
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e032      	b.n	8005474 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800540e:	4b1b      	ldr	r3, [pc, #108]	; (800547c <SPI_EndRxTxTransaction+0xa0>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a1b      	ldr	r2, [pc, #108]	; (8005480 <SPI_EndRxTxTransaction+0xa4>)
 8005414:	fba2 2303 	umull	r2, r3, r2, r3
 8005418:	0d5b      	lsrs	r3, r3, #21
 800541a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800541e:	fb02 f303 	mul.w	r3, r2, r3
 8005422:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800542c:	d112      	bne.n	8005454 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2200      	movs	r2, #0
 8005436:	2180      	movs	r1, #128	; 0x80
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f7ff ff47 	bl	80052cc <SPI_WaitFlagStateUntilTimeout>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d016      	beq.n	8005472 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005448:	f043 0220 	orr.w	r2, r3, #32
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e00f      	b.n	8005474 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	3b01      	subs	r3, #1
 800545e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546a:	2b80      	cmp	r3, #128	; 0x80
 800546c:	d0f2      	beq.n	8005454 <SPI_EndRxTxTransaction+0x78>
 800546e:	e000      	b.n	8005472 <SPI_EndRxTxTransaction+0x96>
        break;
 8005470:	bf00      	nop
  }

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	200000b8 	.word	0x200000b8
 8005480:	165e9f81 	.word	0x165e9f81

08005484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e041      	b.n	800551a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fe f874 	bl	8003598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3304      	adds	r3, #4
 80054c0:	4619      	mov	r1, r3
 80054c2:	4610      	mov	r0, r2
 80054c4:	f000 ffee 	bl	80064a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	d001      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e04e      	b.n	80055da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0201 	orr.w	r2, r2, #1
 8005552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a23      	ldr	r2, [pc, #140]	; (80055e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d022      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005566:	d01d      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a1f      	ldr	r2, [pc, #124]	; (80055ec <HAL_TIM_Base_Start_IT+0xc8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d018      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a1e      	ldr	r2, [pc, #120]	; (80055f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d013      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a1c      	ldr	r2, [pc, #112]	; (80055f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00e      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a1b      	ldr	r2, [pc, #108]	; (80055f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d009      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a19      	ldr	r2, [pc, #100]	; (80055fc <HAL_TIM_Base_Start_IT+0xd8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d004      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a18      	ldr	r2, [pc, #96]	; (8005600 <HAL_TIM_Base_Start_IT+0xdc>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d111      	bne.n	80055c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b06      	cmp	r3, #6
 80055b4:	d010      	beq.n	80055d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f042 0201 	orr.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c6:	e007      	b.n	80055d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0201 	orr.w	r2, r2, #1
 80055d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	40010000 	.word	0x40010000
 80055ec:	40000400 	.word	0x40000400
 80055f0:	40000800 	.word	0x40000800
 80055f4:	40000c00 	.word	0x40000c00
 80055f8:	40010400 	.word	0x40010400
 80055fc:	40014000 	.word	0x40014000
 8005600:	40001800 	.word	0x40001800

08005604 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e041      	b.n	800569a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f839 	bl	80056a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	3304      	adds	r3, #4
 8005640:	4619      	mov	r1, r3
 8005642:	4610      	mov	r0, r2
 8005644:	f000 ff2e 	bl	80064a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
	...

080056b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d109      	bne.n	80056dc <HAL_TIM_PWM_Start+0x24>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	bf14      	ite	ne
 80056d4:	2301      	movne	r3, #1
 80056d6:	2300      	moveq	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	e022      	b.n	8005722 <HAL_TIM_PWM_Start+0x6a>
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d109      	bne.n	80056f6 <HAL_TIM_PWM_Start+0x3e>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	bf14      	ite	ne
 80056ee:	2301      	movne	r3, #1
 80056f0:	2300      	moveq	r3, #0
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	e015      	b.n	8005722 <HAL_TIM_PWM_Start+0x6a>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d109      	bne.n	8005710 <HAL_TIM_PWM_Start+0x58>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b01      	cmp	r3, #1
 8005706:	bf14      	ite	ne
 8005708:	2301      	movne	r3, #1
 800570a:	2300      	moveq	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	e008      	b.n	8005722 <HAL_TIM_PWM_Start+0x6a>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b01      	cmp	r3, #1
 800571a:	bf14      	ite	ne
 800571c:	2301      	movne	r3, #1
 800571e:	2300      	moveq	r3, #0
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e07c      	b.n	8005824 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d104      	bne.n	800573a <HAL_TIM_PWM_Start+0x82>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005738:	e013      	b.n	8005762 <HAL_TIM_PWM_Start+0xaa>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b04      	cmp	r3, #4
 800573e:	d104      	bne.n	800574a <HAL_TIM_PWM_Start+0x92>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005748:	e00b      	b.n	8005762 <HAL_TIM_PWM_Start+0xaa>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b08      	cmp	r3, #8
 800574e:	d104      	bne.n	800575a <HAL_TIM_PWM_Start+0xa2>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005758:	e003      	b.n	8005762 <HAL_TIM_PWM_Start+0xaa>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2202      	movs	r2, #2
 800575e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2201      	movs	r2, #1
 8005768:	6839      	ldr	r1, [r7, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f001 faba 	bl	8006ce4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a2d      	ldr	r2, [pc, #180]	; (800582c <HAL_TIM_PWM_Start+0x174>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d004      	beq.n	8005784 <HAL_TIM_PWM_Start+0xcc>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a2c      	ldr	r2, [pc, #176]	; (8005830 <HAL_TIM_PWM_Start+0x178>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d101      	bne.n	8005788 <HAL_TIM_PWM_Start+0xd0>
 8005784:	2301      	movs	r3, #1
 8005786:	e000      	b.n	800578a <HAL_TIM_PWM_Start+0xd2>
 8005788:	2300      	movs	r3, #0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d007      	beq.n	800579e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800579c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a22      	ldr	r2, [pc, #136]	; (800582c <HAL_TIM_PWM_Start+0x174>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d022      	beq.n	80057ee <HAL_TIM_PWM_Start+0x136>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b0:	d01d      	beq.n	80057ee <HAL_TIM_PWM_Start+0x136>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1f      	ldr	r2, [pc, #124]	; (8005834 <HAL_TIM_PWM_Start+0x17c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d018      	beq.n	80057ee <HAL_TIM_PWM_Start+0x136>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a1d      	ldr	r2, [pc, #116]	; (8005838 <HAL_TIM_PWM_Start+0x180>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d013      	beq.n	80057ee <HAL_TIM_PWM_Start+0x136>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1c      	ldr	r2, [pc, #112]	; (800583c <HAL_TIM_PWM_Start+0x184>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00e      	beq.n	80057ee <HAL_TIM_PWM_Start+0x136>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a16      	ldr	r2, [pc, #88]	; (8005830 <HAL_TIM_PWM_Start+0x178>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d009      	beq.n	80057ee <HAL_TIM_PWM_Start+0x136>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a18      	ldr	r2, [pc, #96]	; (8005840 <HAL_TIM_PWM_Start+0x188>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d004      	beq.n	80057ee <HAL_TIM_PWM_Start+0x136>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a16      	ldr	r2, [pc, #88]	; (8005844 <HAL_TIM_PWM_Start+0x18c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d111      	bne.n	8005812 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b06      	cmp	r3, #6
 80057fe:	d010      	beq.n	8005822 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0201 	orr.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005810:	e007      	b.n	8005822 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f042 0201 	orr.w	r2, r2, #1
 8005820:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40010000 	.word	0x40010000
 8005830:	40010400 	.word	0x40010400
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800
 800583c:	40000c00 	.word	0x40000c00
 8005840:	40014000 	.word	0x40014000
 8005844:	40001800 	.word	0x40001800

08005848 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e041      	b.n	80058de <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f839 	bl	80058e6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3304      	adds	r3, #4
 8005884:	4619      	mov	r1, r3
 8005886:	4610      	mov	r0, r2
 8005888:	f000 fe0c 	bl	80064a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
	...

080058fc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d104      	bne.n	800591a <HAL_TIM_IC_Start_IT+0x1e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005916:	b2db      	uxtb	r3, r3
 8005918:	e013      	b.n	8005942 <HAL_TIM_IC_Start_IT+0x46>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b04      	cmp	r3, #4
 800591e:	d104      	bne.n	800592a <HAL_TIM_IC_Start_IT+0x2e>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005926:	b2db      	uxtb	r3, r3
 8005928:	e00b      	b.n	8005942 <HAL_TIM_IC_Start_IT+0x46>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b08      	cmp	r3, #8
 800592e:	d104      	bne.n	800593a <HAL_TIM_IC_Start_IT+0x3e>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005936:	b2db      	uxtb	r3, r3
 8005938:	e003      	b.n	8005942 <HAL_TIM_IC_Start_IT+0x46>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005940:	b2db      	uxtb	r3, r3
 8005942:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d104      	bne.n	8005954 <HAL_TIM_IC_Start_IT+0x58>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005950:	b2db      	uxtb	r3, r3
 8005952:	e013      	b.n	800597c <HAL_TIM_IC_Start_IT+0x80>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2b04      	cmp	r3, #4
 8005958:	d104      	bne.n	8005964 <HAL_TIM_IC_Start_IT+0x68>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005960:	b2db      	uxtb	r3, r3
 8005962:	e00b      	b.n	800597c <HAL_TIM_IC_Start_IT+0x80>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2b08      	cmp	r3, #8
 8005968:	d104      	bne.n	8005974 <HAL_TIM_IC_Start_IT+0x78>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005970:	b2db      	uxtb	r3, r3
 8005972:	e003      	b.n	800597c <HAL_TIM_IC_Start_IT+0x80>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800597a:	b2db      	uxtb	r3, r3
 800597c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800597e:	7bbb      	ldrb	r3, [r7, #14]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d102      	bne.n	800598a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005984:	7b7b      	ldrb	r3, [r7, #13]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d001      	beq.n	800598e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e0cc      	b.n	8005b28 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d104      	bne.n	800599e <HAL_TIM_IC_Start_IT+0xa2>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800599c:	e013      	b.n	80059c6 <HAL_TIM_IC_Start_IT+0xca>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d104      	bne.n	80059ae <HAL_TIM_IC_Start_IT+0xb2>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ac:	e00b      	b.n	80059c6 <HAL_TIM_IC_Start_IT+0xca>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d104      	bne.n	80059be <HAL_TIM_IC_Start_IT+0xc2>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059bc:	e003      	b.n	80059c6 <HAL_TIM_IC_Start_IT+0xca>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2202      	movs	r2, #2
 80059c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d104      	bne.n	80059d6 <HAL_TIM_IC_Start_IT+0xda>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059d4:	e013      	b.n	80059fe <HAL_TIM_IC_Start_IT+0x102>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b04      	cmp	r3, #4
 80059da:	d104      	bne.n	80059e6 <HAL_TIM_IC_Start_IT+0xea>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059e4:	e00b      	b.n	80059fe <HAL_TIM_IC_Start_IT+0x102>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d104      	bne.n	80059f6 <HAL_TIM_IC_Start_IT+0xfa>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059f4:	e003      	b.n	80059fe <HAL_TIM_IC_Start_IT+0x102>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2202      	movs	r2, #2
 80059fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b0c      	cmp	r3, #12
 8005a02:	d841      	bhi.n	8005a88 <HAL_TIM_IC_Start_IT+0x18c>
 8005a04:	a201      	add	r2, pc, #4	; (adr r2, 8005a0c <HAL_TIM_IC_Start_IT+0x110>)
 8005a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0a:	bf00      	nop
 8005a0c:	08005a41 	.word	0x08005a41
 8005a10:	08005a89 	.word	0x08005a89
 8005a14:	08005a89 	.word	0x08005a89
 8005a18:	08005a89 	.word	0x08005a89
 8005a1c:	08005a53 	.word	0x08005a53
 8005a20:	08005a89 	.word	0x08005a89
 8005a24:	08005a89 	.word	0x08005a89
 8005a28:	08005a89 	.word	0x08005a89
 8005a2c:	08005a65 	.word	0x08005a65
 8005a30:	08005a89 	.word	0x08005a89
 8005a34:	08005a89 	.word	0x08005a89
 8005a38:	08005a89 	.word	0x08005a89
 8005a3c:	08005a77 	.word	0x08005a77
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0202 	orr.w	r2, r2, #2
 8005a4e:	60da      	str	r2, [r3, #12]
      break;
 8005a50:	e01d      	b.n	8005a8e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f042 0204 	orr.w	r2, r2, #4
 8005a60:	60da      	str	r2, [r3, #12]
      break;
 8005a62:	e014      	b.n	8005a8e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0208 	orr.w	r2, r2, #8
 8005a72:	60da      	str	r2, [r3, #12]
      break;
 8005a74:	e00b      	b.n	8005a8e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0210 	orr.w	r2, r2, #16
 8005a84:	60da      	str	r2, [r3, #12]
      break;
 8005a86:	e002      	b.n	8005a8e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d148      	bne.n	8005b26 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	6839      	ldr	r1, [r7, #0]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f001 f921 	bl	8006ce4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a22      	ldr	r2, [pc, #136]	; (8005b30 <HAL_TIM_IC_Start_IT+0x234>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d022      	beq.n	8005af2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab4:	d01d      	beq.n	8005af2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a1e      	ldr	r2, [pc, #120]	; (8005b34 <HAL_TIM_IC_Start_IT+0x238>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d018      	beq.n	8005af2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a1c      	ldr	r2, [pc, #112]	; (8005b38 <HAL_TIM_IC_Start_IT+0x23c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d013      	beq.n	8005af2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a1b      	ldr	r2, [pc, #108]	; (8005b3c <HAL_TIM_IC_Start_IT+0x240>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00e      	beq.n	8005af2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a19      	ldr	r2, [pc, #100]	; (8005b40 <HAL_TIM_IC_Start_IT+0x244>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d009      	beq.n	8005af2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a18      	ldr	r2, [pc, #96]	; (8005b44 <HAL_TIM_IC_Start_IT+0x248>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d004      	beq.n	8005af2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a16      	ldr	r2, [pc, #88]	; (8005b48 <HAL_TIM_IC_Start_IT+0x24c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d111      	bne.n	8005b16 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b06      	cmp	r3, #6
 8005b02:	d010      	beq.n	8005b26 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0201 	orr.w	r2, r2, #1
 8005b12:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b14:	e007      	b.n	8005b26 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f042 0201 	orr.w	r2, r2, #1
 8005b24:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40010000 	.word	0x40010000
 8005b34:	40000400 	.word	0x40000400
 8005b38:	40000800 	.word	0x40000800
 8005b3c:	40000c00 	.word	0x40000c00
 8005b40:	40010400 	.word	0x40010400
 8005b44:	40014000 	.word	0x40014000
 8005b48:	40001800 	.word	0x40001800

08005b4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e097      	b.n	8005c90 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d106      	bne.n	8005b7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7fd fc51 	bl	800341c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6812      	ldr	r2, [r2, #0]
 8005b8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b90:	f023 0307 	bic.w	r3, r3, #7
 8005b94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	f000 fc7f 	bl	80064a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bce:	f023 0303 	bic.w	r3, r3, #3
 8005bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	021b      	lsls	r3, r3, #8
 8005bde:	4313      	orrs	r3, r2
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005bec:	f023 030c 	bic.w	r3, r3, #12
 8005bf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	021b      	lsls	r3, r3, #8
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	011a      	lsls	r2, r3, #4
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	031b      	lsls	r3, r3, #12
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005c2a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005c32:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ca8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005cb0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005cb8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005cc0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d110      	bne.n	8005cea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d102      	bne.n	8005cd4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cce:	7b7b      	ldrb	r3, [r7, #13]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d001      	beq.n	8005cd8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e069      	b.n	8005dac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ce8:	e031      	b.n	8005d4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d110      	bne.n	8005d12 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cf0:	7bbb      	ldrb	r3, [r7, #14]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d102      	bne.n	8005cfc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cf6:	7b3b      	ldrb	r3, [r7, #12]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d001      	beq.n	8005d00 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e055      	b.n	8005dac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d10:	e01d      	b.n	8005d4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d108      	bne.n	8005d2a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d18:	7bbb      	ldrb	r3, [r7, #14]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d105      	bne.n	8005d2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d1e:	7b7b      	ldrb	r3, [r7, #13]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d102      	bne.n	8005d2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d24:	7b3b      	ldrb	r3, [r7, #12]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d001      	beq.n	8005d2e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e03e      	b.n	8005dac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2202      	movs	r2, #2
 8005d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2202      	movs	r2, #2
 8005d3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2202      	movs	r2, #2
 8005d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2202      	movs	r2, #2
 8005d4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d003      	beq.n	8005d5c <HAL_TIM_Encoder_Start+0xc4>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d008      	beq.n	8005d6c <HAL_TIM_Encoder_Start+0xd4>
 8005d5a:	e00f      	b.n	8005d7c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2201      	movs	r2, #1
 8005d62:	2100      	movs	r1, #0
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 ffbd 	bl	8006ce4 <TIM_CCxChannelCmd>
      break;
 8005d6a:	e016      	b.n	8005d9a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2201      	movs	r2, #1
 8005d72:	2104      	movs	r1, #4
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 ffb5 	bl	8006ce4 <TIM_CCxChannelCmd>
      break;
 8005d7a:	e00e      	b.n	8005d9a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2201      	movs	r2, #1
 8005d82:	2100      	movs	r1, #0
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 ffad 	bl	8006ce4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	2104      	movs	r1, #4
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 ffa6 	bl	8006ce4 <TIM_CCxChannelCmd>
      break;
 8005d98:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f042 0201 	orr.w	r2, r2, #1
 8005da8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d020      	beq.n	8005e18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d01b      	beq.n	8005e18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f06f 0202 	mvn.w	r2, #2
 8005de8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fb f8f6 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 8005e04:	e005      	b.n	8005e12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fb2e 	bl	8006468 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fb35 	bl	800647c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f003 0304 	and.w	r3, r3, #4
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d020      	beq.n	8005e64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f003 0304 	and.w	r3, r3, #4
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d01b      	beq.n	8005e64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f06f 0204 	mvn.w	r2, #4
 8005e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2202      	movs	r2, #2
 8005e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fb f8d0 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 8005e50:	e005      	b.n	8005e5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fb08 	bl	8006468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fb0f 	bl	800647c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d020      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f003 0308 	and.w	r3, r3, #8
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d01b      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f06f 0208 	mvn.w	r2, #8
 8005e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2204      	movs	r2, #4
 8005e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7fb f8aa 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 8005e9c:	e005      	b.n	8005eaa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fae2 	bl	8006468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fae9 	bl	800647c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f003 0310 	and.w	r3, r3, #16
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d020      	beq.n	8005efc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f003 0310 	and.w	r3, r3, #16
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01b      	beq.n	8005efc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0210 	mvn.w	r2, #16
 8005ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2208      	movs	r2, #8
 8005ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7fb f884 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 8005ee8:	e005      	b.n	8005ef6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fabc 	bl	8006468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fac3 	bl	800647c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00c      	beq.n	8005f20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d007      	beq.n	8005f20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f06f 0201 	mvn.w	r2, #1
 8005f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7fc fdf8 	bl	8002b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00c      	beq.n	8005f44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d007      	beq.n	8005f44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 ff7c 	bl	8006e3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00c      	beq.n	8005f68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d007      	beq.n	8005f68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fa94 	bl	8006490 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00c      	beq.n	8005f8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f003 0320 	and.w	r3, r3, #32
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d007      	beq.n	8005f8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f06f 0220 	mvn.w	r2, #32
 8005f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 ff4e 	bl	8006e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f8c:	bf00      	nop
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d101      	bne.n	8005fb2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005fae:	2302      	movs	r3, #2
 8005fb0:	e088      	b.n	80060c4 <HAL_TIM_IC_ConfigChannel+0x130>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d11b      	bne.n	8005ff8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005fd0:	f000 fcc4 	bl	800695c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699a      	ldr	r2, [r3, #24]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 020c 	bic.w	r2, r2, #12
 8005fe2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6999      	ldr	r1, [r3, #24]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	619a      	str	r2, [r3, #24]
 8005ff6:	e060      	b.n	80060ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d11c      	bne.n	8006038 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800600e:	f000 fd48 	bl	8006aa2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	699a      	ldr	r2, [r3, #24]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006020:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6999      	ldr	r1, [r3, #24]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	021a      	lsls	r2, r3, #8
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	619a      	str	r2, [r3, #24]
 8006036:	e040      	b.n	80060ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b08      	cmp	r3, #8
 800603c:	d11b      	bne.n	8006076 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800604e:	f000 fd95 	bl	8006b7c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69da      	ldr	r2, [r3, #28]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 020c 	bic.w	r2, r2, #12
 8006060:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69d9      	ldr	r1, [r3, #28]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	61da      	str	r2, [r3, #28]
 8006074:	e021      	b.n	80060ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b0c      	cmp	r3, #12
 800607a:	d11c      	bne.n	80060b6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800608c:	f000 fdb2 	bl	8006bf4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	69da      	ldr	r2, [r3, #28]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800609e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	69d9      	ldr	r1, [r3, #28]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	021a      	lsls	r2, r3, #8
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	61da      	str	r2, [r3, #28]
 80060b4:	e001      	b.n	80060ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d101      	bne.n	80060ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060e6:	2302      	movs	r3, #2
 80060e8:	e0ae      	b.n	8006248 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b0c      	cmp	r3, #12
 80060f6:	f200 809f 	bhi.w	8006238 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060fa:	a201      	add	r2, pc, #4	; (adr r2, 8006100 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006100:	08006135 	.word	0x08006135
 8006104:	08006239 	.word	0x08006239
 8006108:	08006239 	.word	0x08006239
 800610c:	08006239 	.word	0x08006239
 8006110:	08006175 	.word	0x08006175
 8006114:	08006239 	.word	0x08006239
 8006118:	08006239 	.word	0x08006239
 800611c:	08006239 	.word	0x08006239
 8006120:	080061b7 	.word	0x080061b7
 8006124:	08006239 	.word	0x08006239
 8006128:	08006239 	.word	0x08006239
 800612c:	08006239 	.word	0x08006239
 8006130:	080061f7 	.word	0x080061f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68b9      	ldr	r1, [r7, #8]
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fa5e 	bl	80065fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0208 	orr.w	r2, r2, #8
 800614e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0204 	bic.w	r2, r2, #4
 800615e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6999      	ldr	r1, [r3, #24]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	691a      	ldr	r2, [r3, #16]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	619a      	str	r2, [r3, #24]
      break;
 8006172:	e064      	b.n	800623e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68b9      	ldr	r1, [r7, #8]
 800617a:	4618      	mov	r0, r3
 800617c:	f000 faae 	bl	80066dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800618e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800619e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6999      	ldr	r1, [r3, #24]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	021a      	lsls	r2, r3, #8
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	619a      	str	r2, [r3, #24]
      break;
 80061b4:	e043      	b.n	800623e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fb03 	bl	80067c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 0208 	orr.w	r2, r2, #8
 80061d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69da      	ldr	r2, [r3, #28]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0204 	bic.w	r2, r2, #4
 80061e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69d9      	ldr	r1, [r3, #28]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	691a      	ldr	r2, [r3, #16]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	61da      	str	r2, [r3, #28]
      break;
 80061f4:	e023      	b.n	800623e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68b9      	ldr	r1, [r7, #8]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 fb57 	bl	80068b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69da      	ldr	r2, [r3, #28]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69da      	ldr	r2, [r3, #28]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69d9      	ldr	r1, [r3, #28]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	021a      	lsls	r2, r3, #8
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	61da      	str	r2, [r3, #28]
      break;
 8006236:	e002      	b.n	800623e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	75fb      	strb	r3, [r7, #23]
      break;
 800623c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006246:	7dfb      	ldrb	r3, [r7, #23]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <HAL_TIM_ConfigClockSource+0x1c>
 8006268:	2302      	movs	r3, #2
 800626a:	e0b4      	b.n	80063d6 <HAL_TIM_ConfigClockSource+0x186>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800628a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006292:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062a4:	d03e      	beq.n	8006324 <HAL_TIM_ConfigClockSource+0xd4>
 80062a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062aa:	f200 8087 	bhi.w	80063bc <HAL_TIM_ConfigClockSource+0x16c>
 80062ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b2:	f000 8086 	beq.w	80063c2 <HAL_TIM_ConfigClockSource+0x172>
 80062b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ba:	d87f      	bhi.n	80063bc <HAL_TIM_ConfigClockSource+0x16c>
 80062bc:	2b70      	cmp	r3, #112	; 0x70
 80062be:	d01a      	beq.n	80062f6 <HAL_TIM_ConfigClockSource+0xa6>
 80062c0:	2b70      	cmp	r3, #112	; 0x70
 80062c2:	d87b      	bhi.n	80063bc <HAL_TIM_ConfigClockSource+0x16c>
 80062c4:	2b60      	cmp	r3, #96	; 0x60
 80062c6:	d050      	beq.n	800636a <HAL_TIM_ConfigClockSource+0x11a>
 80062c8:	2b60      	cmp	r3, #96	; 0x60
 80062ca:	d877      	bhi.n	80063bc <HAL_TIM_ConfigClockSource+0x16c>
 80062cc:	2b50      	cmp	r3, #80	; 0x50
 80062ce:	d03c      	beq.n	800634a <HAL_TIM_ConfigClockSource+0xfa>
 80062d0:	2b50      	cmp	r3, #80	; 0x50
 80062d2:	d873      	bhi.n	80063bc <HAL_TIM_ConfigClockSource+0x16c>
 80062d4:	2b40      	cmp	r3, #64	; 0x40
 80062d6:	d058      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x13a>
 80062d8:	2b40      	cmp	r3, #64	; 0x40
 80062da:	d86f      	bhi.n	80063bc <HAL_TIM_ConfigClockSource+0x16c>
 80062dc:	2b30      	cmp	r3, #48	; 0x30
 80062de:	d064      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x15a>
 80062e0:	2b30      	cmp	r3, #48	; 0x30
 80062e2:	d86b      	bhi.n	80063bc <HAL_TIM_ConfigClockSource+0x16c>
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	d060      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x15a>
 80062e8:	2b20      	cmp	r3, #32
 80062ea:	d867      	bhi.n	80063bc <HAL_TIM_ConfigClockSource+0x16c>
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d05c      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x15a>
 80062f0:	2b10      	cmp	r3, #16
 80062f2:	d05a      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x15a>
 80062f4:	e062      	b.n	80063bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006306:	f000 fccd 	bl	8006ca4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006318:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	609a      	str	r2, [r3, #8]
      break;
 8006322:	e04f      	b.n	80063c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006334:	f000 fcb6 	bl	8006ca4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006346:	609a      	str	r2, [r3, #8]
      break;
 8006348:	e03c      	b.n	80063c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006356:	461a      	mov	r2, r3
 8006358:	f000 fb74 	bl	8006a44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2150      	movs	r1, #80	; 0x50
 8006362:	4618      	mov	r0, r3
 8006364:	f000 fc83 	bl	8006c6e <TIM_ITRx_SetConfig>
      break;
 8006368:	e02c      	b.n	80063c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006376:	461a      	mov	r2, r3
 8006378:	f000 fbd0 	bl	8006b1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2160      	movs	r1, #96	; 0x60
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fc73 	bl	8006c6e <TIM_ITRx_SetConfig>
      break;
 8006388:	e01c      	b.n	80063c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006396:	461a      	mov	r2, r3
 8006398:	f000 fb54 	bl	8006a44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2140      	movs	r1, #64	; 0x40
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fc63 	bl	8006c6e <TIM_ITRx_SetConfig>
      break;
 80063a8:	e00c      	b.n	80063c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4619      	mov	r1, r3
 80063b4:	4610      	mov	r0, r2
 80063b6:	f000 fc5a 	bl	8006c6e <TIM_ITRx_SetConfig>
      break;
 80063ba:	e003      	b.n	80063c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	73fb      	strb	r3, [r7, #15]
      break;
 80063c0:	e000      	b.n	80063c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
	...

080063e0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b0c      	cmp	r3, #12
 80063f2:	d831      	bhi.n	8006458 <HAL_TIM_ReadCapturedValue+0x78>
 80063f4:	a201      	add	r2, pc, #4	; (adr r2, 80063fc <HAL_TIM_ReadCapturedValue+0x1c>)
 80063f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fa:	bf00      	nop
 80063fc:	08006431 	.word	0x08006431
 8006400:	08006459 	.word	0x08006459
 8006404:	08006459 	.word	0x08006459
 8006408:	08006459 	.word	0x08006459
 800640c:	0800643b 	.word	0x0800643b
 8006410:	08006459 	.word	0x08006459
 8006414:	08006459 	.word	0x08006459
 8006418:	08006459 	.word	0x08006459
 800641c:	08006445 	.word	0x08006445
 8006420:	08006459 	.word	0x08006459
 8006424:	08006459 	.word	0x08006459
 8006428:	08006459 	.word	0x08006459
 800642c:	0800644f 	.word	0x0800644f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006436:	60fb      	str	r3, [r7, #12]

      break;
 8006438:	e00f      	b.n	800645a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006440:	60fb      	str	r3, [r7, #12]

      break;
 8006442:	e00a      	b.n	800645a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644a:	60fb      	str	r3, [r7, #12]

      break;
 800644c:	e005      	b.n	800645a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006454:	60fb      	str	r3, [r7, #12]

      break;
 8006456:	e000      	b.n	800645a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006458:	bf00      	nop
  }

  return tmpreg;
 800645a:	68fb      	ldr	r3, [r7, #12]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a46      	ldr	r2, [pc, #280]	; (80065d0 <TIM_Base_SetConfig+0x12c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d013      	beq.n	80064e4 <TIM_Base_SetConfig+0x40>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c2:	d00f      	beq.n	80064e4 <TIM_Base_SetConfig+0x40>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a43      	ldr	r2, [pc, #268]	; (80065d4 <TIM_Base_SetConfig+0x130>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d00b      	beq.n	80064e4 <TIM_Base_SetConfig+0x40>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a42      	ldr	r2, [pc, #264]	; (80065d8 <TIM_Base_SetConfig+0x134>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d007      	beq.n	80064e4 <TIM_Base_SetConfig+0x40>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a41      	ldr	r2, [pc, #260]	; (80065dc <TIM_Base_SetConfig+0x138>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d003      	beq.n	80064e4 <TIM_Base_SetConfig+0x40>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a40      	ldr	r2, [pc, #256]	; (80065e0 <TIM_Base_SetConfig+0x13c>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d108      	bne.n	80064f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a35      	ldr	r2, [pc, #212]	; (80065d0 <TIM_Base_SetConfig+0x12c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d02b      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006504:	d027      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a32      	ldr	r2, [pc, #200]	; (80065d4 <TIM_Base_SetConfig+0x130>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d023      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a31      	ldr	r2, [pc, #196]	; (80065d8 <TIM_Base_SetConfig+0x134>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d01f      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a30      	ldr	r2, [pc, #192]	; (80065dc <TIM_Base_SetConfig+0x138>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d01b      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a2f      	ldr	r2, [pc, #188]	; (80065e0 <TIM_Base_SetConfig+0x13c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d017      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a2e      	ldr	r2, [pc, #184]	; (80065e4 <TIM_Base_SetConfig+0x140>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d013      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a2d      	ldr	r2, [pc, #180]	; (80065e8 <TIM_Base_SetConfig+0x144>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d00f      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a2c      	ldr	r2, [pc, #176]	; (80065ec <TIM_Base_SetConfig+0x148>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d00b      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a2b      	ldr	r2, [pc, #172]	; (80065f0 <TIM_Base_SetConfig+0x14c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d007      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a2a      	ldr	r2, [pc, #168]	; (80065f4 <TIM_Base_SetConfig+0x150>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d003      	beq.n	8006556 <TIM_Base_SetConfig+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a29      	ldr	r2, [pc, #164]	; (80065f8 <TIM_Base_SetConfig+0x154>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d108      	bne.n	8006568 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800655c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4313      	orrs	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a10      	ldr	r2, [pc, #64]	; (80065d0 <TIM_Base_SetConfig+0x12c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d003      	beq.n	800659c <TIM_Base_SetConfig+0xf8>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a12      	ldr	r2, [pc, #72]	; (80065e0 <TIM_Base_SetConfig+0x13c>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d103      	bne.n	80065a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	691a      	ldr	r2, [r3, #16]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d105      	bne.n	80065c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f023 0201 	bic.w	r2, r3, #1
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	611a      	str	r2, [r3, #16]
  }
}
 80065c2:	bf00      	nop
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	40010000 	.word	0x40010000
 80065d4:	40000400 	.word	0x40000400
 80065d8:	40000800 	.word	0x40000800
 80065dc:	40000c00 	.word	0x40000c00
 80065e0:	40010400 	.word	0x40010400
 80065e4:	40014000 	.word	0x40014000
 80065e8:	40014400 	.word	0x40014400
 80065ec:	40014800 	.word	0x40014800
 80065f0:	40001800 	.word	0x40001800
 80065f4:	40001c00 	.word	0x40001c00
 80065f8:	40002000 	.word	0x40002000

080065fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	f023 0201 	bic.w	r2, r3, #1
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 0303 	bic.w	r3, r3, #3
 8006632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f023 0302 	bic.w	r3, r3, #2
 8006644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	4313      	orrs	r3, r2
 800664e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a20      	ldr	r2, [pc, #128]	; (80066d4 <TIM_OC1_SetConfig+0xd8>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d003      	beq.n	8006660 <TIM_OC1_SetConfig+0x64>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a1f      	ldr	r2, [pc, #124]	; (80066d8 <TIM_OC1_SetConfig+0xdc>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d10c      	bne.n	800667a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f023 0308 	bic.w	r3, r3, #8
 8006666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	4313      	orrs	r3, r2
 8006670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f023 0304 	bic.w	r3, r3, #4
 8006678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a15      	ldr	r2, [pc, #84]	; (80066d4 <TIM_OC1_SetConfig+0xd8>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d003      	beq.n	800668a <TIM_OC1_SetConfig+0x8e>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a14      	ldr	r2, [pc, #80]	; (80066d8 <TIM_OC1_SetConfig+0xdc>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d111      	bne.n	80066ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	621a      	str	r2, [r3, #32]
}
 80066c8:	bf00      	nop
 80066ca:	371c      	adds	r7, #28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	40010000 	.word	0x40010000
 80066d8:	40010400 	.word	0x40010400

080066dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066dc:	b480      	push	{r7}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	f023 0210 	bic.w	r2, r3, #16
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800670a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	021b      	lsls	r3, r3, #8
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	4313      	orrs	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	f023 0320 	bic.w	r3, r3, #32
 8006726:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	011b      	lsls	r3, r3, #4
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	4313      	orrs	r3, r2
 8006732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a22      	ldr	r2, [pc, #136]	; (80067c0 <TIM_OC2_SetConfig+0xe4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d003      	beq.n	8006744 <TIM_OC2_SetConfig+0x68>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a21      	ldr	r2, [pc, #132]	; (80067c4 <TIM_OC2_SetConfig+0xe8>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d10d      	bne.n	8006760 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800674a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	011b      	lsls	r3, r3, #4
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	4313      	orrs	r3, r2
 8006756:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800675e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a17      	ldr	r2, [pc, #92]	; (80067c0 <TIM_OC2_SetConfig+0xe4>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d003      	beq.n	8006770 <TIM_OC2_SetConfig+0x94>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a16      	ldr	r2, [pc, #88]	; (80067c4 <TIM_OC2_SetConfig+0xe8>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d113      	bne.n	8006798 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006776:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800677e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	4313      	orrs	r3, r2
 800678a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	4313      	orrs	r3, r2
 8006796:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	621a      	str	r2, [r3, #32]
}
 80067b2:	bf00      	nop
 80067b4:	371c      	adds	r7, #28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	40010000 	.word	0x40010000
 80067c4:	40010400 	.word	0x40010400

080067c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 0303 	bic.w	r3, r3, #3
 80067fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	4313      	orrs	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	021b      	lsls	r3, r3, #8
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	4313      	orrs	r3, r2
 800681c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a21      	ldr	r2, [pc, #132]	; (80068a8 <TIM_OC3_SetConfig+0xe0>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d003      	beq.n	800682e <TIM_OC3_SetConfig+0x66>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a20      	ldr	r2, [pc, #128]	; (80068ac <TIM_OC3_SetConfig+0xe4>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d10d      	bne.n	800684a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006834:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	021b      	lsls	r3, r3, #8
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	4313      	orrs	r3, r2
 8006840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006848:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a16      	ldr	r2, [pc, #88]	; (80068a8 <TIM_OC3_SetConfig+0xe0>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d003      	beq.n	800685a <TIM_OC3_SetConfig+0x92>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a15      	ldr	r2, [pc, #84]	; (80068ac <TIM_OC3_SetConfig+0xe4>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d113      	bne.n	8006882 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	011b      	lsls	r3, r3, #4
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	4313      	orrs	r3, r2
 8006874:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	4313      	orrs	r3, r2
 8006880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	621a      	str	r2, [r3, #32]
}
 800689c:	bf00      	nop
 800689e:	371c      	adds	r7, #28
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr
 80068a8:	40010000 	.word	0x40010000
 80068ac:	40010400 	.word	0x40010400

080068b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b087      	sub	sp, #28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	021b      	lsls	r3, r3, #8
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	031b      	lsls	r3, r3, #12
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	4313      	orrs	r3, r2
 8006906:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a12      	ldr	r2, [pc, #72]	; (8006954 <TIM_OC4_SetConfig+0xa4>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d003      	beq.n	8006918 <TIM_OC4_SetConfig+0x68>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a11      	ldr	r2, [pc, #68]	; (8006958 <TIM_OC4_SetConfig+0xa8>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d109      	bne.n	800692c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800691e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	695b      	ldr	r3, [r3, #20]
 8006924:	019b      	lsls	r3, r3, #6
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	4313      	orrs	r3, r2
 800692a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	621a      	str	r2, [r3, #32]
}
 8006946:	bf00      	nop
 8006948:	371c      	adds	r7, #28
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	40010000 	.word	0x40010000
 8006958:	40010400 	.word	0x40010400

0800695c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	f023 0201 	bic.w	r2, r3, #1
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	4a28      	ldr	r2, [pc, #160]	; (8006a28 <TIM_TI1_SetConfig+0xcc>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d01b      	beq.n	80069c2 <TIM_TI1_SetConfig+0x66>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006990:	d017      	beq.n	80069c2 <TIM_TI1_SetConfig+0x66>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	4a25      	ldr	r2, [pc, #148]	; (8006a2c <TIM_TI1_SetConfig+0xd0>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d013      	beq.n	80069c2 <TIM_TI1_SetConfig+0x66>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4a24      	ldr	r2, [pc, #144]	; (8006a30 <TIM_TI1_SetConfig+0xd4>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d00f      	beq.n	80069c2 <TIM_TI1_SetConfig+0x66>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	4a23      	ldr	r2, [pc, #140]	; (8006a34 <TIM_TI1_SetConfig+0xd8>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d00b      	beq.n	80069c2 <TIM_TI1_SetConfig+0x66>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4a22      	ldr	r2, [pc, #136]	; (8006a38 <TIM_TI1_SetConfig+0xdc>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d007      	beq.n	80069c2 <TIM_TI1_SetConfig+0x66>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	4a21      	ldr	r2, [pc, #132]	; (8006a3c <TIM_TI1_SetConfig+0xe0>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d003      	beq.n	80069c2 <TIM_TI1_SetConfig+0x66>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4a20      	ldr	r2, [pc, #128]	; (8006a40 <TIM_TI1_SetConfig+0xe4>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d101      	bne.n	80069c6 <TIM_TI1_SetConfig+0x6a>
 80069c2:	2301      	movs	r3, #1
 80069c4:	e000      	b.n	80069c8 <TIM_TI1_SetConfig+0x6c>
 80069c6:	2300      	movs	r3, #0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d008      	beq.n	80069de <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f023 0303 	bic.w	r3, r3, #3
 80069d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4313      	orrs	r3, r2
 80069da:	617b      	str	r3, [r7, #20]
 80069dc:	e003      	b.n	80069e6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f043 0301 	orr.w	r3, r3, #1
 80069e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	011b      	lsls	r3, r3, #4
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f023 030a 	bic.w	r3, r3, #10
 8006a00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	f003 030a 	and.w	r3, r3, #10
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	621a      	str	r2, [r3, #32]
}
 8006a1a:	bf00      	nop
 8006a1c:	371c      	adds	r7, #28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	40010000 	.word	0x40010000
 8006a2c:	40000400 	.word	0x40000400
 8006a30:	40000800 	.word	0x40000800
 8006a34:	40000c00 	.word	0x40000c00
 8006a38:	40010400 	.word	0x40010400
 8006a3c:	40014000 	.word	0x40014000
 8006a40:	40001800 	.word	0x40001800

08006a44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b087      	sub	sp, #28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	f023 0201 	bic.w	r2, r3, #1
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f023 030a 	bic.w	r3, r3, #10
 8006a80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	621a      	str	r2, [r3, #32]
}
 8006a96:	bf00      	nop
 8006a98:	371c      	adds	r7, #28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b087      	sub	sp, #28
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	607a      	str	r2, [r7, #4]
 8006aae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	f023 0210 	bic.w	r2, r3, #16
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	021b      	lsls	r3, r3, #8
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ae0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	031b      	lsls	r3, r3, #12
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006af4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	011b      	lsls	r3, r3, #4
 8006afa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	621a      	str	r2, [r3, #32]
}
 8006b10:	bf00      	nop
 8006b12:	371c      	adds	r7, #28
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	f023 0210 	bic.w	r2, r3, #16
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	031b      	lsls	r3, r3, #12
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b58:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	011b      	lsls	r3, r3, #4
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	621a      	str	r2, [r3, #32]
}
 8006b70:	bf00      	nop
 8006b72:	371c      	adds	r7, #28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
 8006b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f023 0303 	bic.w	r3, r3, #3
 8006ba8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bb8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	011b      	lsls	r3, r3, #4
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006bcc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	021b      	lsls	r3, r3, #8
 8006bd2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	621a      	str	r2, [r3, #32]
}
 8006be8:	bf00      	nop
 8006bea:	371c      	adds	r7, #28
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	021b      	lsls	r3, r3, #8
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c32:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	031b      	lsls	r3, r3, #12
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006c46:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	031b      	lsls	r3, r3, #12
 8006c4c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	621a      	str	r2, [r3, #32]
}
 8006c62:	bf00      	nop
 8006c64:	371c      	adds	r7, #28
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b085      	sub	sp, #20
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	f043 0307 	orr.w	r3, r3, #7
 8006c90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	609a      	str	r2, [r3, #8]
}
 8006c98:	bf00      	nop
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	021a      	lsls	r2, r3, #8
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	609a      	str	r2, [r3, #8]
}
 8006cd8:	bf00      	nop
 8006cda:	371c      	adds	r7, #28
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f003 031f 	and.w	r3, r3, #31
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6a1a      	ldr	r2, [r3, #32]
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	43db      	mvns	r3, r3
 8006d06:	401a      	ands	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6a1a      	ldr	r2, [r3, #32]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f003 031f 	and.w	r3, r3, #31
 8006d16:	6879      	ldr	r1, [r7, #4]
 8006d18:	fa01 f303 	lsl.w	r3, r1, r3
 8006d1c:	431a      	orrs	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	621a      	str	r2, [r3, #32]
}
 8006d22:	bf00      	nop
 8006d24:	371c      	adds	r7, #28
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
	...

08006d30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d101      	bne.n	8006d48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d44:	2302      	movs	r3, #2
 8006d46:	e05a      	b.n	8006dfe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a21      	ldr	r2, [pc, #132]	; (8006e0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d022      	beq.n	8006dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d94:	d01d      	beq.n	8006dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a1d      	ldr	r2, [pc, #116]	; (8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d018      	beq.n	8006dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a1b      	ldr	r2, [pc, #108]	; (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d013      	beq.n	8006dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a1a      	ldr	r2, [pc, #104]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d00e      	beq.n	8006dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a18      	ldr	r2, [pc, #96]	; (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d009      	beq.n	8006dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a17      	ldr	r2, [pc, #92]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d004      	beq.n	8006dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a15      	ldr	r2, [pc, #84]	; (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d10c      	bne.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	40010000 	.word	0x40010000
 8006e10:	40000400 	.word	0x40000400
 8006e14:	40000800 	.word	0x40000800
 8006e18:	40000c00 	.word	0x40000c00
 8006e1c:	40010400 	.word	0x40010400
 8006e20:	40014000 	.word	0x40014000
 8006e24:	40001800 	.word	0x40001800

08006e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e042      	b.n	8006ee8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d106      	bne.n	8006e7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7fc fc6c 	bl	8003754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2224      	movs	r2, #36	; 0x24
 8006e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68da      	ldr	r2, [r3, #12]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fdff 	bl	8007a98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	691a      	ldr	r2, [r3, #16]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ea8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	695a      	ldr	r2, [r3, #20]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006eb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68da      	ldr	r2, [r3, #12]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ec8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2220      	movs	r2, #32
 8006edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b08a      	sub	sp, #40	; 0x28
 8006ef4:	af02      	add	r7, sp, #8
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	603b      	str	r3, [r7, #0]
 8006efc:	4613      	mov	r3, r2
 8006efe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b20      	cmp	r3, #32
 8006f0e:	d175      	bne.n	8006ffc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d002      	beq.n	8006f1c <HAL_UART_Transmit+0x2c>
 8006f16:	88fb      	ldrh	r3, [r7, #6]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d101      	bne.n	8006f20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e06e      	b.n	8006ffe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2221      	movs	r2, #33	; 0x21
 8006f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f2e:	f7fc ffd3 	bl	8003ed8 <HAL_GetTick>
 8006f32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	88fa      	ldrh	r2, [r7, #6]
 8006f38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	88fa      	ldrh	r2, [r7, #6]
 8006f3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f48:	d108      	bne.n	8006f5c <HAL_UART_Transmit+0x6c>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d104      	bne.n	8006f5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006f52:	2300      	movs	r3, #0
 8006f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	61bb      	str	r3, [r7, #24]
 8006f5a:	e003      	b.n	8006f64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f60:	2300      	movs	r3, #0
 8006f62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f64:	e02e      	b.n	8006fc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	2180      	movs	r1, #128	; 0x80
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 fb9b 	bl	80076ac <UART_WaitOnFlagUntilTimeout>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d005      	beq.n	8006f88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e03a      	b.n	8006ffe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10b      	bne.n	8006fa6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	461a      	mov	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	3302      	adds	r3, #2
 8006fa2:	61bb      	str	r3, [r7, #24]
 8006fa4:	e007      	b.n	8006fb6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	781a      	ldrb	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1cb      	bne.n	8006f66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	2140      	movs	r1, #64	; 0x40
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 fb67 	bl	80076ac <UART_WaitOnFlagUntilTimeout>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d005      	beq.n	8006ff0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e006      	b.n	8006ffe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	e000      	b.n	8006ffe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006ffc:	2302      	movs	r3, #2
  }
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3720      	adds	r7, #32
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b08a      	sub	sp, #40	; 0x28
 800700a:	af02      	add	r7, sp, #8
 800700c:	60f8      	str	r0, [r7, #12]
 800700e:	60b9      	str	r1, [r7, #8]
 8007010:	603b      	str	r3, [r7, #0]
 8007012:	4613      	mov	r3, r2
 8007014:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007016:	2300      	movs	r3, #0
 8007018:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b20      	cmp	r3, #32
 8007024:	f040 8081 	bne.w	800712a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d002      	beq.n	8007034 <HAL_UART_Receive+0x2e>
 800702e:	88fb      	ldrh	r3, [r7, #6]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e079      	b.n	800712c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2222      	movs	r2, #34	; 0x22
 8007042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800704c:	f7fc ff44 	bl	8003ed8 <HAL_GetTick>
 8007050:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	88fa      	ldrh	r2, [r7, #6]
 8007056:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	88fa      	ldrh	r2, [r7, #6]
 800705c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007066:	d108      	bne.n	800707a <HAL_UART_Receive+0x74>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d104      	bne.n	800707a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8007070:	2300      	movs	r3, #0
 8007072:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	61bb      	str	r3, [r7, #24]
 8007078:	e003      	b.n	8007082 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800707e:	2300      	movs	r3, #0
 8007080:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007082:	e047      	b.n	8007114 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2200      	movs	r2, #0
 800708c:	2120      	movs	r1, #32
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f000 fb0c 	bl	80076ac <UART_WaitOnFlagUntilTimeout>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d005      	beq.n	80070a6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2220      	movs	r2, #32
 800709e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e042      	b.n	800712c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10c      	bne.n	80070c6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	3302      	adds	r3, #2
 80070c2:	61bb      	str	r3, [r7, #24]
 80070c4:	e01f      	b.n	8007106 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ce:	d007      	beq.n	80070e0 <HAL_UART_Receive+0xda>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10a      	bne.n	80070ee <HAL_UART_Receive+0xe8>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d106      	bne.n	80070ee <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	701a      	strb	r2, [r3, #0]
 80070ec:	e008      	b.n	8007100 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	3301      	adds	r3, #1
 8007104:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800710a:	b29b      	uxth	r3, r3
 800710c:	3b01      	subs	r3, #1
 800710e:	b29a      	uxth	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007118:	b29b      	uxth	r3, r3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1b2      	bne.n	8007084 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2220      	movs	r2, #32
 8007122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	e000      	b.n	800712c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800712a:	2302      	movs	r3, #2
  }
}
 800712c:	4618      	mov	r0, r3
 800712e:	3720      	adds	r7, #32
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b0ba      	sub	sp, #232	; 0xe8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800715a:	2300      	movs	r3, #0
 800715c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007160:	2300      	movs	r3, #0
 8007162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800716a:	f003 030f 	and.w	r3, r3, #15
 800716e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007172:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10f      	bne.n	800719a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800717a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800717e:	f003 0320 	and.w	r3, r3, #32
 8007182:	2b00      	cmp	r3, #0
 8007184:	d009      	beq.n	800719a <HAL_UART_IRQHandler+0x66>
 8007186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800718a:	f003 0320 	and.w	r3, r3, #32
 800718e:	2b00      	cmp	r3, #0
 8007190:	d003      	beq.n	800719a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fbc2 	bl	800791c <UART_Receive_IT>
      return;
 8007198:	e25b      	b.n	8007652 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800719a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f000 80de 	beq.w	8007360 <HAL_UART_IRQHandler+0x22c>
 80071a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d106      	bne.n	80071be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80071b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f000 80d1 	beq.w	8007360 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80071be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00b      	beq.n	80071e2 <HAL_UART_IRQHandler+0xae>
 80071ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d005      	beq.n	80071e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071da:	f043 0201 	orr.w	r2, r3, #1
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e6:	f003 0304 	and.w	r3, r3, #4
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00b      	beq.n	8007206 <HAL_UART_IRQHandler+0xd2>
 80071ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d005      	beq.n	8007206 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fe:	f043 0202 	orr.w	r2, r3, #2
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00b      	beq.n	800722a <HAL_UART_IRQHandler+0xf6>
 8007212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d005      	beq.n	800722a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007222:	f043 0204 	orr.w	r2, r3, #4
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800722a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800722e:	f003 0308 	and.w	r3, r3, #8
 8007232:	2b00      	cmp	r3, #0
 8007234:	d011      	beq.n	800725a <HAL_UART_IRQHandler+0x126>
 8007236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800723a:	f003 0320 	and.w	r3, r3, #32
 800723e:	2b00      	cmp	r3, #0
 8007240:	d105      	bne.n	800724e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	2b00      	cmp	r3, #0
 800724c:	d005      	beq.n	800725a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007252:	f043 0208 	orr.w	r2, r3, #8
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 81f2 	beq.w	8007648 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007268:	f003 0320 	and.w	r3, r3, #32
 800726c:	2b00      	cmp	r3, #0
 800726e:	d008      	beq.n	8007282 <HAL_UART_IRQHandler+0x14e>
 8007270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007274:	f003 0320 	and.w	r3, r3, #32
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fb4d 	bl	800791c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728c:	2b40      	cmp	r3, #64	; 0x40
 800728e:	bf0c      	ite	eq
 8007290:	2301      	moveq	r3, #1
 8007292:	2300      	movne	r3, #0
 8007294:	b2db      	uxtb	r3, r3
 8007296:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729e:	f003 0308 	and.w	r3, r3, #8
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d103      	bne.n	80072ae <HAL_UART_IRQHandler+0x17a>
 80072a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d04f      	beq.n	800734e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fa55 	bl	800775e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072be:	2b40      	cmp	r3, #64	; 0x40
 80072c0:	d141      	bne.n	8007346 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3314      	adds	r3, #20
 80072c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072d0:	e853 3f00 	ldrex	r3, [r3]
 80072d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80072d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3314      	adds	r3, #20
 80072ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80072f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072fe:	e841 2300 	strex	r3, r2, [r1]
 8007302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1d9      	bne.n	80072c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007312:	2b00      	cmp	r3, #0
 8007314:	d013      	beq.n	800733e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731a:	4a7e      	ldr	r2, [pc, #504]	; (8007514 <HAL_UART_IRQHandler+0x3e0>)
 800731c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007322:	4618      	mov	r0, r3
 8007324:	f7fc ff36 	bl	8004194 <HAL_DMA_Abort_IT>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d016      	beq.n	800735c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007338:	4610      	mov	r0, r2
 800733a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800733c:	e00e      	b.n	800735c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f99e 	bl	8007680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007344:	e00a      	b.n	800735c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f99a 	bl	8007680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800734c:	e006      	b.n	800735c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f996 	bl	8007680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800735a:	e175      	b.n	8007648 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800735c:	bf00      	nop
    return;
 800735e:	e173      	b.n	8007648 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007364:	2b01      	cmp	r3, #1
 8007366:	f040 814f 	bne.w	8007608 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800736a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800736e:	f003 0310 	and.w	r3, r3, #16
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 8148 	beq.w	8007608 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800737c:	f003 0310 	and.w	r3, r3, #16
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 8141 	beq.w	8007608 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007386:	2300      	movs	r3, #0
 8007388:	60bb      	str	r3, [r7, #8]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	60bb      	str	r3, [r7, #8]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	60bb      	str	r3, [r7, #8]
 800739a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a6:	2b40      	cmp	r3, #64	; 0x40
 80073a8:	f040 80b6 	bne.w	8007518 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 8145 	beq.w	800764c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073ca:	429a      	cmp	r2, r3
 80073cc:	f080 813e 	bcs.w	800764c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073e2:	f000 8088 	beq.w	80074f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	330c      	adds	r3, #12
 80073ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80073fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	330c      	adds	r3, #12
 800740e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007412:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800741e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800742a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1d9      	bne.n	80073e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3314      	adds	r3, #20
 8007438:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007444:	f023 0301 	bic.w	r3, r3, #1
 8007448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3314      	adds	r3, #20
 8007452:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007456:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800745a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800745e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007462:	e841 2300 	strex	r3, r2, [r1]
 8007466:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1e1      	bne.n	8007432 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3314      	adds	r3, #20
 8007474:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007478:	e853 3f00 	ldrex	r3, [r3]
 800747c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800747e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3314      	adds	r3, #20
 800748e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007492:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007494:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007498:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80074a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1e3      	bne.n	800746e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2220      	movs	r2, #32
 80074aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	330c      	adds	r3, #12
 80074ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074be:	e853 3f00 	ldrex	r3, [r3]
 80074c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074c6:	f023 0310 	bic.w	r3, r3, #16
 80074ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	330c      	adds	r3, #12
 80074d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80074d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80074da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074e0:	e841 2300 	strex	r3, r2, [r1]
 80074e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1e3      	bne.n	80074b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fc fddf 	bl	80040b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2202      	movs	r2, #2
 80074fa:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007504:	b29b      	uxth	r3, r3
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	b29b      	uxth	r3, r3
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f8c1 	bl	8007694 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007512:	e09b      	b.n	800764c <HAL_UART_IRQHandler+0x518>
 8007514:	08007825 	.word	0x08007825
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007520:	b29b      	uxth	r3, r3
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800752c:	b29b      	uxth	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	f000 808e 	beq.w	8007650 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007534:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 8089 	beq.w	8007650 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	330c      	adds	r3, #12
 8007544:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800754e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007550:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007554:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	330c      	adds	r3, #12
 800755e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007562:	647a      	str	r2, [r7, #68]	; 0x44
 8007564:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007566:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007568:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800756a:	e841 2300 	strex	r3, r2, [r1]
 800756e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1e3      	bne.n	800753e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3314      	adds	r3, #20
 800757c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007580:	e853 3f00 	ldrex	r3, [r3]
 8007584:	623b      	str	r3, [r7, #32]
   return(result);
 8007586:	6a3b      	ldr	r3, [r7, #32]
 8007588:	f023 0301 	bic.w	r3, r3, #1
 800758c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3314      	adds	r3, #20
 8007596:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800759a:	633a      	str	r2, [r7, #48]	; 0x30
 800759c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075a2:	e841 2300 	strex	r3, r2, [r1]
 80075a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1e3      	bne.n	8007576 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2220      	movs	r2, #32
 80075b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	330c      	adds	r3, #12
 80075c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	e853 3f00 	ldrex	r3, [r3]
 80075ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f023 0310 	bic.w	r3, r3, #16
 80075d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	330c      	adds	r3, #12
 80075dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80075e0:	61fa      	str	r2, [r7, #28]
 80075e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e4:	69b9      	ldr	r1, [r7, #24]
 80075e6:	69fa      	ldr	r2, [r7, #28]
 80075e8:	e841 2300 	strex	r3, r2, [r1]
 80075ec:	617b      	str	r3, [r7, #20]
   return(result);
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1e3      	bne.n	80075bc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f847 	bl	8007694 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007606:	e023      	b.n	8007650 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800760c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007610:	2b00      	cmp	r3, #0
 8007612:	d009      	beq.n	8007628 <HAL_UART_IRQHandler+0x4f4>
 8007614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f913 	bl	800784c <UART_Transmit_IT>
    return;
 8007626:	e014      	b.n	8007652 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800762c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00e      	beq.n	8007652 <HAL_UART_IRQHandler+0x51e>
 8007634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800763c:	2b00      	cmp	r3, #0
 800763e:	d008      	beq.n	8007652 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 f953 	bl	80078ec <UART_EndTransmit_IT>
    return;
 8007646:	e004      	b.n	8007652 <HAL_UART_IRQHandler+0x51e>
    return;
 8007648:	bf00      	nop
 800764a:	e002      	b.n	8007652 <HAL_UART_IRQHandler+0x51e>
      return;
 800764c:	bf00      	nop
 800764e:	e000      	b.n	8007652 <HAL_UART_IRQHandler+0x51e>
      return;
 8007650:	bf00      	nop
  }
}
 8007652:	37e8      	adds	r7, #232	; 0xe8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	603b      	str	r3, [r7, #0]
 80076b8:	4613      	mov	r3, r2
 80076ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076bc:	e03b      	b.n	8007736 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c4:	d037      	beq.n	8007736 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076c6:	f7fc fc07 	bl	8003ed8 <HAL_GetTick>
 80076ca:	4602      	mov	r2, r0
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	1ad3      	subs	r3, r2, r3
 80076d0:	6a3a      	ldr	r2, [r7, #32]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d302      	bcc.n	80076dc <UART_WaitOnFlagUntilTimeout+0x30>
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	e03a      	b.n	8007756 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	f003 0304 	and.w	r3, r3, #4
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d023      	beq.n	8007736 <UART_WaitOnFlagUntilTimeout+0x8a>
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	2b80      	cmp	r3, #128	; 0x80
 80076f2:	d020      	beq.n	8007736 <UART_WaitOnFlagUntilTimeout+0x8a>
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2b40      	cmp	r3, #64	; 0x40
 80076f8:	d01d      	beq.n	8007736 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0308 	and.w	r3, r3, #8
 8007704:	2b08      	cmp	r3, #8
 8007706:	d116      	bne.n	8007736 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007708:	2300      	movs	r3, #0
 800770a:	617b      	str	r3, [r7, #20]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	617b      	str	r3, [r7, #20]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	617b      	str	r3, [r7, #20]
 800771c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 f81d 	bl	800775e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2208      	movs	r2, #8
 8007728:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e00f      	b.n	8007756 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	4013      	ands	r3, r2
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	429a      	cmp	r2, r3
 8007744:	bf0c      	ite	eq
 8007746:	2301      	moveq	r3, #1
 8007748:	2300      	movne	r3, #0
 800774a:	b2db      	uxtb	r3, r3
 800774c:	461a      	mov	r2, r3
 800774e:	79fb      	ldrb	r3, [r7, #7]
 8007750:	429a      	cmp	r2, r3
 8007752:	d0b4      	beq.n	80076be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3718      	adds	r7, #24
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800775e:	b480      	push	{r7}
 8007760:	b095      	sub	sp, #84	; 0x54
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	330c      	adds	r3, #12
 800776c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007770:	e853 3f00 	ldrex	r3, [r3]
 8007774:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800777c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	330c      	adds	r3, #12
 8007784:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007786:	643a      	str	r2, [r7, #64]	; 0x40
 8007788:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800778c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800778e:	e841 2300 	strex	r3, r2, [r1]
 8007792:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1e5      	bne.n	8007766 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3314      	adds	r3, #20
 80077a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	f023 0301 	bic.w	r3, r3, #1
 80077b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3314      	adds	r3, #20
 80077b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077c2:	e841 2300 	strex	r3, r2, [r1]
 80077c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1e5      	bne.n	800779a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d119      	bne.n	800780a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	330c      	adds	r3, #12
 80077dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	e853 3f00 	ldrex	r3, [r3]
 80077e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f023 0310 	bic.w	r3, r3, #16
 80077ec:	647b      	str	r3, [r7, #68]	; 0x44
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	330c      	adds	r3, #12
 80077f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077f6:	61ba      	str	r2, [r7, #24]
 80077f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fa:	6979      	ldr	r1, [r7, #20]
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	e841 2300 	strex	r3, r2, [r1]
 8007802:	613b      	str	r3, [r7, #16]
   return(result);
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1e5      	bne.n	80077d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2220      	movs	r2, #32
 800780e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007818:	bf00      	nop
 800781a:	3754      	adds	r7, #84	; 0x54
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007830:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f7ff ff1e 	bl	8007680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007844:	bf00      	nop
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b21      	cmp	r3, #33	; 0x21
 800785e:	d13e      	bne.n	80078de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007868:	d114      	bne.n	8007894 <UART_Transmit_IT+0x48>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d110      	bne.n	8007894 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	881b      	ldrh	r3, [r3, #0]
 800787c:	461a      	mov	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007886:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	1c9a      	adds	r2, r3, #2
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	621a      	str	r2, [r3, #32]
 8007892:	e008      	b.n	80078a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	1c59      	adds	r1, r3, #1
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	6211      	str	r1, [r2, #32]
 800789e:	781a      	ldrb	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	3b01      	subs	r3, #1
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	4619      	mov	r1, r3
 80078b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10f      	bne.n	80078da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68da      	ldr	r2, [r3, #12]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	e000      	b.n	80078e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80078de:	2302      	movs	r3, #2
  }
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3714      	adds	r7, #20
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68da      	ldr	r2, [r3, #12]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007902:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2220      	movs	r2, #32
 8007908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7ff fea3 	bl	8007658 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b08c      	sub	sp, #48	; 0x30
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800792a:	b2db      	uxtb	r3, r3
 800792c:	2b22      	cmp	r3, #34	; 0x22
 800792e:	f040 80ae 	bne.w	8007a8e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800793a:	d117      	bne.n	800796c <UART_Receive_IT+0x50>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d113      	bne.n	800796c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007944:	2300      	movs	r3, #0
 8007946:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	b29b      	uxth	r3, r3
 8007956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800795a:	b29a      	uxth	r2, r3
 800795c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007964:	1c9a      	adds	r2, r3, #2
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	629a      	str	r2, [r3, #40]	; 0x28
 800796a:	e026      	b.n	80079ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007970:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007972:	2300      	movs	r3, #0
 8007974:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800797e:	d007      	beq.n	8007990 <UART_Receive_IT+0x74>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10a      	bne.n	800799e <UART_Receive_IT+0x82>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d106      	bne.n	800799e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	b2da      	uxtb	r2, r3
 8007998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799a:	701a      	strb	r2, [r3, #0]
 800799c:	e008      	b.n	80079b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079be:	b29b      	uxth	r3, r3
 80079c0:	3b01      	subs	r3, #1
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	4619      	mov	r1, r3
 80079c8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d15d      	bne.n	8007a8a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68da      	ldr	r2, [r3, #12]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 0220 	bic.w	r2, r2, #32
 80079dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68da      	ldr	r2, [r3, #12]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	695a      	ldr	r2, [r3, #20]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 0201 	bic.w	r2, r2, #1
 80079fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2220      	movs	r2, #32
 8007a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d135      	bne.n	8007a80 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	330c      	adds	r3, #12
 8007a20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	e853 3f00 	ldrex	r3, [r3]
 8007a28:	613b      	str	r3, [r7, #16]
   return(result);
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f023 0310 	bic.w	r3, r3, #16
 8007a30:	627b      	str	r3, [r7, #36]	; 0x24
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	330c      	adds	r3, #12
 8007a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a3a:	623a      	str	r2, [r7, #32]
 8007a3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	69f9      	ldr	r1, [r7, #28]
 8007a40:	6a3a      	ldr	r2, [r7, #32]
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e5      	bne.n	8007a1a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0310 	and.w	r3, r3, #16
 8007a58:	2b10      	cmp	r3, #16
 8007a5a:	d10a      	bne.n	8007a72 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	60fb      	str	r3, [r7, #12]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	60fb      	str	r3, [r7, #12]
 8007a70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f7ff fe0b 	bl	8007694 <HAL_UARTEx_RxEventCallback>
 8007a7e:	e002      	b.n	8007a86 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7ff fdf3 	bl	800766c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	e002      	b.n	8007a90 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	e000      	b.n	8007a90 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007a8e:	2302      	movs	r3, #2
  }
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3730      	adds	r7, #48	; 0x30
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a9c:	b0c0      	sub	sp, #256	; 0x100
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab4:	68d9      	ldr	r1, [r3, #12]
 8007ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	ea40 0301 	orr.w	r3, r0, r1
 8007ac0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	431a      	orrs	r2, r3
 8007ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007af0:	f021 010c 	bic.w	r1, r1, #12
 8007af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007afe:	430b      	orrs	r3, r1
 8007b00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b12:	6999      	ldr	r1, [r3, #24]
 8007b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	ea40 0301 	orr.w	r3, r0, r1
 8007b1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	4b8f      	ldr	r3, [pc, #572]	; (8007d64 <UART_SetConfig+0x2cc>)
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d005      	beq.n	8007b38 <UART_SetConfig+0xa0>
 8007b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	4b8d      	ldr	r3, [pc, #564]	; (8007d68 <UART_SetConfig+0x2d0>)
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d104      	bne.n	8007b42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b38:	f7fd f948 	bl	8004dcc <HAL_RCC_GetPCLK2Freq>
 8007b3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007b40:	e003      	b.n	8007b4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b42:	f7fd f92f 	bl	8004da4 <HAL_RCC_GetPCLK1Freq>
 8007b46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b54:	f040 810c 	bne.w	8007d70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007b66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007b6a:	4622      	mov	r2, r4
 8007b6c:	462b      	mov	r3, r5
 8007b6e:	1891      	adds	r1, r2, r2
 8007b70:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b72:	415b      	adcs	r3, r3
 8007b74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	eb12 0801 	adds.w	r8, r2, r1
 8007b80:	4629      	mov	r1, r5
 8007b82:	eb43 0901 	adc.w	r9, r3, r1
 8007b86:	f04f 0200 	mov.w	r2, #0
 8007b8a:	f04f 0300 	mov.w	r3, #0
 8007b8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b9a:	4690      	mov	r8, r2
 8007b9c:	4699      	mov	r9, r3
 8007b9e:	4623      	mov	r3, r4
 8007ba0:	eb18 0303 	adds.w	r3, r8, r3
 8007ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ba8:	462b      	mov	r3, r5
 8007baa:	eb49 0303 	adc.w	r3, r9, r3
 8007bae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007bbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007bc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	18db      	adds	r3, r3, r3
 8007bca:	653b      	str	r3, [r7, #80]	; 0x50
 8007bcc:	4613      	mov	r3, r2
 8007bce:	eb42 0303 	adc.w	r3, r2, r3
 8007bd2:	657b      	str	r3, [r7, #84]	; 0x54
 8007bd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007bd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007bdc:	f7f9 f854 	bl	8000c88 <__aeabi_uldivmod>
 8007be0:	4602      	mov	r2, r0
 8007be2:	460b      	mov	r3, r1
 8007be4:	4b61      	ldr	r3, [pc, #388]	; (8007d6c <UART_SetConfig+0x2d4>)
 8007be6:	fba3 2302 	umull	r2, r3, r3, r2
 8007bea:	095b      	lsrs	r3, r3, #5
 8007bec:	011c      	lsls	r4, r3, #4
 8007bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bf8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007bfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007c00:	4642      	mov	r2, r8
 8007c02:	464b      	mov	r3, r9
 8007c04:	1891      	adds	r1, r2, r2
 8007c06:	64b9      	str	r1, [r7, #72]	; 0x48
 8007c08:	415b      	adcs	r3, r3
 8007c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007c10:	4641      	mov	r1, r8
 8007c12:	eb12 0a01 	adds.w	sl, r2, r1
 8007c16:	4649      	mov	r1, r9
 8007c18:	eb43 0b01 	adc.w	fp, r3, r1
 8007c1c:	f04f 0200 	mov.w	r2, #0
 8007c20:	f04f 0300 	mov.w	r3, #0
 8007c24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c30:	4692      	mov	sl, r2
 8007c32:	469b      	mov	fp, r3
 8007c34:	4643      	mov	r3, r8
 8007c36:	eb1a 0303 	adds.w	r3, sl, r3
 8007c3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c3e:	464b      	mov	r3, r9
 8007c40:	eb4b 0303 	adc.w	r3, fp, r3
 8007c44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007c58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	18db      	adds	r3, r3, r3
 8007c60:	643b      	str	r3, [r7, #64]	; 0x40
 8007c62:	4613      	mov	r3, r2
 8007c64:	eb42 0303 	adc.w	r3, r2, r3
 8007c68:	647b      	str	r3, [r7, #68]	; 0x44
 8007c6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007c72:	f7f9 f809 	bl	8000c88 <__aeabi_uldivmod>
 8007c76:	4602      	mov	r2, r0
 8007c78:	460b      	mov	r3, r1
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	4b3b      	ldr	r3, [pc, #236]	; (8007d6c <UART_SetConfig+0x2d4>)
 8007c7e:	fba3 2301 	umull	r2, r3, r3, r1
 8007c82:	095b      	lsrs	r3, r3, #5
 8007c84:	2264      	movs	r2, #100	; 0x64
 8007c86:	fb02 f303 	mul.w	r3, r2, r3
 8007c8a:	1acb      	subs	r3, r1, r3
 8007c8c:	00db      	lsls	r3, r3, #3
 8007c8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c92:	4b36      	ldr	r3, [pc, #216]	; (8007d6c <UART_SetConfig+0x2d4>)
 8007c94:	fba3 2302 	umull	r2, r3, r3, r2
 8007c98:	095b      	lsrs	r3, r3, #5
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ca0:	441c      	add	r4, r3
 8007ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007cb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	464b      	mov	r3, r9
 8007cb8:	1891      	adds	r1, r2, r2
 8007cba:	63b9      	str	r1, [r7, #56]	; 0x38
 8007cbc:	415b      	adcs	r3, r3
 8007cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007cc4:	4641      	mov	r1, r8
 8007cc6:	1851      	adds	r1, r2, r1
 8007cc8:	6339      	str	r1, [r7, #48]	; 0x30
 8007cca:	4649      	mov	r1, r9
 8007ccc:	414b      	adcs	r3, r1
 8007cce:	637b      	str	r3, [r7, #52]	; 0x34
 8007cd0:	f04f 0200 	mov.w	r2, #0
 8007cd4:	f04f 0300 	mov.w	r3, #0
 8007cd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007cdc:	4659      	mov	r1, fp
 8007cde:	00cb      	lsls	r3, r1, #3
 8007ce0:	4651      	mov	r1, sl
 8007ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ce6:	4651      	mov	r1, sl
 8007ce8:	00ca      	lsls	r2, r1, #3
 8007cea:	4610      	mov	r0, r2
 8007cec:	4619      	mov	r1, r3
 8007cee:	4603      	mov	r3, r0
 8007cf0:	4642      	mov	r2, r8
 8007cf2:	189b      	adds	r3, r3, r2
 8007cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cf8:	464b      	mov	r3, r9
 8007cfa:	460a      	mov	r2, r1
 8007cfc:	eb42 0303 	adc.w	r3, r2, r3
 8007d00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007d14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007d18:	460b      	mov	r3, r1
 8007d1a:	18db      	adds	r3, r3, r3
 8007d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d1e:	4613      	mov	r3, r2
 8007d20:	eb42 0303 	adc.w	r3, r2, r3
 8007d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007d2e:	f7f8 ffab 	bl	8000c88 <__aeabi_uldivmod>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4b0d      	ldr	r3, [pc, #52]	; (8007d6c <UART_SetConfig+0x2d4>)
 8007d38:	fba3 1302 	umull	r1, r3, r3, r2
 8007d3c:	095b      	lsrs	r3, r3, #5
 8007d3e:	2164      	movs	r1, #100	; 0x64
 8007d40:	fb01 f303 	mul.w	r3, r1, r3
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	00db      	lsls	r3, r3, #3
 8007d48:	3332      	adds	r3, #50	; 0x32
 8007d4a:	4a08      	ldr	r2, [pc, #32]	; (8007d6c <UART_SetConfig+0x2d4>)
 8007d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d50:	095b      	lsrs	r3, r3, #5
 8007d52:	f003 0207 	and.w	r2, r3, #7
 8007d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4422      	add	r2, r4
 8007d5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d60:	e106      	b.n	8007f70 <UART_SetConfig+0x4d8>
 8007d62:	bf00      	nop
 8007d64:	40011000 	.word	0x40011000
 8007d68:	40011400 	.word	0x40011400
 8007d6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d74:	2200      	movs	r2, #0
 8007d76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007d7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007d82:	4642      	mov	r2, r8
 8007d84:	464b      	mov	r3, r9
 8007d86:	1891      	adds	r1, r2, r2
 8007d88:	6239      	str	r1, [r7, #32]
 8007d8a:	415b      	adcs	r3, r3
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d92:	4641      	mov	r1, r8
 8007d94:	1854      	adds	r4, r2, r1
 8007d96:	4649      	mov	r1, r9
 8007d98:	eb43 0501 	adc.w	r5, r3, r1
 8007d9c:	f04f 0200 	mov.w	r2, #0
 8007da0:	f04f 0300 	mov.w	r3, #0
 8007da4:	00eb      	lsls	r3, r5, #3
 8007da6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007daa:	00e2      	lsls	r2, r4, #3
 8007dac:	4614      	mov	r4, r2
 8007dae:	461d      	mov	r5, r3
 8007db0:	4643      	mov	r3, r8
 8007db2:	18e3      	adds	r3, r4, r3
 8007db4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007db8:	464b      	mov	r3, r9
 8007dba:	eb45 0303 	adc.w	r3, r5, r3
 8007dbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007dce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007dd2:	f04f 0200 	mov.w	r2, #0
 8007dd6:	f04f 0300 	mov.w	r3, #0
 8007dda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007dde:	4629      	mov	r1, r5
 8007de0:	008b      	lsls	r3, r1, #2
 8007de2:	4621      	mov	r1, r4
 8007de4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007de8:	4621      	mov	r1, r4
 8007dea:	008a      	lsls	r2, r1, #2
 8007dec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007df0:	f7f8 ff4a 	bl	8000c88 <__aeabi_uldivmod>
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	4b60      	ldr	r3, [pc, #384]	; (8007f7c <UART_SetConfig+0x4e4>)
 8007dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8007dfe:	095b      	lsrs	r3, r3, #5
 8007e00:	011c      	lsls	r4, r3, #4
 8007e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e06:	2200      	movs	r2, #0
 8007e08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007e10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007e14:	4642      	mov	r2, r8
 8007e16:	464b      	mov	r3, r9
 8007e18:	1891      	adds	r1, r2, r2
 8007e1a:	61b9      	str	r1, [r7, #24]
 8007e1c:	415b      	adcs	r3, r3
 8007e1e:	61fb      	str	r3, [r7, #28]
 8007e20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e24:	4641      	mov	r1, r8
 8007e26:	1851      	adds	r1, r2, r1
 8007e28:	6139      	str	r1, [r7, #16]
 8007e2a:	4649      	mov	r1, r9
 8007e2c:	414b      	adcs	r3, r1
 8007e2e:	617b      	str	r3, [r7, #20]
 8007e30:	f04f 0200 	mov.w	r2, #0
 8007e34:	f04f 0300 	mov.w	r3, #0
 8007e38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e3c:	4659      	mov	r1, fp
 8007e3e:	00cb      	lsls	r3, r1, #3
 8007e40:	4651      	mov	r1, sl
 8007e42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e46:	4651      	mov	r1, sl
 8007e48:	00ca      	lsls	r2, r1, #3
 8007e4a:	4610      	mov	r0, r2
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	4603      	mov	r3, r0
 8007e50:	4642      	mov	r2, r8
 8007e52:	189b      	adds	r3, r3, r2
 8007e54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e58:	464b      	mov	r3, r9
 8007e5a:	460a      	mov	r2, r1
 8007e5c:	eb42 0303 	adc.w	r3, r2, r3
 8007e60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007e70:	f04f 0200 	mov.w	r2, #0
 8007e74:	f04f 0300 	mov.w	r3, #0
 8007e78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007e7c:	4649      	mov	r1, r9
 8007e7e:	008b      	lsls	r3, r1, #2
 8007e80:	4641      	mov	r1, r8
 8007e82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e86:	4641      	mov	r1, r8
 8007e88:	008a      	lsls	r2, r1, #2
 8007e8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e8e:	f7f8 fefb 	bl	8000c88 <__aeabi_uldivmod>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	4611      	mov	r1, r2
 8007e98:	4b38      	ldr	r3, [pc, #224]	; (8007f7c <UART_SetConfig+0x4e4>)
 8007e9a:	fba3 2301 	umull	r2, r3, r3, r1
 8007e9e:	095b      	lsrs	r3, r3, #5
 8007ea0:	2264      	movs	r2, #100	; 0x64
 8007ea2:	fb02 f303 	mul.w	r3, r2, r3
 8007ea6:	1acb      	subs	r3, r1, r3
 8007ea8:	011b      	lsls	r3, r3, #4
 8007eaa:	3332      	adds	r3, #50	; 0x32
 8007eac:	4a33      	ldr	r2, [pc, #204]	; (8007f7c <UART_SetConfig+0x4e4>)
 8007eae:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb2:	095b      	lsrs	r3, r3, #5
 8007eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007eb8:	441c      	add	r4, r3
 8007eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	673b      	str	r3, [r7, #112]	; 0x70
 8007ec2:	677a      	str	r2, [r7, #116]	; 0x74
 8007ec4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007ec8:	4642      	mov	r2, r8
 8007eca:	464b      	mov	r3, r9
 8007ecc:	1891      	adds	r1, r2, r2
 8007ece:	60b9      	str	r1, [r7, #8]
 8007ed0:	415b      	adcs	r3, r3
 8007ed2:	60fb      	str	r3, [r7, #12]
 8007ed4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ed8:	4641      	mov	r1, r8
 8007eda:	1851      	adds	r1, r2, r1
 8007edc:	6039      	str	r1, [r7, #0]
 8007ede:	4649      	mov	r1, r9
 8007ee0:	414b      	adcs	r3, r1
 8007ee2:	607b      	str	r3, [r7, #4]
 8007ee4:	f04f 0200 	mov.w	r2, #0
 8007ee8:	f04f 0300 	mov.w	r3, #0
 8007eec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007ef0:	4659      	mov	r1, fp
 8007ef2:	00cb      	lsls	r3, r1, #3
 8007ef4:	4651      	mov	r1, sl
 8007ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007efa:	4651      	mov	r1, sl
 8007efc:	00ca      	lsls	r2, r1, #3
 8007efe:	4610      	mov	r0, r2
 8007f00:	4619      	mov	r1, r3
 8007f02:	4603      	mov	r3, r0
 8007f04:	4642      	mov	r2, r8
 8007f06:	189b      	adds	r3, r3, r2
 8007f08:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f0a:	464b      	mov	r3, r9
 8007f0c:	460a      	mov	r2, r1
 8007f0e:	eb42 0303 	adc.w	r3, r2, r3
 8007f12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	663b      	str	r3, [r7, #96]	; 0x60
 8007f1e:	667a      	str	r2, [r7, #100]	; 0x64
 8007f20:	f04f 0200 	mov.w	r2, #0
 8007f24:	f04f 0300 	mov.w	r3, #0
 8007f28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007f2c:	4649      	mov	r1, r9
 8007f2e:	008b      	lsls	r3, r1, #2
 8007f30:	4641      	mov	r1, r8
 8007f32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f36:	4641      	mov	r1, r8
 8007f38:	008a      	lsls	r2, r1, #2
 8007f3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007f3e:	f7f8 fea3 	bl	8000c88 <__aeabi_uldivmod>
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	4b0d      	ldr	r3, [pc, #52]	; (8007f7c <UART_SetConfig+0x4e4>)
 8007f48:	fba3 1302 	umull	r1, r3, r3, r2
 8007f4c:	095b      	lsrs	r3, r3, #5
 8007f4e:	2164      	movs	r1, #100	; 0x64
 8007f50:	fb01 f303 	mul.w	r3, r1, r3
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	011b      	lsls	r3, r3, #4
 8007f58:	3332      	adds	r3, #50	; 0x32
 8007f5a:	4a08      	ldr	r2, [pc, #32]	; (8007f7c <UART_SetConfig+0x4e4>)
 8007f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f60:	095b      	lsrs	r3, r3, #5
 8007f62:	f003 020f 	and.w	r2, r3, #15
 8007f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4422      	add	r2, r4
 8007f6e:	609a      	str	r2, [r3, #8]
}
 8007f70:	bf00      	nop
 8007f72:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007f76:	46bd      	mov	sp, r7
 8007f78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f7c:	51eb851f 	.word	0x51eb851f

08007f80 <__NVIC_SetPriority>:
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	4603      	mov	r3, r0
 8007f88:	6039      	str	r1, [r7, #0]
 8007f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	db0a      	blt.n	8007faa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	b2da      	uxtb	r2, r3
 8007f98:	490c      	ldr	r1, [pc, #48]	; (8007fcc <__NVIC_SetPriority+0x4c>)
 8007f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f9e:	0112      	lsls	r2, r2, #4
 8007fa0:	b2d2      	uxtb	r2, r2
 8007fa2:	440b      	add	r3, r1
 8007fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007fa8:	e00a      	b.n	8007fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	b2da      	uxtb	r2, r3
 8007fae:	4908      	ldr	r1, [pc, #32]	; (8007fd0 <__NVIC_SetPriority+0x50>)
 8007fb0:	79fb      	ldrb	r3, [r7, #7]
 8007fb2:	f003 030f 	and.w	r3, r3, #15
 8007fb6:	3b04      	subs	r3, #4
 8007fb8:	0112      	lsls	r2, r2, #4
 8007fba:	b2d2      	uxtb	r2, r2
 8007fbc:	440b      	add	r3, r1
 8007fbe:	761a      	strb	r2, [r3, #24]
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	e000e100 	.word	0xe000e100
 8007fd0:	e000ed00 	.word	0xe000ed00

08007fd4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007fd8:	4b05      	ldr	r3, [pc, #20]	; (8007ff0 <SysTick_Handler+0x1c>)
 8007fda:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007fdc:	f002 f8de 	bl	800a19c <xTaskGetSchedulerState>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d001      	beq.n	8007fea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007fe6:	f002 fec7 	bl	800ad78 <xPortSysTickHandler>
  }
}
 8007fea:	bf00      	nop
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	e000e010 	.word	0xe000e010

08007ff4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	f06f 0004 	mvn.w	r0, #4
 8007ffe:	f7ff ffbf 	bl	8007f80 <__NVIC_SetPriority>
#endif
}
 8008002:	bf00      	nop
 8008004:	bd80      	pop	{r7, pc}
	...

08008008 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800800e:	f3ef 8305 	mrs	r3, IPSR
 8008012:	603b      	str	r3, [r7, #0]
  return(result);
 8008014:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008016:	2b00      	cmp	r3, #0
 8008018:	d003      	beq.n	8008022 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800801a:	f06f 0305 	mvn.w	r3, #5
 800801e:	607b      	str	r3, [r7, #4]
 8008020:	e00c      	b.n	800803c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008022:	4b0a      	ldr	r3, [pc, #40]	; (800804c <osKernelInitialize+0x44>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d105      	bne.n	8008036 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800802a:	4b08      	ldr	r3, [pc, #32]	; (800804c <osKernelInitialize+0x44>)
 800802c:	2201      	movs	r2, #1
 800802e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008030:	2300      	movs	r3, #0
 8008032:	607b      	str	r3, [r7, #4]
 8008034:	e002      	b.n	800803c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008036:	f04f 33ff 	mov.w	r3, #4294967295
 800803a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800803c:	687b      	ldr	r3, [r7, #4]
}
 800803e:	4618      	mov	r0, r3
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	20001080 	.word	0x20001080

08008050 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008056:	f3ef 8305 	mrs	r3, IPSR
 800805a:	603b      	str	r3, [r7, #0]
  return(result);
 800805c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800805e:	2b00      	cmp	r3, #0
 8008060:	d003      	beq.n	800806a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008062:	f06f 0305 	mvn.w	r3, #5
 8008066:	607b      	str	r3, [r7, #4]
 8008068:	e010      	b.n	800808c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800806a:	4b0b      	ldr	r3, [pc, #44]	; (8008098 <osKernelStart+0x48>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d109      	bne.n	8008086 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008072:	f7ff ffbf 	bl	8007ff4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008076:	4b08      	ldr	r3, [pc, #32]	; (8008098 <osKernelStart+0x48>)
 8008078:	2202      	movs	r2, #2
 800807a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800807c:	f001 fc2a 	bl	80098d4 <vTaskStartScheduler>
      stat = osOK;
 8008080:	2300      	movs	r3, #0
 8008082:	607b      	str	r3, [r7, #4]
 8008084:	e002      	b.n	800808c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008086:	f04f 33ff 	mov.w	r3, #4294967295
 800808a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800808c:	687b      	ldr	r3, [r7, #4]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	20001080 	.word	0x20001080

0800809c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800809c:	b580      	push	{r7, lr}
 800809e:	b08e      	sub	sp, #56	; 0x38
 80080a0:	af04      	add	r7, sp, #16
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80080a8:	2300      	movs	r3, #0
 80080aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080ac:	f3ef 8305 	mrs	r3, IPSR
 80080b0:	617b      	str	r3, [r7, #20]
  return(result);
 80080b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d17e      	bne.n	80081b6 <osThreadNew+0x11a>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d07b      	beq.n	80081b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80080be:	2380      	movs	r3, #128	; 0x80
 80080c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80080c2:	2318      	movs	r3, #24
 80080c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80080c6:	2300      	movs	r3, #0
 80080c8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80080ca:	f04f 33ff 	mov.w	r3, #4294967295
 80080ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d045      	beq.n	8008162 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d002      	beq.n	80080e4 <osThreadNew+0x48>
        name = attr->name;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d002      	beq.n	80080f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d008      	beq.n	800810a <osThreadNew+0x6e>
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	2b38      	cmp	r3, #56	; 0x38
 80080fc:	d805      	bhi.n	800810a <osThreadNew+0x6e>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <osThreadNew+0x72>
        return (NULL);
 800810a:	2300      	movs	r3, #0
 800810c:	e054      	b.n	80081b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d003      	beq.n	800811e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	089b      	lsrs	r3, r3, #2
 800811c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00e      	beq.n	8008144 <osThreadNew+0xa8>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	2b63      	cmp	r3, #99	; 0x63
 800812c:	d90a      	bls.n	8008144 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008132:	2b00      	cmp	r3, #0
 8008134:	d006      	beq.n	8008144 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <osThreadNew+0xa8>
        mem = 1;
 800813e:	2301      	movs	r3, #1
 8008140:	61bb      	str	r3, [r7, #24]
 8008142:	e010      	b.n	8008166 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10c      	bne.n	8008166 <osThreadNew+0xca>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d108      	bne.n	8008166 <osThreadNew+0xca>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d104      	bne.n	8008166 <osThreadNew+0xca>
          mem = 0;
 800815c:	2300      	movs	r3, #0
 800815e:	61bb      	str	r3, [r7, #24]
 8008160:	e001      	b.n	8008166 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008162:	2300      	movs	r3, #0
 8008164:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d110      	bne.n	800818e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008174:	9202      	str	r2, [sp, #8]
 8008176:	9301      	str	r3, [sp, #4]
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	6a3a      	ldr	r2, [r7, #32]
 8008180:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f001 f852 	bl	800922c <xTaskCreateStatic>
 8008188:	4603      	mov	r3, r0
 800818a:	613b      	str	r3, [r7, #16]
 800818c:	e013      	b.n	80081b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d110      	bne.n	80081b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008194:	6a3b      	ldr	r3, [r7, #32]
 8008196:	b29a      	uxth	r2, r3
 8008198:	f107 0310 	add.w	r3, r7, #16
 800819c:	9301      	str	r3, [sp, #4]
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	9300      	str	r3, [sp, #0]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f001 f89d 	bl	80092e6 <xTaskCreate>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d001      	beq.n	80081b6 <osThreadNew+0x11a>
            hTask = NULL;
 80081b2:	2300      	movs	r3, #0
 80081b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80081b6:	693b      	ldr	r3, [r7, #16]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3728      	adds	r7, #40	; 0x28
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081c8:	f3ef 8305 	mrs	r3, IPSR
 80081cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80081ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d003      	beq.n	80081dc <osDelay+0x1c>
    stat = osErrorISR;
 80081d4:	f06f 0305 	mvn.w	r3, #5
 80081d8:	60fb      	str	r3, [r7, #12]
 80081da:	e007      	b.n	80081ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80081dc:	2300      	movs	r3, #0
 80081de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d002      	beq.n	80081ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f001 f9c8 	bl	800957c <vTaskDelay>
    }
  }

  return (stat);
 80081ec:	68fb      	ldr	r3, [r7, #12]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b08a      	sub	sp, #40	; 0x28
 80081fa:	af02      	add	r7, sp, #8
 80081fc:	60f8      	str	r0, [r7, #12]
 80081fe:	60b9      	str	r1, [r7, #8]
 8008200:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008202:	2300      	movs	r3, #0
 8008204:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008206:	f3ef 8305 	mrs	r3, IPSR
 800820a:	613b      	str	r3, [r7, #16]
  return(result);
 800820c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800820e:	2b00      	cmp	r3, #0
 8008210:	d15f      	bne.n	80082d2 <osMessageQueueNew+0xdc>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d05c      	beq.n	80082d2 <osMessageQueueNew+0xdc>
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d059      	beq.n	80082d2 <osMessageQueueNew+0xdc>
    mem = -1;
 800821e:	f04f 33ff 	mov.w	r3, #4294967295
 8008222:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d029      	beq.n	800827e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d012      	beq.n	8008258 <osMessageQueueNew+0x62>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	2b4f      	cmp	r3, #79	; 0x4f
 8008238:	d90e      	bls.n	8008258 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00a      	beq.n	8008258 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	695a      	ldr	r2, [r3, #20]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	68b9      	ldr	r1, [r7, #8]
 800824a:	fb01 f303 	mul.w	r3, r1, r3
 800824e:	429a      	cmp	r2, r3
 8008250:	d302      	bcc.n	8008258 <osMessageQueueNew+0x62>
        mem = 1;
 8008252:	2301      	movs	r3, #1
 8008254:	61bb      	str	r3, [r7, #24]
 8008256:	e014      	b.n	8008282 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d110      	bne.n	8008282 <osMessageQueueNew+0x8c>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10c      	bne.n	8008282 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800826c:	2b00      	cmp	r3, #0
 800826e:	d108      	bne.n	8008282 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	695b      	ldr	r3, [r3, #20]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d104      	bne.n	8008282 <osMessageQueueNew+0x8c>
          mem = 0;
 8008278:	2300      	movs	r3, #0
 800827a:	61bb      	str	r3, [r7, #24]
 800827c:	e001      	b.n	8008282 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800827e:	2300      	movs	r3, #0
 8008280:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d10b      	bne.n	80082a0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	691a      	ldr	r2, [r3, #16]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	2100      	movs	r1, #0
 8008292:	9100      	str	r1, [sp, #0]
 8008294:	68b9      	ldr	r1, [r7, #8]
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f000 fa4e 	bl	8008738 <xQueueGenericCreateStatic>
 800829c:	61f8      	str	r0, [r7, #28]
 800829e:	e008      	b.n	80082b2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d105      	bne.n	80082b2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80082a6:	2200      	movs	r2, #0
 80082a8:	68b9      	ldr	r1, [r7, #8]
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 fabc 	bl	8008828 <xQueueGenericCreate>
 80082b0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00c      	beq.n	80082d2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d003      	beq.n	80082c6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	617b      	str	r3, [r7, #20]
 80082c4:	e001      	b.n	80082ca <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80082c6:	2300      	movs	r3, #0
 80082c8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80082ca:	6979      	ldr	r1, [r7, #20]
 80082cc:	69f8      	ldr	r0, [r7, #28]
 80082ce:	f000 ff4f 	bl	8009170 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80082d2:	69fb      	ldr	r3, [r7, #28]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3720      	adds	r7, #32
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80082dc:	b580      	push	{r7, lr}
 80082de:	b088      	sub	sp, #32
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	603b      	str	r3, [r7, #0]
 80082e8:	4613      	mov	r3, r2
 80082ea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082f4:	f3ef 8305 	mrs	r3, IPSR
 80082f8:	617b      	str	r3, [r7, #20]
  return(result);
 80082fa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d028      	beq.n	8008352 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d005      	beq.n	8008312 <osMessageQueuePut+0x36>
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <osMessageQueuePut+0x36>
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008312:	f06f 0303 	mvn.w	r3, #3
 8008316:	61fb      	str	r3, [r7, #28]
 8008318:	e038      	b.n	800838c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800831a:	2300      	movs	r3, #0
 800831c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800831e:	f107 0210 	add.w	r2, r7, #16
 8008322:	2300      	movs	r3, #0
 8008324:	68b9      	ldr	r1, [r7, #8]
 8008326:	69b8      	ldr	r0, [r7, #24]
 8008328:	f000 fbda 	bl	8008ae0 <xQueueGenericSendFromISR>
 800832c:	4603      	mov	r3, r0
 800832e:	2b01      	cmp	r3, #1
 8008330:	d003      	beq.n	800833a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008332:	f06f 0302 	mvn.w	r3, #2
 8008336:	61fb      	str	r3, [r7, #28]
 8008338:	e028      	b.n	800838c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d025      	beq.n	800838c <osMessageQueuePut+0xb0>
 8008340:	4b15      	ldr	r3, [pc, #84]	; (8008398 <osMessageQueuePut+0xbc>)
 8008342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008346:	601a      	str	r2, [r3, #0]
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	e01c      	b.n	800838c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d002      	beq.n	800835e <osMessageQueuePut+0x82>
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d103      	bne.n	8008366 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800835e:	f06f 0303 	mvn.w	r3, #3
 8008362:	61fb      	str	r3, [r7, #28]
 8008364:	e012      	b.n	800838c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008366:	2300      	movs	r3, #0
 8008368:	683a      	ldr	r2, [r7, #0]
 800836a:	68b9      	ldr	r1, [r7, #8]
 800836c:	69b8      	ldr	r0, [r7, #24]
 800836e:	f000 fab9 	bl	80088e4 <xQueueGenericSend>
 8008372:	4603      	mov	r3, r0
 8008374:	2b01      	cmp	r3, #1
 8008376:	d009      	beq.n	800838c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800837e:	f06f 0301 	mvn.w	r3, #1
 8008382:	61fb      	str	r3, [r7, #28]
 8008384:	e002      	b.n	800838c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008386:	f06f 0302 	mvn.w	r3, #2
 800838a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800838c:	69fb      	ldr	r3, [r7, #28]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3720      	adds	r7, #32
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	e000ed04 	.word	0xe000ed04

0800839c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800839c:	b580      	push	{r7, lr}
 800839e:	b088      	sub	sp, #32
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
 80083a8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80083ae:	2300      	movs	r3, #0
 80083b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083b2:	f3ef 8305 	mrs	r3, IPSR
 80083b6:	617b      	str	r3, [r7, #20]
  return(result);
 80083b8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d028      	beq.n	8008410 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d005      	beq.n	80083d0 <osMessageQueueGet+0x34>
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d002      	beq.n	80083d0 <osMessageQueueGet+0x34>
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d003      	beq.n	80083d8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80083d0:	f06f 0303 	mvn.w	r3, #3
 80083d4:	61fb      	str	r3, [r7, #28]
 80083d6:	e037      	b.n	8008448 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80083d8:	2300      	movs	r3, #0
 80083da:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80083dc:	f107 0310 	add.w	r3, r7, #16
 80083e0:	461a      	mov	r2, r3
 80083e2:	68b9      	ldr	r1, [r7, #8]
 80083e4:	69b8      	ldr	r0, [r7, #24]
 80083e6:	f000 fcf7 	bl	8008dd8 <xQueueReceiveFromISR>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d003      	beq.n	80083f8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80083f0:	f06f 0302 	mvn.w	r3, #2
 80083f4:	61fb      	str	r3, [r7, #28]
 80083f6:	e027      	b.n	8008448 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d024      	beq.n	8008448 <osMessageQueueGet+0xac>
 80083fe:	4b15      	ldr	r3, [pc, #84]	; (8008454 <osMessageQueueGet+0xb8>)
 8008400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008404:	601a      	str	r2, [r3, #0]
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	e01b      	b.n	8008448 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <osMessageQueueGet+0x80>
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d103      	bne.n	8008424 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800841c:	f06f 0303 	mvn.w	r3, #3
 8008420:	61fb      	str	r3, [r7, #28]
 8008422:	e011      	b.n	8008448 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008424:	683a      	ldr	r2, [r7, #0]
 8008426:	68b9      	ldr	r1, [r7, #8]
 8008428:	69b8      	ldr	r0, [r7, #24]
 800842a:	f000 fbf5 	bl	8008c18 <xQueueReceive>
 800842e:	4603      	mov	r3, r0
 8008430:	2b01      	cmp	r3, #1
 8008432:	d009      	beq.n	8008448 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800843a:	f06f 0301 	mvn.w	r3, #1
 800843e:	61fb      	str	r3, [r7, #28]
 8008440:	e002      	b.n	8008448 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008442:	f06f 0302 	mvn.w	r3, #2
 8008446:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008448:	69fb      	ldr	r3, [r7, #28]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3720      	adds	r7, #32
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	e000ed04 	.word	0xe000ed04

08008458 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d102      	bne.n	8008470 <osMessageQueueGetCount+0x18>
    count = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	617b      	str	r3, [r7, #20]
 800846e:	e00e      	b.n	800848e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008470:	f3ef 8305 	mrs	r3, IPSR
 8008474:	60fb      	str	r3, [r7, #12]
  return(result);
 8008476:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008478:	2b00      	cmp	r3, #0
 800847a:	d004      	beq.n	8008486 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800847c:	6938      	ldr	r0, [r7, #16]
 800847e:	f000 fd49 	bl	8008f14 <uxQueueMessagesWaitingFromISR>
 8008482:	6178      	str	r0, [r7, #20]
 8008484:	e003      	b.n	800848e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8008486:	6938      	ldr	r0, [r7, #16]
 8008488:	f000 fd26 	bl	8008ed8 <uxQueueMessagesWaiting>
 800848c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800848e:	697b      	ldr	r3, [r7, #20]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3718      	adds	r7, #24
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	4a07      	ldr	r2, [pc, #28]	; (80084c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80084a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	4a06      	ldr	r2, [pc, #24]	; (80084c8 <vApplicationGetIdleTaskMemory+0x30>)
 80084ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2280      	movs	r2, #128	; 0x80
 80084b4:	601a      	str	r2, [r3, #0]
}
 80084b6:	bf00      	nop
 80084b8:	3714      	adds	r7, #20
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	20001084 	.word	0x20001084
 80084c8:	200010e8 	.word	0x200010e8

080084cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	4a07      	ldr	r2, [pc, #28]	; (80084f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80084dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	4a06      	ldr	r2, [pc, #24]	; (80084fc <vApplicationGetTimerTaskMemory+0x30>)
 80084e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084ea:	601a      	str	r2, [r3, #0]
}
 80084ec:	bf00      	nop
 80084ee:	3714      	adds	r7, #20
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr
 80084f8:	200012e8 	.word	0x200012e8
 80084fc:	2000134c 	.word	0x2000134c

08008500 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f103 0208 	add.w	r2, r3, #8
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f04f 32ff 	mov.w	r2, #4294967295
 8008518:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f103 0208 	add.w	r2, r3, #8
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f103 0208 	add.w	r2, r3, #8
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800854e:	bf00      	nop
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800855a:	b480      	push	{r7}
 800855c:	b085      	sub	sp, #20
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	689a      	ldr	r2, [r3, #8]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	683a      	ldr	r2, [r7, #0]
 800857e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	1c5a      	adds	r2, r3, #1
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	601a      	str	r2, [r3, #0]
}
 8008596:	bf00      	nop
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085a2:	b480      	push	{r7}
 80085a4:	b085      	sub	sp, #20
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b8:	d103      	bne.n	80085c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	60fb      	str	r3, [r7, #12]
 80085c0:	e00c      	b.n	80085dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	3308      	adds	r3, #8
 80085c6:	60fb      	str	r3, [r7, #12]
 80085c8:	e002      	b.n	80085d0 <vListInsert+0x2e>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	60fb      	str	r3, [r7, #12]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d2f6      	bcs.n	80085ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	685a      	ldr	r2, [r3, #4]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	683a      	ldr	r2, [r7, #0]
 80085ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	1c5a      	adds	r2, r3, #1
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	601a      	str	r2, [r3, #0]
}
 8008608:	bf00      	nop
 800860a:	3714      	adds	r7, #20
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	6892      	ldr	r2, [r2, #8]
 800862a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	6852      	ldr	r2, [r2, #4]
 8008634:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	429a      	cmp	r2, r3
 800863e:	d103      	bne.n	8008648 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	689a      	ldr	r2, [r3, #8]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	1e5a      	subs	r2, r3, #1
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10a      	bne.n	8008692 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008692:	f002 fadf 	bl	800ac54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869e:	68f9      	ldr	r1, [r7, #12]
 80086a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086a2:	fb01 f303 	mul.w	r3, r1, r3
 80086a6:	441a      	add	r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c2:	3b01      	subs	r3, #1
 80086c4:	68f9      	ldr	r1, [r7, #12]
 80086c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086c8:	fb01 f303 	mul.w	r3, r1, r3
 80086cc:	441a      	add	r2, r3
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	22ff      	movs	r2, #255	; 0xff
 80086d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	22ff      	movs	r2, #255	; 0xff
 80086de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d114      	bne.n	8008712 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d01a      	beq.n	8008726 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	3310      	adds	r3, #16
 80086f4:	4618      	mov	r0, r3
 80086f6:	f001 fb93 	bl	8009e20 <xTaskRemoveFromEventList>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d012      	beq.n	8008726 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008700:	4b0c      	ldr	r3, [pc, #48]	; (8008734 <xQueueGenericReset+0xcc>)
 8008702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008706:	601a      	str	r2, [r3, #0]
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	e009      	b.n	8008726 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3310      	adds	r3, #16
 8008716:	4618      	mov	r0, r3
 8008718:	f7ff fef2 	bl	8008500 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	3324      	adds	r3, #36	; 0x24
 8008720:	4618      	mov	r0, r3
 8008722:	f7ff feed 	bl	8008500 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008726:	f002 fac5 	bl	800acb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800872a:	2301      	movs	r3, #1
}
 800872c:	4618      	mov	r0, r3
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	e000ed04 	.word	0xe000ed04

08008738 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008738:	b580      	push	{r7, lr}
 800873a:	b08e      	sub	sp, #56	; 0x38
 800873c:	af02      	add	r7, sp, #8
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10a      	bne.n	8008762 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800875e:	bf00      	nop
 8008760:	e7fe      	b.n	8008760 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10a      	bne.n	800877e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
}
 800877a:	bf00      	nop
 800877c:	e7fe      	b.n	800877c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d002      	beq.n	800878a <xQueueGenericCreateStatic+0x52>
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d001      	beq.n	800878e <xQueueGenericCreateStatic+0x56>
 800878a:	2301      	movs	r3, #1
 800878c:	e000      	b.n	8008790 <xQueueGenericCreateStatic+0x58>
 800878e:	2300      	movs	r3, #0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10a      	bne.n	80087aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	623b      	str	r3, [r7, #32]
}
 80087a6:	bf00      	nop
 80087a8:	e7fe      	b.n	80087a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d102      	bne.n	80087b6 <xQueueGenericCreateStatic+0x7e>
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d101      	bne.n	80087ba <xQueueGenericCreateStatic+0x82>
 80087b6:	2301      	movs	r3, #1
 80087b8:	e000      	b.n	80087bc <xQueueGenericCreateStatic+0x84>
 80087ba:	2300      	movs	r3, #0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d10a      	bne.n	80087d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80087c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c4:	f383 8811 	msr	BASEPRI, r3
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	61fb      	str	r3, [r7, #28]
}
 80087d2:	bf00      	nop
 80087d4:	e7fe      	b.n	80087d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80087d6:	2350      	movs	r3, #80	; 0x50
 80087d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	2b50      	cmp	r3, #80	; 0x50
 80087de:	d00a      	beq.n	80087f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80087e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	61bb      	str	r3, [r7, #24]
}
 80087f2:	bf00      	nop
 80087f4:	e7fe      	b.n	80087f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80087f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80087fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00d      	beq.n	800881e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008804:	2201      	movs	r2, #1
 8008806:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800880a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800880e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	4613      	mov	r3, r2
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	68b9      	ldr	r1, [r7, #8]
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 f83f 	bl	800889c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800881e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008820:	4618      	mov	r0, r3
 8008822:	3730      	adds	r7, #48	; 0x30
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008828:	b580      	push	{r7, lr}
 800882a:	b08a      	sub	sp, #40	; 0x28
 800882c:	af02      	add	r7, sp, #8
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	4613      	mov	r3, r2
 8008834:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10a      	bne.n	8008852 <xQueueGenericCreate+0x2a>
	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	613b      	str	r3, [r7, #16]
}
 800884e:	bf00      	nop
 8008850:	e7fe      	b.n	8008850 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	fb02 f303 	mul.w	r3, r2, r3
 800885a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	3350      	adds	r3, #80	; 0x50
 8008860:	4618      	mov	r0, r3
 8008862:	f002 fb19 	bl	800ae98 <pvPortMalloc>
 8008866:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d011      	beq.n	8008892 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	3350      	adds	r3, #80	; 0x50
 8008876:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008880:	79fa      	ldrb	r2, [r7, #7]
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	4613      	mov	r3, r2
 8008888:	697a      	ldr	r2, [r7, #20]
 800888a:	68b9      	ldr	r1, [r7, #8]
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 f805 	bl	800889c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008892:	69bb      	ldr	r3, [r7, #24]
	}
 8008894:	4618      	mov	r0, r3
 8008896:	3720      	adds	r7, #32
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
 80088a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d103      	bne.n	80088b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	69ba      	ldr	r2, [r7, #24]
 80088b4:	601a      	str	r2, [r3, #0]
 80088b6:	e002      	b.n	80088be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80088ca:	2101      	movs	r1, #1
 80088cc:	69b8      	ldr	r0, [r7, #24]
 80088ce:	f7ff fecb 	bl	8008668 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	78fa      	ldrb	r2, [r7, #3]
 80088d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80088da:	bf00      	nop
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
	...

080088e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b08e      	sub	sp, #56	; 0x38
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
 80088f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80088f2:	2300      	movs	r3, #0
 80088f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80088fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10a      	bne.n	8008916 <xQueueGenericSend+0x32>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008912:	bf00      	nop
 8008914:	e7fe      	b.n	8008914 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d103      	bne.n	8008924 <xQueueGenericSend+0x40>
 800891c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <xQueueGenericSend+0x44>
 8008924:	2301      	movs	r3, #1
 8008926:	e000      	b.n	800892a <xQueueGenericSend+0x46>
 8008928:	2300      	movs	r3, #0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10a      	bne.n	8008944 <xQueueGenericSend+0x60>
	__asm volatile
 800892e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008940:	bf00      	nop
 8008942:	e7fe      	b.n	8008942 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	2b02      	cmp	r3, #2
 8008948:	d103      	bne.n	8008952 <xQueueGenericSend+0x6e>
 800894a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800894e:	2b01      	cmp	r3, #1
 8008950:	d101      	bne.n	8008956 <xQueueGenericSend+0x72>
 8008952:	2301      	movs	r3, #1
 8008954:	e000      	b.n	8008958 <xQueueGenericSend+0x74>
 8008956:	2300      	movs	r3, #0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10a      	bne.n	8008972 <xQueueGenericSend+0x8e>
	__asm volatile
 800895c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	623b      	str	r3, [r7, #32]
}
 800896e:	bf00      	nop
 8008970:	e7fe      	b.n	8008970 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008972:	f001 fc13 	bl	800a19c <xTaskGetSchedulerState>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d102      	bne.n	8008982 <xQueueGenericSend+0x9e>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d101      	bne.n	8008986 <xQueueGenericSend+0xa2>
 8008982:	2301      	movs	r3, #1
 8008984:	e000      	b.n	8008988 <xQueueGenericSend+0xa4>
 8008986:	2300      	movs	r3, #0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10a      	bne.n	80089a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800898c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008990:	f383 8811 	msr	BASEPRI, r3
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	61fb      	str	r3, [r7, #28]
}
 800899e:	bf00      	nop
 80089a0:	e7fe      	b.n	80089a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089a2:	f002 f957 	bl	800ac54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d302      	bcc.n	80089b8 <xQueueGenericSend+0xd4>
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d129      	bne.n	8008a0c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089b8:	683a      	ldr	r2, [r7, #0]
 80089ba:	68b9      	ldr	r1, [r7, #8]
 80089bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089be:	f000 fac7 	bl	8008f50 <prvCopyDataToQueue>
 80089c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d010      	beq.n	80089ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ce:	3324      	adds	r3, #36	; 0x24
 80089d0:	4618      	mov	r0, r3
 80089d2:	f001 fa25 	bl	8009e20 <xTaskRemoveFromEventList>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d013      	beq.n	8008a04 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80089dc:	4b3f      	ldr	r3, [pc, #252]	; (8008adc <xQueueGenericSend+0x1f8>)
 80089de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	e00a      	b.n	8008a04 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80089ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d007      	beq.n	8008a04 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80089f4:	4b39      	ldr	r3, [pc, #228]	; (8008adc <xQueueGenericSend+0x1f8>)
 80089f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008a04:	f002 f956 	bl	800acb4 <vPortExitCritical>
				return pdPASS;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e063      	b.n	8008ad4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d103      	bne.n	8008a1a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a12:	f002 f94f 	bl	800acb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008a16:	2300      	movs	r3, #0
 8008a18:	e05c      	b.n	8008ad4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d106      	bne.n	8008a2e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a20:	f107 0314 	add.w	r3, r7, #20
 8008a24:	4618      	mov	r0, r3
 8008a26:	f001 fa5f 	bl	8009ee8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a2e:	f002 f941 	bl	800acb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a32:	f000 ffb7 	bl	80099a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a36:	f002 f90d 	bl	800ac54 <vPortEnterCritical>
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a40:	b25b      	sxtb	r3, r3
 8008a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a46:	d103      	bne.n	8008a50 <xQueueGenericSend+0x16c>
 8008a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a56:	b25b      	sxtb	r3, r3
 8008a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5c:	d103      	bne.n	8008a66 <xQueueGenericSend+0x182>
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a66:	f002 f925 	bl	800acb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a6a:	1d3a      	adds	r2, r7, #4
 8008a6c:	f107 0314 	add.w	r3, r7, #20
 8008a70:	4611      	mov	r1, r2
 8008a72:	4618      	mov	r0, r3
 8008a74:	f001 fa4e 	bl	8009f14 <xTaskCheckForTimeOut>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d124      	bne.n	8008ac8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a80:	f000 fb5e 	bl	8009140 <prvIsQueueFull>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d018      	beq.n	8008abc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8c:	3310      	adds	r3, #16
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	4611      	mov	r1, r2
 8008a92:	4618      	mov	r0, r3
 8008a94:	f001 f974 	bl	8009d80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a9a:	f000 fae9 	bl	8009070 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a9e:	f000 ff8f 	bl	80099c0 <xTaskResumeAll>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f47f af7c 	bne.w	80089a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008aaa:	4b0c      	ldr	r3, [pc, #48]	; (8008adc <xQueueGenericSend+0x1f8>)
 8008aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ab0:	601a      	str	r2, [r3, #0]
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	e772      	b.n	80089a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008abe:	f000 fad7 	bl	8009070 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ac2:	f000 ff7d 	bl	80099c0 <xTaskResumeAll>
 8008ac6:	e76c      	b.n	80089a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aca:	f000 fad1 	bl	8009070 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ace:	f000 ff77 	bl	80099c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008ad2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3738      	adds	r7, #56	; 0x38
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	e000ed04 	.word	0xe000ed04

08008ae0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b090      	sub	sp, #64	; 0x40
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
 8008aec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10a      	bne.n	8008b0e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afc:	f383 8811 	msr	BASEPRI, r3
 8008b00:	f3bf 8f6f 	isb	sy
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b0a:	bf00      	nop
 8008b0c:	e7fe      	b.n	8008b0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d103      	bne.n	8008b1c <xQueueGenericSendFromISR+0x3c>
 8008b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d101      	bne.n	8008b20 <xQueueGenericSendFromISR+0x40>
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e000      	b.n	8008b22 <xQueueGenericSendFromISR+0x42>
 8008b20:	2300      	movs	r3, #0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d10a      	bne.n	8008b3c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b38:	bf00      	nop
 8008b3a:	e7fe      	b.n	8008b3a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d103      	bne.n	8008b4a <xQueueGenericSendFromISR+0x6a>
 8008b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d101      	bne.n	8008b4e <xQueueGenericSendFromISR+0x6e>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e000      	b.n	8008b50 <xQueueGenericSendFromISR+0x70>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10a      	bne.n	8008b6a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b58:	f383 8811 	msr	BASEPRI, r3
 8008b5c:	f3bf 8f6f 	isb	sy
 8008b60:	f3bf 8f4f 	dsb	sy
 8008b64:	623b      	str	r3, [r7, #32]
}
 8008b66:	bf00      	nop
 8008b68:	e7fe      	b.n	8008b68 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b6a:	f002 f955 	bl	800ae18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b6e:	f3ef 8211 	mrs	r2, BASEPRI
 8008b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b76:	f383 8811 	msr	BASEPRI, r3
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	61fa      	str	r2, [r7, #28]
 8008b84:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b86:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b88:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d302      	bcc.n	8008b9c <xQueueGenericSendFromISR+0xbc>
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d12f      	bne.n	8008bfc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008baa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008bac:	683a      	ldr	r2, [r7, #0]
 8008bae:	68b9      	ldr	r1, [r7, #8]
 8008bb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008bb2:	f000 f9cd 	bl	8008f50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008bb6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bbe:	d112      	bne.n	8008be6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d016      	beq.n	8008bf6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bca:	3324      	adds	r3, #36	; 0x24
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f001 f927 	bl	8009e20 <xTaskRemoveFromEventList>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00e      	beq.n	8008bf6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00b      	beq.n	8008bf6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2201      	movs	r2, #1
 8008be2:	601a      	str	r2, [r3, #0]
 8008be4:	e007      	b.n	8008bf6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008be6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008bea:	3301      	adds	r3, #1
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	b25a      	sxtb	r2, r3
 8008bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008bfa:	e001      	b.n	8008c00 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c02:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c0a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3740      	adds	r7, #64	; 0x40
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
	...

08008c18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b08c      	sub	sp, #48	; 0x30
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c24:	2300      	movs	r3, #0
 8008c26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10a      	bne.n	8008c48 <xQueueReceive+0x30>
	__asm volatile
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	623b      	str	r3, [r7, #32]
}
 8008c44:	bf00      	nop
 8008c46:	e7fe      	b.n	8008c46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d103      	bne.n	8008c56 <xQueueReceive+0x3e>
 8008c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <xQueueReceive+0x42>
 8008c56:	2301      	movs	r3, #1
 8008c58:	e000      	b.n	8008c5c <xQueueReceive+0x44>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10a      	bne.n	8008c76 <xQueueReceive+0x5e>
	__asm volatile
 8008c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c64:	f383 8811 	msr	BASEPRI, r3
 8008c68:	f3bf 8f6f 	isb	sy
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	61fb      	str	r3, [r7, #28]
}
 8008c72:	bf00      	nop
 8008c74:	e7fe      	b.n	8008c74 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c76:	f001 fa91 	bl	800a19c <xTaskGetSchedulerState>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d102      	bne.n	8008c86 <xQueueReceive+0x6e>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <xQueueReceive+0x72>
 8008c86:	2301      	movs	r3, #1
 8008c88:	e000      	b.n	8008c8c <xQueueReceive+0x74>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10a      	bne.n	8008ca6 <xQueueReceive+0x8e>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	61bb      	str	r3, [r7, #24]
}
 8008ca2:	bf00      	nop
 8008ca4:	e7fe      	b.n	8008ca4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ca6:	f001 ffd5 	bl	800ac54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d01f      	beq.n	8008cf6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008cb6:	68b9      	ldr	r1, [r7, #8]
 8008cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cba:	f000 f9b3 	bl	8009024 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc0:	1e5a      	subs	r2, r3, #1
 8008cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00f      	beq.n	8008cee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd0:	3310      	adds	r3, #16
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f001 f8a4 	bl	8009e20 <xTaskRemoveFromEventList>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d007      	beq.n	8008cee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008cde:	4b3d      	ldr	r3, [pc, #244]	; (8008dd4 <xQueueReceive+0x1bc>)
 8008ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ce4:	601a      	str	r2, [r3, #0]
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008cee:	f001 ffe1 	bl	800acb4 <vPortExitCritical>
				return pdPASS;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e069      	b.n	8008dca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d103      	bne.n	8008d04 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008cfc:	f001 ffda 	bl	800acb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d00:	2300      	movs	r3, #0
 8008d02:	e062      	b.n	8008dca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d106      	bne.n	8008d18 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d0a:	f107 0310 	add.w	r3, r7, #16
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f001 f8ea 	bl	8009ee8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d14:	2301      	movs	r3, #1
 8008d16:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d18:	f001 ffcc 	bl	800acb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d1c:	f000 fe42 	bl	80099a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d20:	f001 ff98 	bl	800ac54 <vPortEnterCritical>
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d2a:	b25b      	sxtb	r3, r3
 8008d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d30:	d103      	bne.n	8008d3a <xQueueReceive+0x122>
 8008d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d40:	b25b      	sxtb	r3, r3
 8008d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d46:	d103      	bne.n	8008d50 <xQueueReceive+0x138>
 8008d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d50:	f001 ffb0 	bl	800acb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d54:	1d3a      	adds	r2, r7, #4
 8008d56:	f107 0310 	add.w	r3, r7, #16
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f001 f8d9 	bl	8009f14 <xTaskCheckForTimeOut>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d123      	bne.n	8008db0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d6a:	f000 f9d3 	bl	8009114 <prvIsQueueEmpty>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d017      	beq.n	8008da4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d76:	3324      	adds	r3, #36	; 0x24
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	4611      	mov	r1, r2
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 ffff 	bl	8009d80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d84:	f000 f974 	bl	8009070 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d88:	f000 fe1a 	bl	80099c0 <xTaskResumeAll>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d189      	bne.n	8008ca6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008d92:	4b10      	ldr	r3, [pc, #64]	; (8008dd4 <xQueueReceive+0x1bc>)
 8008d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	e780      	b.n	8008ca6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008da6:	f000 f963 	bl	8009070 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008daa:	f000 fe09 	bl	80099c0 <xTaskResumeAll>
 8008dae:	e77a      	b.n	8008ca6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008db2:	f000 f95d 	bl	8009070 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008db6:	f000 fe03 	bl	80099c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dbc:	f000 f9aa 	bl	8009114 <prvIsQueueEmpty>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f43f af6f 	beq.w	8008ca6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008dc8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3730      	adds	r7, #48	; 0x30
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	e000ed04 	.word	0xe000ed04

08008dd8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b08e      	sub	sp, #56	; 0x38
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d10a      	bne.n	8008e04 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	623b      	str	r3, [r7, #32]
}
 8008e00:	bf00      	nop
 8008e02:	e7fe      	b.n	8008e02 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d103      	bne.n	8008e12 <xQueueReceiveFromISR+0x3a>
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <xQueueReceiveFromISR+0x3e>
 8008e12:	2301      	movs	r3, #1
 8008e14:	e000      	b.n	8008e18 <xQueueReceiveFromISR+0x40>
 8008e16:	2300      	movs	r3, #0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10a      	bne.n	8008e32 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e20:	f383 8811 	msr	BASEPRI, r3
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	61fb      	str	r3, [r7, #28]
}
 8008e2e:	bf00      	nop
 8008e30:	e7fe      	b.n	8008e30 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e32:	f001 fff1 	bl	800ae18 <vPortValidateInterruptPriority>
	__asm volatile
 8008e36:	f3ef 8211 	mrs	r2, BASEPRI
 8008e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3e:	f383 8811 	msr	BASEPRI, r3
 8008e42:	f3bf 8f6f 	isb	sy
 8008e46:	f3bf 8f4f 	dsb	sy
 8008e4a:	61ba      	str	r2, [r7, #24]
 8008e4c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008e4e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d02f      	beq.n	8008ebe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e68:	68b9      	ldr	r1, [r7, #8]
 8008e6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e6c:	f000 f8da 	bl	8009024 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e72:	1e5a      	subs	r2, r3, #1
 8008e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e76:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008e78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e80:	d112      	bne.n	8008ea8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d016      	beq.n	8008eb8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8c:	3310      	adds	r3, #16
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 ffc6 	bl	8009e20 <xTaskRemoveFromEventList>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00e      	beq.n	8008eb8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00b      	beq.n	8008eb8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	e007      	b.n	8008eb8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008eac:	3301      	adds	r3, #1
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	b25a      	sxtb	r2, r3
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	637b      	str	r3, [r7, #52]	; 0x34
 8008ebc:	e001      	b.n	8008ec2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	f383 8811 	msr	BASEPRI, r3
}
 8008ecc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3738      	adds	r7, #56	; 0x38
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10a      	bne.n	8008efc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8008ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eea:	f383 8811 	msr	BASEPRI, r3
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	f3bf 8f4f 	dsb	sy
 8008ef6:	60bb      	str	r3, [r7, #8]
}
 8008ef8:	bf00      	nop
 8008efa:	e7fe      	b.n	8008efa <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008efc:	f001 feaa 	bl	800ac54 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f04:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008f06:	f001 fed5 	bl	800acb4 <vPortExitCritical>

	return uxReturn;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008f14:	b480      	push	{r7}
 8008f16:	b087      	sub	sp, #28
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10a      	bne.n	8008f3c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8008f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	60fb      	str	r3, [r7, #12]
}
 8008f38:	bf00      	nop
 8008f3a:	e7fe      	b.n	8008f3a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f40:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8008f42:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008f44:	4618      	mov	r0, r3
 8008f46:	371c      	adds	r7, #28
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10d      	bne.n	8008f8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d14d      	bne.n	8009012 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f001 f92c 	bl	800a1d8 <xTaskPriorityDisinherit>
 8008f80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2200      	movs	r2, #0
 8008f86:	609a      	str	r2, [r3, #8]
 8008f88:	e043      	b.n	8009012 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d119      	bne.n	8008fc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6858      	ldr	r0, [r3, #4]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f98:	461a      	mov	r2, r3
 8008f9a:	68b9      	ldr	r1, [r7, #8]
 8008f9c:	f003 f981 	bl	800c2a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	685a      	ldr	r2, [r3, #4]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa8:	441a      	add	r2, r3
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	685a      	ldr	r2, [r3, #4]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d32b      	bcc.n	8009012 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	605a      	str	r2, [r3, #4]
 8008fc2:	e026      	b.n	8009012 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	68d8      	ldr	r0, [r3, #12]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fcc:	461a      	mov	r2, r3
 8008fce:	68b9      	ldr	r1, [r7, #8]
 8008fd0:	f003 f967 	bl	800c2a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	68da      	ldr	r2, [r3, #12]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fdc:	425b      	negs	r3, r3
 8008fde:	441a      	add	r2, r3
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	68da      	ldr	r2, [r3, #12]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d207      	bcs.n	8009000 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	689a      	ldr	r2, [r3, #8]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff8:	425b      	negs	r3, r3
 8008ffa:	441a      	add	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2b02      	cmp	r3, #2
 8009004:	d105      	bne.n	8009012 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d002      	beq.n	8009012 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	3b01      	subs	r3, #1
 8009010:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	1c5a      	adds	r2, r3, #1
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800901a:	697b      	ldr	r3, [r7, #20]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3718      	adds	r7, #24
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009032:	2b00      	cmp	r3, #0
 8009034:	d018      	beq.n	8009068 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68da      	ldr	r2, [r3, #12]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903e:	441a      	add	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68da      	ldr	r2, [r3, #12]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	429a      	cmp	r2, r3
 800904e:	d303      	bcc.n	8009058 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68d9      	ldr	r1, [r3, #12]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009060:	461a      	mov	r2, r3
 8009062:	6838      	ldr	r0, [r7, #0]
 8009064:	f003 f91d 	bl	800c2a2 <memcpy>
	}
}
 8009068:	bf00      	nop
 800906a:	3708      	adds	r7, #8
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009078:	f001 fdec 	bl	800ac54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009082:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009084:	e011      	b.n	80090aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908a:	2b00      	cmp	r3, #0
 800908c:	d012      	beq.n	80090b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	3324      	adds	r3, #36	; 0x24
 8009092:	4618      	mov	r0, r3
 8009094:	f000 fec4 	bl	8009e20 <xTaskRemoveFromEventList>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d001      	beq.n	80090a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800909e:	f000 ff9b 	bl	8009fd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80090a2:	7bfb      	ldrb	r3, [r7, #15]
 80090a4:	3b01      	subs	r3, #1
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	dce9      	bgt.n	8009086 <prvUnlockQueue+0x16>
 80090b2:	e000      	b.n	80090b6 <prvUnlockQueue+0x46>
					break;
 80090b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	22ff      	movs	r2, #255	; 0xff
 80090ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80090be:	f001 fdf9 	bl	800acb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80090c2:	f001 fdc7 	bl	800ac54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090ce:	e011      	b.n	80090f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d012      	beq.n	80090fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	3310      	adds	r3, #16
 80090dc:	4618      	mov	r0, r3
 80090de:	f000 fe9f 	bl	8009e20 <xTaskRemoveFromEventList>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80090e8:	f000 ff76 	bl	8009fd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80090ec:	7bbb      	ldrb	r3, [r7, #14]
 80090ee:	3b01      	subs	r3, #1
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	dce9      	bgt.n	80090d0 <prvUnlockQueue+0x60>
 80090fc:	e000      	b.n	8009100 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80090fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	22ff      	movs	r2, #255	; 0xff
 8009104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009108:	f001 fdd4 	bl	800acb4 <vPortExitCritical>
}
 800910c:	bf00      	nop
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800911c:	f001 fd9a 	bl	800ac54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009124:	2b00      	cmp	r3, #0
 8009126:	d102      	bne.n	800912e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009128:	2301      	movs	r3, #1
 800912a:	60fb      	str	r3, [r7, #12]
 800912c:	e001      	b.n	8009132 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800912e:	2300      	movs	r3, #0
 8009130:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009132:	f001 fdbf 	bl	800acb4 <vPortExitCritical>

	return xReturn;
 8009136:	68fb      	ldr	r3, [r7, #12]
}
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009148:	f001 fd84 	bl	800ac54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009154:	429a      	cmp	r2, r3
 8009156:	d102      	bne.n	800915e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009158:	2301      	movs	r3, #1
 800915a:	60fb      	str	r3, [r7, #12]
 800915c:	e001      	b.n	8009162 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800915e:	2300      	movs	r3, #0
 8009160:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009162:	f001 fda7 	bl	800acb4 <vPortExitCritical>

	return xReturn;
 8009166:	68fb      	ldr	r3, [r7, #12]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800917a:	2300      	movs	r3, #0
 800917c:	60fb      	str	r3, [r7, #12]
 800917e:	e014      	b.n	80091aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009180:	4a0f      	ldr	r2, [pc, #60]	; (80091c0 <vQueueAddToRegistry+0x50>)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d10b      	bne.n	80091a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800918c:	490c      	ldr	r1, [pc, #48]	; (80091c0 <vQueueAddToRegistry+0x50>)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	683a      	ldr	r2, [r7, #0]
 8009192:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009196:	4a0a      	ldr	r2, [pc, #40]	; (80091c0 <vQueueAddToRegistry+0x50>)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	00db      	lsls	r3, r3, #3
 800919c:	4413      	add	r3, r2
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80091a2:	e006      	b.n	80091b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3301      	adds	r3, #1
 80091a8:	60fb      	str	r3, [r7, #12]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2b07      	cmp	r3, #7
 80091ae:	d9e7      	bls.n	8009180 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80091b0:	bf00      	nop
 80091b2:	bf00      	nop
 80091b4:	3714      	adds	r7, #20
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	2000174c 	.word	0x2000174c

080091c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80091d4:	f001 fd3e 	bl	800ac54 <vPortEnterCritical>
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091de:	b25b      	sxtb	r3, r3
 80091e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e4:	d103      	bne.n	80091ee <vQueueWaitForMessageRestricted+0x2a>
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091f4:	b25b      	sxtb	r3, r3
 80091f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091fa:	d103      	bne.n	8009204 <vQueueWaitForMessageRestricted+0x40>
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009204:	f001 fd56 	bl	800acb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920c:	2b00      	cmp	r3, #0
 800920e:	d106      	bne.n	800921e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	3324      	adds	r3, #36	; 0x24
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	68b9      	ldr	r1, [r7, #8]
 8009218:	4618      	mov	r0, r3
 800921a:	f000 fdd5 	bl	8009dc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800921e:	6978      	ldr	r0, [r7, #20]
 8009220:	f7ff ff26 	bl	8009070 <prvUnlockQueue>
	}
 8009224:	bf00      	nop
 8009226:	3718      	adds	r7, #24
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800922c:	b580      	push	{r7, lr}
 800922e:	b08e      	sub	sp, #56	; 0x38
 8009230:	af04      	add	r7, sp, #16
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	607a      	str	r2, [r7, #4]
 8009238:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800923a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10a      	bne.n	8009256 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	623b      	str	r3, [r7, #32]
}
 8009252:	bf00      	nop
 8009254:	e7fe      	b.n	8009254 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10a      	bne.n	8009272 <xTaskCreateStatic+0x46>
	__asm volatile
 800925c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	61fb      	str	r3, [r7, #28]
}
 800926e:	bf00      	nop
 8009270:	e7fe      	b.n	8009270 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009272:	2364      	movs	r3, #100	; 0x64
 8009274:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	2b64      	cmp	r3, #100	; 0x64
 800927a:	d00a      	beq.n	8009292 <xTaskCreateStatic+0x66>
	__asm volatile
 800927c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	61bb      	str	r3, [r7, #24]
}
 800928e:	bf00      	nop
 8009290:	e7fe      	b.n	8009290 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009292:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009296:	2b00      	cmp	r3, #0
 8009298:	d01e      	beq.n	80092d8 <xTaskCreateStatic+0xac>
 800929a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800929c:	2b00      	cmp	r3, #0
 800929e:	d01b      	beq.n	80092d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80092a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	2202      	movs	r2, #2
 80092ae:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80092b2:	2300      	movs	r3, #0
 80092b4:	9303      	str	r3, [sp, #12]
 80092b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b8:	9302      	str	r3, [sp, #8]
 80092ba:	f107 0314 	add.w	r3, r7, #20
 80092be:	9301      	str	r3, [sp, #4]
 80092c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	68b9      	ldr	r1, [r7, #8]
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f000 f850 	bl	8009370 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092d2:	f000 f8e3 	bl	800949c <prvAddNewTaskToReadyList>
 80092d6:	e001      	b.n	80092dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80092d8:	2300      	movs	r3, #0
 80092da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80092dc:	697b      	ldr	r3, [r7, #20]
	}
 80092de:	4618      	mov	r0, r3
 80092e0:	3728      	adds	r7, #40	; 0x28
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b08c      	sub	sp, #48	; 0x30
 80092ea:	af04      	add	r7, sp, #16
 80092ec:	60f8      	str	r0, [r7, #12]
 80092ee:	60b9      	str	r1, [r7, #8]
 80092f0:	603b      	str	r3, [r7, #0]
 80092f2:	4613      	mov	r3, r2
 80092f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80092f6:	88fb      	ldrh	r3, [r7, #6]
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	4618      	mov	r0, r3
 80092fc:	f001 fdcc 	bl	800ae98 <pvPortMalloc>
 8009300:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00e      	beq.n	8009326 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009308:	2064      	movs	r0, #100	; 0x64
 800930a:	f001 fdc5 	bl	800ae98 <pvPortMalloc>
 800930e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d003      	beq.n	800931e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	697a      	ldr	r2, [r7, #20]
 800931a:	631a      	str	r2, [r3, #48]	; 0x30
 800931c:	e005      	b.n	800932a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800931e:	6978      	ldr	r0, [r7, #20]
 8009320:	f001 fe86 	bl	800b030 <vPortFree>
 8009324:	e001      	b.n	800932a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009326:	2300      	movs	r3, #0
 8009328:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d017      	beq.n	8009360 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009338:	88fa      	ldrh	r2, [r7, #6]
 800933a:	2300      	movs	r3, #0
 800933c:	9303      	str	r3, [sp, #12]
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	9302      	str	r3, [sp, #8]
 8009342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009344:	9301      	str	r3, [sp, #4]
 8009346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009348:	9300      	str	r3, [sp, #0]
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	68b9      	ldr	r1, [r7, #8]
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f000 f80e 	bl	8009370 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009354:	69f8      	ldr	r0, [r7, #28]
 8009356:	f000 f8a1 	bl	800949c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800935a:	2301      	movs	r3, #1
 800935c:	61bb      	str	r3, [r7, #24]
 800935e:	e002      	b.n	8009366 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009360:	f04f 33ff 	mov.w	r3, #4294967295
 8009364:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009366:	69bb      	ldr	r3, [r7, #24]
	}
 8009368:	4618      	mov	r0, r3
 800936a:	3720      	adds	r7, #32
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b088      	sub	sp, #32
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
 800937c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009380:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	461a      	mov	r2, r3
 8009388:	21a5      	movs	r1, #165	; 0xa5
 800938a:	f002 ff0a 	bl	800c1a2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800938e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009398:	3b01      	subs	r3, #1
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	4413      	add	r3, r2
 800939e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	f023 0307 	bic.w	r3, r3, #7
 80093a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	f003 0307 	and.w	r3, r3, #7
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00a      	beq.n	80093c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80093b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b6:	f383 8811 	msr	BASEPRI, r3
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	f3bf 8f4f 	dsb	sy
 80093c2:	617b      	str	r3, [r7, #20]
}
 80093c4:	bf00      	nop
 80093c6:	e7fe      	b.n	80093c6 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80093c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ca:	69ba      	ldr	r2, [r7, #24]
 80093cc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d01f      	beq.n	8009414 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093d4:	2300      	movs	r3, #0
 80093d6:	61fb      	str	r3, [r7, #28]
 80093d8:	e012      	b.n	8009400 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	4413      	add	r3, r2
 80093e0:	7819      	ldrb	r1, [r3, #0]
 80093e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	4413      	add	r3, r2
 80093e8:	3334      	adds	r3, #52	; 0x34
 80093ea:	460a      	mov	r2, r1
 80093ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80093ee:	68ba      	ldr	r2, [r7, #8]
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	4413      	add	r3, r2
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d006      	beq.n	8009408 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	3301      	adds	r3, #1
 80093fe:	61fb      	str	r3, [r7, #28]
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	2b0f      	cmp	r3, #15
 8009404:	d9e9      	bls.n	80093da <prvInitialiseNewTask+0x6a>
 8009406:	e000      	b.n	800940a <prvInitialiseNewTask+0x9a>
			{
				break;
 8009408:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800940a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940c:	2200      	movs	r2, #0
 800940e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009412:	e003      	b.n	800941c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009416:	2200      	movs	r2, #0
 8009418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941e:	2b37      	cmp	r3, #55	; 0x37
 8009420:	d901      	bls.n	8009426 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009422:	2337      	movs	r3, #55	; 0x37
 8009424:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800942a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800942c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009430:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8009432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009434:	2200      	movs	r2, #0
 8009436:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943a:	3304      	adds	r3, #4
 800943c:	4618      	mov	r0, r3
 800943e:	f7ff f87f 	bl	8008540 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009444:	3318      	adds	r3, #24
 8009446:	4618      	mov	r0, r3
 8009448:	f7ff f87a 	bl	8008540 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800944c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009450:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009454:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800945c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009460:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009464:	2200      	movs	r2, #0
 8009466:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946a:	2200      	movs	r2, #0
 800946c:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800946e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009470:	2200      	movs	r2, #0
 8009472:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	68f9      	ldr	r1, [r7, #12]
 800947a:	69b8      	ldr	r0, [r7, #24]
 800947c:	f001 fabc 	bl	800a9f8 <pxPortInitialiseStack>
 8009480:	4602      	mov	r2, r0
 8009482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009484:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009488:	2b00      	cmp	r3, #0
 800948a:	d002      	beq.n	8009492 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800948c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009490:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009492:	bf00      	nop
 8009494:	3720      	adds	r7, #32
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
	...

0800949c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80094a4:	f001 fbd6 	bl	800ac54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80094a8:	4b2d      	ldr	r3, [pc, #180]	; (8009560 <prvAddNewTaskToReadyList+0xc4>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	3301      	adds	r3, #1
 80094ae:	4a2c      	ldr	r2, [pc, #176]	; (8009560 <prvAddNewTaskToReadyList+0xc4>)
 80094b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80094b2:	4b2c      	ldr	r3, [pc, #176]	; (8009564 <prvAddNewTaskToReadyList+0xc8>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d109      	bne.n	80094ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80094ba:	4a2a      	ldr	r2, [pc, #168]	; (8009564 <prvAddNewTaskToReadyList+0xc8>)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80094c0:	4b27      	ldr	r3, [pc, #156]	; (8009560 <prvAddNewTaskToReadyList+0xc4>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d110      	bne.n	80094ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80094c8:	f000 fdaa 	bl	800a020 <prvInitialiseTaskLists>
 80094cc:	e00d      	b.n	80094ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80094ce:	4b26      	ldr	r3, [pc, #152]	; (8009568 <prvAddNewTaskToReadyList+0xcc>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d109      	bne.n	80094ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80094d6:	4b23      	ldr	r3, [pc, #140]	; (8009564 <prvAddNewTaskToReadyList+0xc8>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d802      	bhi.n	80094ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80094e4:	4a1f      	ldr	r2, [pc, #124]	; (8009564 <prvAddNewTaskToReadyList+0xc8>)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80094ea:	4b20      	ldr	r3, [pc, #128]	; (800956c <prvAddNewTaskToReadyList+0xd0>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	3301      	adds	r3, #1
 80094f0:	4a1e      	ldr	r2, [pc, #120]	; (800956c <prvAddNewTaskToReadyList+0xd0>)
 80094f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80094f4:	4b1d      	ldr	r3, [pc, #116]	; (800956c <prvAddNewTaskToReadyList+0xd0>)
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009500:	4b1b      	ldr	r3, [pc, #108]	; (8009570 <prvAddNewTaskToReadyList+0xd4>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	429a      	cmp	r2, r3
 8009506:	d903      	bls.n	8009510 <prvAddNewTaskToReadyList+0x74>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950c:	4a18      	ldr	r2, [pc, #96]	; (8009570 <prvAddNewTaskToReadyList+0xd4>)
 800950e:	6013      	str	r3, [r2, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009514:	4613      	mov	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4413      	add	r3, r2
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4a15      	ldr	r2, [pc, #84]	; (8009574 <prvAddNewTaskToReadyList+0xd8>)
 800951e:	441a      	add	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	3304      	adds	r3, #4
 8009524:	4619      	mov	r1, r3
 8009526:	4610      	mov	r0, r2
 8009528:	f7ff f817 	bl	800855a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800952c:	f001 fbc2 	bl	800acb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009530:	4b0d      	ldr	r3, [pc, #52]	; (8009568 <prvAddNewTaskToReadyList+0xcc>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d00e      	beq.n	8009556 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009538:	4b0a      	ldr	r3, [pc, #40]	; (8009564 <prvAddNewTaskToReadyList+0xc8>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009542:	429a      	cmp	r2, r3
 8009544:	d207      	bcs.n	8009556 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009546:	4b0c      	ldr	r3, [pc, #48]	; (8009578 <prvAddNewTaskToReadyList+0xdc>)
 8009548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009556:	bf00      	nop
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20001c60 	.word	0x20001c60
 8009564:	2000178c 	.word	0x2000178c
 8009568:	20001c6c 	.word	0x20001c6c
 800956c:	20001c7c 	.word	0x20001c7c
 8009570:	20001c68 	.word	0x20001c68
 8009574:	20001790 	.word	0x20001790
 8009578:	e000ed04 	.word	0xe000ed04

0800957c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009584:	2300      	movs	r3, #0
 8009586:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d017      	beq.n	80095be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800958e:	4b13      	ldr	r3, [pc, #76]	; (80095dc <vTaskDelay+0x60>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00a      	beq.n	80095ac <vTaskDelay+0x30>
	__asm volatile
 8009596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959a:	f383 8811 	msr	BASEPRI, r3
 800959e:	f3bf 8f6f 	isb	sy
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	60bb      	str	r3, [r7, #8]
}
 80095a8:	bf00      	nop
 80095aa:	e7fe      	b.n	80095aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80095ac:	f000 f9fa 	bl	80099a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80095b0:	2100      	movs	r1, #0
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 fe7e 	bl	800a2b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80095b8:	f000 fa02 	bl	80099c0 <xTaskResumeAll>
 80095bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d107      	bne.n	80095d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80095c4:	4b06      	ldr	r3, [pc, #24]	; (80095e0 <vTaskDelay+0x64>)
 80095c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ca:	601a      	str	r2, [r3, #0]
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095d4:	bf00      	nop
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	20001c88 	.word	0x20001c88
 80095e0:	e000ed04 	.word	0xe000ed04

080095e4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80095ec:	f001 fb32 	bl	800ac54 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d102      	bne.n	80095fc <vTaskSuspend+0x18>
 80095f6:	4b30      	ldr	r3, [pc, #192]	; (80096b8 <vTaskSuspend+0xd4>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	e000      	b.n	80095fe <vTaskSuspend+0x1a>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	3304      	adds	r3, #4
 8009604:	4618      	mov	r0, r3
 8009606:	f7ff f805 	bl	8008614 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800960e:	2b00      	cmp	r3, #0
 8009610:	d004      	beq.n	800961c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	3318      	adds	r3, #24
 8009616:	4618      	mov	r0, r3
 8009618:	f7fe fffc 	bl	8008614 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	3304      	adds	r3, #4
 8009620:	4619      	mov	r1, r3
 8009622:	4826      	ldr	r0, [pc, #152]	; (80096bc <vTaskSuspend+0xd8>)
 8009624:	f7fe ff99 	bl	800855a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800962e:	b2db      	uxtb	r3, r3
 8009630:	2b01      	cmp	r3, #1
 8009632:	d103      	bne.n	800963c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800963c:	f001 fb3a 	bl	800acb4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009640:	4b1f      	ldr	r3, [pc, #124]	; (80096c0 <vTaskSuspend+0xdc>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d005      	beq.n	8009654 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009648:	f001 fb04 	bl	800ac54 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800964c:	f000 fd86 	bl	800a15c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009650:	f001 fb30 	bl	800acb4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009654:	4b18      	ldr	r3, [pc, #96]	; (80096b8 <vTaskSuspend+0xd4>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	429a      	cmp	r2, r3
 800965c:	d127      	bne.n	80096ae <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800965e:	4b18      	ldr	r3, [pc, #96]	; (80096c0 <vTaskSuspend+0xdc>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d017      	beq.n	8009696 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8009666:	4b17      	ldr	r3, [pc, #92]	; (80096c4 <vTaskSuspend+0xe0>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00a      	beq.n	8009684 <vTaskSuspend+0xa0>
	__asm volatile
 800966e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	60bb      	str	r3, [r7, #8]
}
 8009680:	bf00      	nop
 8009682:	e7fe      	b.n	8009682 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8009684:	4b10      	ldr	r3, [pc, #64]	; (80096c8 <vTaskSuspend+0xe4>)
 8009686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800968a:	601a      	str	r2, [r3, #0]
 800968c:	f3bf 8f4f 	dsb	sy
 8009690:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009694:	e00b      	b.n	80096ae <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8009696:	4b09      	ldr	r3, [pc, #36]	; (80096bc <vTaskSuspend+0xd8>)
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	4b0c      	ldr	r3, [pc, #48]	; (80096cc <vTaskSuspend+0xe8>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d103      	bne.n	80096aa <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80096a2:	4b05      	ldr	r3, [pc, #20]	; (80096b8 <vTaskSuspend+0xd4>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	601a      	str	r2, [r3, #0]
	}
 80096a8:	e001      	b.n	80096ae <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80096aa:	f000 faf1 	bl	8009c90 <vTaskSwitchContext>
	}
 80096ae:	bf00      	nop
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	2000178c 	.word	0x2000178c
 80096bc:	20001c4c 	.word	0x20001c4c
 80096c0:	20001c6c 	.word	0x20001c6c
 80096c4:	20001c88 	.word	0x20001c88
 80096c8:	e000ed04 	.word	0xe000ed04
 80096cc:	20001c60 	.word	0x20001c60

080096d0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80096d0:	b480      	push	{r7}
 80096d2:	b087      	sub	sp, #28
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80096d8:	2300      	movs	r3, #0
 80096da:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d10a      	bne.n	80096fc <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80096e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	60fb      	str	r3, [r7, #12]
}
 80096f8:	bf00      	nop
 80096fa:	e7fe      	b.n	80096fa <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	695b      	ldr	r3, [r3, #20]
 8009700:	4a0a      	ldr	r2, [pc, #40]	; (800972c <prvTaskIsTaskSuspended+0x5c>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d10a      	bne.n	800971c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800970a:	4a09      	ldr	r2, [pc, #36]	; (8009730 <prvTaskIsTaskSuspended+0x60>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d005      	beq.n	800971c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009714:	2b00      	cmp	r3, #0
 8009716:	d101      	bne.n	800971c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8009718:	2301      	movs	r3, #1
 800971a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800971c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800971e:	4618      	mov	r0, r3
 8009720:	371c      	adds	r7, #28
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	20001c4c 	.word	0x20001c4c
 8009730:	20001c20 	.word	0x20001c20

08009734 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d10a      	bne.n	800975c <vTaskResume+0x28>
	__asm volatile
 8009746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974a:	f383 8811 	msr	BASEPRI, r3
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	60bb      	str	r3, [r7, #8]
}
 8009758:	bf00      	nop
 800975a:	e7fe      	b.n	800975a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800975c:	4b20      	ldr	r3, [pc, #128]	; (80097e0 <vTaskResume+0xac>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	429a      	cmp	r2, r3
 8009764:	d038      	beq.n	80097d8 <vTaskResume+0xa4>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d035      	beq.n	80097d8 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800976c:	f001 fa72 	bl	800ac54 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f7ff ffad 	bl	80096d0 <prvTaskIsTaskSuspended>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d02b      	beq.n	80097d4 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	3304      	adds	r3, #4
 8009780:	4618      	mov	r0, r3
 8009782:	f7fe ff47 	bl	8008614 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800978a:	4b16      	ldr	r3, [pc, #88]	; (80097e4 <vTaskResume+0xb0>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	429a      	cmp	r2, r3
 8009790:	d903      	bls.n	800979a <vTaskResume+0x66>
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009796:	4a13      	ldr	r2, [pc, #76]	; (80097e4 <vTaskResume+0xb0>)
 8009798:	6013      	str	r3, [r2, #0]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800979e:	4613      	mov	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4413      	add	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	4a10      	ldr	r2, [pc, #64]	; (80097e8 <vTaskResume+0xb4>)
 80097a8:	441a      	add	r2, r3
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	3304      	adds	r3, #4
 80097ae:	4619      	mov	r1, r3
 80097b0:	4610      	mov	r0, r2
 80097b2:	f7fe fed2 	bl	800855a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ba:	4b09      	ldr	r3, [pc, #36]	; (80097e0 <vTaskResume+0xac>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d307      	bcc.n	80097d4 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80097c4:	4b09      	ldr	r3, [pc, #36]	; (80097ec <vTaskResume+0xb8>)
 80097c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80097d4:	f001 fa6e 	bl	800acb4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80097d8:	bf00      	nop
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	2000178c 	.word	0x2000178c
 80097e4:	20001c68 	.word	0x20001c68
 80097e8:	20001790 	.word	0x20001790
 80097ec:	e000ed04 	.word	0xe000ed04

080097f0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b08a      	sub	sp, #40	; 0x28
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80097f8:	2300      	movs	r3, #0
 80097fa:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d10a      	bne.n	800981c <xTaskResumeFromISR+0x2c>
	__asm volatile
 8009806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	61bb      	str	r3, [r7, #24]
}
 8009818:	bf00      	nop
 800981a:	e7fe      	b.n	800981a <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800981c:	f001 fafc 	bl	800ae18 <vPortValidateInterruptPriority>
	__asm volatile
 8009820:	f3ef 8211 	mrs	r2, BASEPRI
 8009824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009828:	f383 8811 	msr	BASEPRI, r3
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	617a      	str	r2, [r7, #20]
 8009836:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009838:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800983a:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800983c:	6a38      	ldr	r0, [r7, #32]
 800983e:	f7ff ff47 	bl	80096d0 <prvTaskIsTaskSuspended>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d030      	beq.n	80098aa <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009848:	4b1d      	ldr	r3, [pc, #116]	; (80098c0 <xTaskResumeFromISR+0xd0>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d126      	bne.n	800989e <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009850:	6a3b      	ldr	r3, [r7, #32]
 8009852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009854:	4b1b      	ldr	r3, [pc, #108]	; (80098c4 <xTaskResumeFromISR+0xd4>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985a:	429a      	cmp	r2, r3
 800985c:	d301      	bcc.n	8009862 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800985e:	2301      	movs	r3, #1
 8009860:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009862:	6a3b      	ldr	r3, [r7, #32]
 8009864:	3304      	adds	r3, #4
 8009866:	4618      	mov	r0, r3
 8009868:	f7fe fed4 	bl	8008614 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800986c:	6a3b      	ldr	r3, [r7, #32]
 800986e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009870:	4b15      	ldr	r3, [pc, #84]	; (80098c8 <xTaskResumeFromISR+0xd8>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	429a      	cmp	r2, r3
 8009876:	d903      	bls.n	8009880 <xTaskResumeFromISR+0x90>
 8009878:	6a3b      	ldr	r3, [r7, #32]
 800987a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987c:	4a12      	ldr	r2, [pc, #72]	; (80098c8 <xTaskResumeFromISR+0xd8>)
 800987e:	6013      	str	r3, [r2, #0]
 8009880:	6a3b      	ldr	r3, [r7, #32]
 8009882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009884:	4613      	mov	r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	4413      	add	r3, r2
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	4a0f      	ldr	r2, [pc, #60]	; (80098cc <xTaskResumeFromISR+0xdc>)
 800988e:	441a      	add	r2, r3
 8009890:	6a3b      	ldr	r3, [r7, #32]
 8009892:	3304      	adds	r3, #4
 8009894:	4619      	mov	r1, r3
 8009896:	4610      	mov	r0, r2
 8009898:	f7fe fe5f 	bl	800855a <vListInsertEnd>
 800989c:	e005      	b.n	80098aa <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800989e:	6a3b      	ldr	r3, [r7, #32]
 80098a0:	3318      	adds	r3, #24
 80098a2:	4619      	mov	r1, r3
 80098a4:	480a      	ldr	r0, [pc, #40]	; (80098d0 <xTaskResumeFromISR+0xe0>)
 80098a6:	f7fe fe58 	bl	800855a <vListInsertEnd>
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f383 8811 	msr	BASEPRI, r3
}
 80098b4:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80098b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3728      	adds	r7, #40	; 0x28
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	20001c88 	.word	0x20001c88
 80098c4:	2000178c 	.word	0x2000178c
 80098c8:	20001c68 	.word	0x20001c68
 80098cc:	20001790 	.word	0x20001790
 80098d0:	20001c20 	.word	0x20001c20

080098d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b08a      	sub	sp, #40	; 0x28
 80098d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80098da:	2300      	movs	r3, #0
 80098dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80098de:	2300      	movs	r3, #0
 80098e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80098e2:	463a      	mov	r2, r7
 80098e4:	1d39      	adds	r1, r7, #4
 80098e6:	f107 0308 	add.w	r3, r7, #8
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fe fdd4 	bl	8008498 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80098f0:	6839      	ldr	r1, [r7, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	9202      	str	r2, [sp, #8]
 80098f8:	9301      	str	r3, [sp, #4]
 80098fa:	2300      	movs	r3, #0
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	2300      	movs	r3, #0
 8009900:	460a      	mov	r2, r1
 8009902:	4922      	ldr	r1, [pc, #136]	; (800998c <vTaskStartScheduler+0xb8>)
 8009904:	4822      	ldr	r0, [pc, #136]	; (8009990 <vTaskStartScheduler+0xbc>)
 8009906:	f7ff fc91 	bl	800922c <xTaskCreateStatic>
 800990a:	4603      	mov	r3, r0
 800990c:	4a21      	ldr	r2, [pc, #132]	; (8009994 <vTaskStartScheduler+0xc0>)
 800990e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009910:	4b20      	ldr	r3, [pc, #128]	; (8009994 <vTaskStartScheduler+0xc0>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d002      	beq.n	800991e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009918:	2301      	movs	r3, #1
 800991a:	617b      	str	r3, [r7, #20]
 800991c:	e001      	b.n	8009922 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800991e:	2300      	movs	r3, #0
 8009920:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	2b01      	cmp	r3, #1
 8009926:	d102      	bne.n	800992e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009928:	f000 fd18 	bl	800a35c <xTimerCreateTimerTask>
 800992c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d118      	bne.n	8009966 <vTaskStartScheduler+0x92>
	__asm volatile
 8009934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009938:	f383 8811 	msr	BASEPRI, r3
 800993c:	f3bf 8f6f 	isb	sy
 8009940:	f3bf 8f4f 	dsb	sy
 8009944:	613b      	str	r3, [r7, #16]
}
 8009946:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009948:	4b13      	ldr	r3, [pc, #76]	; (8009998 <vTaskStartScheduler+0xc4>)
 800994a:	f04f 32ff 	mov.w	r2, #4294967295
 800994e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009950:	4b12      	ldr	r3, [pc, #72]	; (800999c <vTaskStartScheduler+0xc8>)
 8009952:	2201      	movs	r2, #1
 8009954:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009956:	4b12      	ldr	r3, [pc, #72]	; (80099a0 <vTaskStartScheduler+0xcc>)
 8009958:	2200      	movs	r2, #0
 800995a:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800995c:	f7f7 fbe8 	bl	8001130 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009960:	f001 f8d6 	bl	800ab10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009964:	e00e      	b.n	8009984 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800996c:	d10a      	bne.n	8009984 <vTaskStartScheduler+0xb0>
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	60fb      	str	r3, [r7, #12]
}
 8009980:	bf00      	nop
 8009982:	e7fe      	b.n	8009982 <vTaskStartScheduler+0xae>
}
 8009984:	bf00      	nop
 8009986:	3718      	adds	r7, #24
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	08010eec 	.word	0x08010eec
 8009990:	08009ff1 	.word	0x08009ff1
 8009994:	20001c84 	.word	0x20001c84
 8009998:	20001c80 	.word	0x20001c80
 800999c:	20001c6c 	.word	0x20001c6c
 80099a0:	20001c64 	.word	0x20001c64

080099a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80099a4:	b480      	push	{r7}
 80099a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80099a8:	4b04      	ldr	r3, [pc, #16]	; (80099bc <vTaskSuspendAll+0x18>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	3301      	adds	r3, #1
 80099ae:	4a03      	ldr	r2, [pc, #12]	; (80099bc <vTaskSuspendAll+0x18>)
 80099b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80099b2:	bf00      	nop
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	20001c88 	.word	0x20001c88

080099c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80099c6:	2300      	movs	r3, #0
 80099c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80099ca:	2300      	movs	r3, #0
 80099cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80099ce:	4b42      	ldr	r3, [pc, #264]	; (8009ad8 <xTaskResumeAll+0x118>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10a      	bne.n	80099ec <xTaskResumeAll+0x2c>
	__asm volatile
 80099d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099da:	f383 8811 	msr	BASEPRI, r3
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	603b      	str	r3, [r7, #0]
}
 80099e8:	bf00      	nop
 80099ea:	e7fe      	b.n	80099ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80099ec:	f001 f932 	bl	800ac54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80099f0:	4b39      	ldr	r3, [pc, #228]	; (8009ad8 <xTaskResumeAll+0x118>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	3b01      	subs	r3, #1
 80099f6:	4a38      	ldr	r2, [pc, #224]	; (8009ad8 <xTaskResumeAll+0x118>)
 80099f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099fa:	4b37      	ldr	r3, [pc, #220]	; (8009ad8 <xTaskResumeAll+0x118>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d162      	bne.n	8009ac8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a02:	4b36      	ldr	r3, [pc, #216]	; (8009adc <xTaskResumeAll+0x11c>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d05e      	beq.n	8009ac8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a0a:	e02f      	b.n	8009a6c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a0c:	4b34      	ldr	r3, [pc, #208]	; (8009ae0 <xTaskResumeAll+0x120>)
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	3318      	adds	r3, #24
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7fe fdfb 	bl	8008614 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	3304      	adds	r3, #4
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7fe fdf6 	bl	8008614 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2c:	4b2d      	ldr	r3, [pc, #180]	; (8009ae4 <xTaskResumeAll+0x124>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d903      	bls.n	8009a3c <xTaskResumeAll+0x7c>
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a38:	4a2a      	ldr	r2, [pc, #168]	; (8009ae4 <xTaskResumeAll+0x124>)
 8009a3a:	6013      	str	r3, [r2, #0]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a40:	4613      	mov	r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	4413      	add	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4a27      	ldr	r2, [pc, #156]	; (8009ae8 <xTaskResumeAll+0x128>)
 8009a4a:	441a      	add	r2, r3
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	3304      	adds	r3, #4
 8009a50:	4619      	mov	r1, r3
 8009a52:	4610      	mov	r0, r2
 8009a54:	f7fe fd81 	bl	800855a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a5c:	4b23      	ldr	r3, [pc, #140]	; (8009aec <xTaskResumeAll+0x12c>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d302      	bcc.n	8009a6c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009a66:	4b22      	ldr	r3, [pc, #136]	; (8009af0 <xTaskResumeAll+0x130>)
 8009a68:	2201      	movs	r2, #1
 8009a6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a6c:	4b1c      	ldr	r3, [pc, #112]	; (8009ae0 <xTaskResumeAll+0x120>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d1cb      	bne.n	8009a0c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d001      	beq.n	8009a7e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a7a:	f000 fb6f 	bl	800a15c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009a7e:	4b1d      	ldr	r3, [pc, #116]	; (8009af4 <xTaskResumeAll+0x134>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d010      	beq.n	8009aac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009a8a:	f000 f847 	bl	8009b1c <xTaskIncrementTick>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d002      	beq.n	8009a9a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009a94:	4b16      	ldr	r3, [pc, #88]	; (8009af0 <xTaskResumeAll+0x130>)
 8009a96:	2201      	movs	r2, #1
 8009a98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1f1      	bne.n	8009a8a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009aa6:	4b13      	ldr	r3, [pc, #76]	; (8009af4 <xTaskResumeAll+0x134>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009aac:	4b10      	ldr	r3, [pc, #64]	; (8009af0 <xTaskResumeAll+0x130>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d009      	beq.n	8009ac8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009ab8:	4b0f      	ldr	r3, [pc, #60]	; (8009af8 <xTaskResumeAll+0x138>)
 8009aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009abe:	601a      	str	r2, [r3, #0]
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ac8:	f001 f8f4 	bl	800acb4 <vPortExitCritical>

	return xAlreadyYielded;
 8009acc:	68bb      	ldr	r3, [r7, #8]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3710      	adds	r7, #16
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	20001c88 	.word	0x20001c88
 8009adc:	20001c60 	.word	0x20001c60
 8009ae0:	20001c20 	.word	0x20001c20
 8009ae4:	20001c68 	.word	0x20001c68
 8009ae8:	20001790 	.word	0x20001790
 8009aec:	2000178c 	.word	0x2000178c
 8009af0:	20001c74 	.word	0x20001c74
 8009af4:	20001c70 	.word	0x20001c70
 8009af8:	e000ed04 	.word	0xe000ed04

08009afc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b02:	4b05      	ldr	r3, [pc, #20]	; (8009b18 <xTaskGetTickCount+0x1c>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b08:	687b      	ldr	r3, [r7, #4]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	370c      	adds	r7, #12
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	20001c64 	.word	0x20001c64

08009b1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b086      	sub	sp, #24
 8009b20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b22:	2300      	movs	r3, #0
 8009b24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b26:	4b4f      	ldr	r3, [pc, #316]	; (8009c64 <xTaskIncrementTick+0x148>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f040 808f 	bne.w	8009c4e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b30:	4b4d      	ldr	r3, [pc, #308]	; (8009c68 <xTaskIncrementTick+0x14c>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	3301      	adds	r3, #1
 8009b36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b38:	4a4b      	ldr	r2, [pc, #300]	; (8009c68 <xTaskIncrementTick+0x14c>)
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d120      	bne.n	8009b86 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b44:	4b49      	ldr	r3, [pc, #292]	; (8009c6c <xTaskIncrementTick+0x150>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00a      	beq.n	8009b64 <xTaskIncrementTick+0x48>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	603b      	str	r3, [r7, #0]
}
 8009b60:	bf00      	nop
 8009b62:	e7fe      	b.n	8009b62 <xTaskIncrementTick+0x46>
 8009b64:	4b41      	ldr	r3, [pc, #260]	; (8009c6c <xTaskIncrementTick+0x150>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	60fb      	str	r3, [r7, #12]
 8009b6a:	4b41      	ldr	r3, [pc, #260]	; (8009c70 <xTaskIncrementTick+0x154>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a3f      	ldr	r2, [pc, #252]	; (8009c6c <xTaskIncrementTick+0x150>)
 8009b70:	6013      	str	r3, [r2, #0]
 8009b72:	4a3f      	ldr	r2, [pc, #252]	; (8009c70 <xTaskIncrementTick+0x154>)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6013      	str	r3, [r2, #0]
 8009b78:	4b3e      	ldr	r3, [pc, #248]	; (8009c74 <xTaskIncrementTick+0x158>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	4a3d      	ldr	r2, [pc, #244]	; (8009c74 <xTaskIncrementTick+0x158>)
 8009b80:	6013      	str	r3, [r2, #0]
 8009b82:	f000 faeb 	bl	800a15c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b86:	4b3c      	ldr	r3, [pc, #240]	; (8009c78 <xTaskIncrementTick+0x15c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	693a      	ldr	r2, [r7, #16]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d349      	bcc.n	8009c24 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b90:	4b36      	ldr	r3, [pc, #216]	; (8009c6c <xTaskIncrementTick+0x150>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d104      	bne.n	8009ba4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b9a:	4b37      	ldr	r3, [pc, #220]	; (8009c78 <xTaskIncrementTick+0x15c>)
 8009b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba0:	601a      	str	r2, [r3, #0]
					break;
 8009ba2:	e03f      	b.n	8009c24 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ba4:	4b31      	ldr	r3, [pc, #196]	; (8009c6c <xTaskIncrementTick+0x150>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009bb4:	693a      	ldr	r2, [r7, #16]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d203      	bcs.n	8009bc4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009bbc:	4a2e      	ldr	r2, [pc, #184]	; (8009c78 <xTaskIncrementTick+0x15c>)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009bc2:	e02f      	b.n	8009c24 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	3304      	adds	r3, #4
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f7fe fd23 	bl	8008614 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d004      	beq.n	8009be0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	3318      	adds	r3, #24
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fe fd1a 	bl	8008614 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009be4:	4b25      	ldr	r3, [pc, #148]	; (8009c7c <xTaskIncrementTick+0x160>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d903      	bls.n	8009bf4 <xTaskIncrementTick+0xd8>
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf0:	4a22      	ldr	r2, [pc, #136]	; (8009c7c <xTaskIncrementTick+0x160>)
 8009bf2:	6013      	str	r3, [r2, #0]
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4413      	add	r3, r2
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	4a1f      	ldr	r2, [pc, #124]	; (8009c80 <xTaskIncrementTick+0x164>)
 8009c02:	441a      	add	r2, r3
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	3304      	adds	r3, #4
 8009c08:	4619      	mov	r1, r3
 8009c0a:	4610      	mov	r0, r2
 8009c0c:	f7fe fca5 	bl	800855a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c14:	4b1b      	ldr	r3, [pc, #108]	; (8009c84 <xTaskIncrementTick+0x168>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d3b8      	bcc.n	8009b90 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c22:	e7b5      	b.n	8009b90 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c24:	4b17      	ldr	r3, [pc, #92]	; (8009c84 <xTaskIncrementTick+0x168>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c2a:	4915      	ldr	r1, [pc, #84]	; (8009c80 <xTaskIncrementTick+0x164>)
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4413      	add	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	440b      	add	r3, r1
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d901      	bls.n	8009c40 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009c40:	4b11      	ldr	r3, [pc, #68]	; (8009c88 <xTaskIncrementTick+0x16c>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d007      	beq.n	8009c58 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	617b      	str	r3, [r7, #20]
 8009c4c:	e004      	b.n	8009c58 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009c4e:	4b0f      	ldr	r3, [pc, #60]	; (8009c8c <xTaskIncrementTick+0x170>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	3301      	adds	r3, #1
 8009c54:	4a0d      	ldr	r2, [pc, #52]	; (8009c8c <xTaskIncrementTick+0x170>)
 8009c56:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009c58:	697b      	ldr	r3, [r7, #20]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3718      	adds	r7, #24
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	20001c88 	.word	0x20001c88
 8009c68:	20001c64 	.word	0x20001c64
 8009c6c:	20001c18 	.word	0x20001c18
 8009c70:	20001c1c 	.word	0x20001c1c
 8009c74:	20001c78 	.word	0x20001c78
 8009c78:	20001c80 	.word	0x20001c80
 8009c7c:	20001c68 	.word	0x20001c68
 8009c80:	20001790 	.word	0x20001790
 8009c84:	2000178c 	.word	0x2000178c
 8009c88:	20001c74 	.word	0x20001c74
 8009c8c:	20001c70 	.word	0x20001c70

08009c90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c96:	4b33      	ldr	r3, [pc, #204]	; (8009d64 <vTaskSwitchContext+0xd4>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d003      	beq.n	8009ca6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c9e:	4b32      	ldr	r3, [pc, #200]	; (8009d68 <vTaskSwitchContext+0xd8>)
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ca4:	e05a      	b.n	8009d5c <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 8009ca6:	4b30      	ldr	r3, [pc, #192]	; (8009d68 <vTaskSwitchContext+0xd8>)
 8009ca8:	2200      	movs	r2, #0
 8009caa:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009cac:	f7f7 fa47 	bl	800113e <getRunTimeCounterValue>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	4a2e      	ldr	r2, [pc, #184]	; (8009d6c <vTaskSwitchContext+0xdc>)
 8009cb4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009cb6:	4b2d      	ldr	r3, [pc, #180]	; (8009d6c <vTaskSwitchContext+0xdc>)
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	4b2d      	ldr	r3, [pc, #180]	; (8009d70 <vTaskSwitchContext+0xe0>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d909      	bls.n	8009cd6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009cc2:	4b2c      	ldr	r3, [pc, #176]	; (8009d74 <vTaskSwitchContext+0xe4>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8009cc8:	4a28      	ldr	r2, [pc, #160]	; (8009d6c <vTaskSwitchContext+0xdc>)
 8009cca:	6810      	ldr	r0, [r2, #0]
 8009ccc:	4a28      	ldr	r2, [pc, #160]	; (8009d70 <vTaskSwitchContext+0xe0>)
 8009cce:	6812      	ldr	r2, [r2, #0]
 8009cd0:	1a82      	subs	r2, r0, r2
 8009cd2:	440a      	add	r2, r1
 8009cd4:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009cd6:	4b25      	ldr	r3, [pc, #148]	; (8009d6c <vTaskSwitchContext+0xdc>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a25      	ldr	r2, [pc, #148]	; (8009d70 <vTaskSwitchContext+0xe0>)
 8009cdc:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cde:	4b26      	ldr	r3, [pc, #152]	; (8009d78 <vTaskSwitchContext+0xe8>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	60fb      	str	r3, [r7, #12]
 8009ce4:	e010      	b.n	8009d08 <vTaskSwitchContext+0x78>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10a      	bne.n	8009d02 <vTaskSwitchContext+0x72>
	__asm volatile
 8009cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf0:	f383 8811 	msr	BASEPRI, r3
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	607b      	str	r3, [r7, #4]
}
 8009cfe:	bf00      	nop
 8009d00:	e7fe      	b.n	8009d00 <vTaskSwitchContext+0x70>
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	3b01      	subs	r3, #1
 8009d06:	60fb      	str	r3, [r7, #12]
 8009d08:	491c      	ldr	r1, [pc, #112]	; (8009d7c <vTaskSwitchContext+0xec>)
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	440b      	add	r3, r1
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d0e4      	beq.n	8009ce6 <vTaskSwitchContext+0x56>
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	4613      	mov	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	4413      	add	r3, r2
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4a15      	ldr	r2, [pc, #84]	; (8009d7c <vTaskSwitchContext+0xec>)
 8009d28:	4413      	add	r3, r2
 8009d2a:	60bb      	str	r3, [r7, #8]
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	685a      	ldr	r2, [r3, #4]
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	605a      	str	r2, [r3, #4]
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	685a      	ldr	r2, [r3, #4]
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	3308      	adds	r3, #8
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d104      	bne.n	8009d4c <vTaskSwitchContext+0xbc>
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	685a      	ldr	r2, [r3, #4]
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	605a      	str	r2, [r3, #4]
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	4a08      	ldr	r2, [pc, #32]	; (8009d74 <vTaskSwitchContext+0xe4>)
 8009d54:	6013      	str	r3, [r2, #0]
 8009d56:	4a08      	ldr	r2, [pc, #32]	; (8009d78 <vTaskSwitchContext+0xe8>)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6013      	str	r3, [r2, #0]
}
 8009d5c:	bf00      	nop
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	20001c88 	.word	0x20001c88
 8009d68:	20001c74 	.word	0x20001c74
 8009d6c:	20001c90 	.word	0x20001c90
 8009d70:	20001c8c 	.word	0x20001c8c
 8009d74:	2000178c 	.word	0x2000178c
 8009d78:	20001c68 	.word	0x20001c68
 8009d7c:	20001790 	.word	0x20001790

08009d80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10a      	bne.n	8009da6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	60fb      	str	r3, [r7, #12]
}
 8009da2:	bf00      	nop
 8009da4:	e7fe      	b.n	8009da4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009da6:	4b07      	ldr	r3, [pc, #28]	; (8009dc4 <vTaskPlaceOnEventList+0x44>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	3318      	adds	r3, #24
 8009dac:	4619      	mov	r1, r3
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7fe fbf7 	bl	80085a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009db4:	2101      	movs	r1, #1
 8009db6:	6838      	ldr	r0, [r7, #0]
 8009db8:	f000 fa7c 	bl	800a2b4 <prvAddCurrentTaskToDelayedList>
}
 8009dbc:	bf00      	nop
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	2000178c 	.word	0x2000178c

08009dc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10a      	bne.n	8009df0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dde:	f383 8811 	msr	BASEPRI, r3
 8009de2:	f3bf 8f6f 	isb	sy
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	617b      	str	r3, [r7, #20]
}
 8009dec:	bf00      	nop
 8009dee:	e7fe      	b.n	8009dee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009df0:	4b0a      	ldr	r3, [pc, #40]	; (8009e1c <vTaskPlaceOnEventListRestricted+0x54>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	3318      	adds	r3, #24
 8009df6:	4619      	mov	r1, r3
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f7fe fbae 	bl	800855a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d002      	beq.n	8009e0a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009e04:	f04f 33ff 	mov.w	r3, #4294967295
 8009e08:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009e0a:	6879      	ldr	r1, [r7, #4]
 8009e0c:	68b8      	ldr	r0, [r7, #8]
 8009e0e:	f000 fa51 	bl	800a2b4 <prvAddCurrentTaskToDelayedList>
	}
 8009e12:	bf00      	nop
 8009e14:	3718      	adds	r7, #24
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	2000178c 	.word	0x2000178c

08009e20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b086      	sub	sp, #24
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10a      	bne.n	8009e4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3a:	f383 8811 	msr	BASEPRI, r3
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	60fb      	str	r3, [r7, #12]
}
 8009e48:	bf00      	nop
 8009e4a:	e7fe      	b.n	8009e4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	3318      	adds	r3, #24
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7fe fbdf 	bl	8008614 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e56:	4b1e      	ldr	r3, [pc, #120]	; (8009ed0 <xTaskRemoveFromEventList+0xb0>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d11d      	bne.n	8009e9a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	3304      	adds	r3, #4
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fe fbd6 	bl	8008614 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e6c:	4b19      	ldr	r3, [pc, #100]	; (8009ed4 <xTaskRemoveFromEventList+0xb4>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d903      	bls.n	8009e7c <xTaskRemoveFromEventList+0x5c>
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e78:	4a16      	ldr	r2, [pc, #88]	; (8009ed4 <xTaskRemoveFromEventList+0xb4>)
 8009e7a:	6013      	str	r3, [r2, #0]
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e80:	4613      	mov	r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4413      	add	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4a13      	ldr	r2, [pc, #76]	; (8009ed8 <xTaskRemoveFromEventList+0xb8>)
 8009e8a:	441a      	add	r2, r3
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	3304      	adds	r3, #4
 8009e90:	4619      	mov	r1, r3
 8009e92:	4610      	mov	r0, r2
 8009e94:	f7fe fb61 	bl	800855a <vListInsertEnd>
 8009e98:	e005      	b.n	8009ea6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	3318      	adds	r3, #24
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	480e      	ldr	r0, [pc, #56]	; (8009edc <xTaskRemoveFromEventList+0xbc>)
 8009ea2:	f7fe fb5a 	bl	800855a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eaa:	4b0d      	ldr	r3, [pc, #52]	; (8009ee0 <xTaskRemoveFromEventList+0xc0>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d905      	bls.n	8009ec0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009eb8:	4b0a      	ldr	r3, [pc, #40]	; (8009ee4 <xTaskRemoveFromEventList+0xc4>)
 8009eba:	2201      	movs	r2, #1
 8009ebc:	601a      	str	r2, [r3, #0]
 8009ebe:	e001      	b.n	8009ec4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ec4:	697b      	ldr	r3, [r7, #20]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3718      	adds	r7, #24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	20001c88 	.word	0x20001c88
 8009ed4:	20001c68 	.word	0x20001c68
 8009ed8:	20001790 	.word	0x20001790
 8009edc:	20001c20 	.word	0x20001c20
 8009ee0:	2000178c 	.word	0x2000178c
 8009ee4:	20001c74 	.word	0x20001c74

08009ee8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ef0:	4b06      	ldr	r3, [pc, #24]	; (8009f0c <vTaskInternalSetTimeOutState+0x24>)
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ef8:	4b05      	ldr	r3, [pc, #20]	; (8009f10 <vTaskInternalSetTimeOutState+0x28>)
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	605a      	str	r2, [r3, #4]
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr
 8009f0c:	20001c78 	.word	0x20001c78
 8009f10:	20001c64 	.word	0x20001c64

08009f14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b088      	sub	sp, #32
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10a      	bne.n	8009f3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	613b      	str	r3, [r7, #16]
}
 8009f36:	bf00      	nop
 8009f38:	e7fe      	b.n	8009f38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d10a      	bne.n	8009f56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	60fb      	str	r3, [r7, #12]
}
 8009f52:	bf00      	nop
 8009f54:	e7fe      	b.n	8009f54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009f56:	f000 fe7d 	bl	800ac54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009f5a:	4b1d      	ldr	r3, [pc, #116]	; (8009fd0 <xTaskCheckForTimeOut+0xbc>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	69ba      	ldr	r2, [r7, #24]
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f72:	d102      	bne.n	8009f7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009f74:	2300      	movs	r3, #0
 8009f76:	61fb      	str	r3, [r7, #28]
 8009f78:	e023      	b.n	8009fc2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	4b15      	ldr	r3, [pc, #84]	; (8009fd4 <xTaskCheckForTimeOut+0xc0>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d007      	beq.n	8009f96 <xTaskCheckForTimeOut+0x82>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	69ba      	ldr	r2, [r7, #24]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d302      	bcc.n	8009f96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009f90:	2301      	movs	r3, #1
 8009f92:	61fb      	str	r3, [r7, #28]
 8009f94:	e015      	b.n	8009fc2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	697a      	ldr	r2, [r7, #20]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d20b      	bcs.n	8009fb8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	1ad2      	subs	r2, r2, r3
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f7ff ff9b 	bl	8009ee8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	61fb      	str	r3, [r7, #28]
 8009fb6:	e004      	b.n	8009fc2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009fc2:	f000 fe77 	bl	800acb4 <vPortExitCritical>

	return xReturn;
 8009fc6:	69fb      	ldr	r3, [r7, #28]
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3720      	adds	r7, #32
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	20001c64 	.word	0x20001c64
 8009fd4:	20001c78 	.word	0x20001c78

08009fd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009fd8:	b480      	push	{r7}
 8009fda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009fdc:	4b03      	ldr	r3, [pc, #12]	; (8009fec <vTaskMissedYield+0x14>)
 8009fde:	2201      	movs	r2, #1
 8009fe0:	601a      	str	r2, [r3, #0]
}
 8009fe2:	bf00      	nop
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr
 8009fec:	20001c74 	.word	0x20001c74

08009ff0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ff8:	f000 f852 	bl	800a0a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ffc:	4b06      	ldr	r3, [pc, #24]	; (800a018 <prvIdleTask+0x28>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d9f9      	bls.n	8009ff8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a004:	4b05      	ldr	r3, [pc, #20]	; (800a01c <prvIdleTask+0x2c>)
 800a006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a00a:	601a      	str	r2, [r3, #0]
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a014:	e7f0      	b.n	8009ff8 <prvIdleTask+0x8>
 800a016:	bf00      	nop
 800a018:	20001790 	.word	0x20001790
 800a01c:	e000ed04 	.word	0xe000ed04

0800a020 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a026:	2300      	movs	r3, #0
 800a028:	607b      	str	r3, [r7, #4]
 800a02a:	e00c      	b.n	800a046 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	4613      	mov	r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	4413      	add	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4a12      	ldr	r2, [pc, #72]	; (800a080 <prvInitialiseTaskLists+0x60>)
 800a038:	4413      	add	r3, r2
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fe fa60 	bl	8008500 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	3301      	adds	r3, #1
 800a044:	607b      	str	r3, [r7, #4]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2b37      	cmp	r3, #55	; 0x37
 800a04a:	d9ef      	bls.n	800a02c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a04c:	480d      	ldr	r0, [pc, #52]	; (800a084 <prvInitialiseTaskLists+0x64>)
 800a04e:	f7fe fa57 	bl	8008500 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a052:	480d      	ldr	r0, [pc, #52]	; (800a088 <prvInitialiseTaskLists+0x68>)
 800a054:	f7fe fa54 	bl	8008500 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a058:	480c      	ldr	r0, [pc, #48]	; (800a08c <prvInitialiseTaskLists+0x6c>)
 800a05a:	f7fe fa51 	bl	8008500 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a05e:	480c      	ldr	r0, [pc, #48]	; (800a090 <prvInitialiseTaskLists+0x70>)
 800a060:	f7fe fa4e 	bl	8008500 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a064:	480b      	ldr	r0, [pc, #44]	; (800a094 <prvInitialiseTaskLists+0x74>)
 800a066:	f7fe fa4b 	bl	8008500 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a06a:	4b0b      	ldr	r3, [pc, #44]	; (800a098 <prvInitialiseTaskLists+0x78>)
 800a06c:	4a05      	ldr	r2, [pc, #20]	; (800a084 <prvInitialiseTaskLists+0x64>)
 800a06e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a070:	4b0a      	ldr	r3, [pc, #40]	; (800a09c <prvInitialiseTaskLists+0x7c>)
 800a072:	4a05      	ldr	r2, [pc, #20]	; (800a088 <prvInitialiseTaskLists+0x68>)
 800a074:	601a      	str	r2, [r3, #0]
}
 800a076:	bf00      	nop
 800a078:	3708      	adds	r7, #8
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	20001790 	.word	0x20001790
 800a084:	20001bf0 	.word	0x20001bf0
 800a088:	20001c04 	.word	0x20001c04
 800a08c:	20001c20 	.word	0x20001c20
 800a090:	20001c34 	.word	0x20001c34
 800a094:	20001c4c 	.word	0x20001c4c
 800a098:	20001c18 	.word	0x20001c18
 800a09c:	20001c1c 	.word	0x20001c1c

0800a0a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0a6:	e019      	b.n	800a0dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a0a8:	f000 fdd4 	bl	800ac54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0ac:	4b10      	ldr	r3, [pc, #64]	; (800a0f0 <prvCheckTasksWaitingTermination+0x50>)
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	3304      	adds	r3, #4
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7fe faab 	bl	8008614 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a0be:	4b0d      	ldr	r3, [pc, #52]	; (800a0f4 <prvCheckTasksWaitingTermination+0x54>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	3b01      	subs	r3, #1
 800a0c4:	4a0b      	ldr	r2, [pc, #44]	; (800a0f4 <prvCheckTasksWaitingTermination+0x54>)
 800a0c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a0c8:	4b0b      	ldr	r3, [pc, #44]	; (800a0f8 <prvCheckTasksWaitingTermination+0x58>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	4a0a      	ldr	r2, [pc, #40]	; (800a0f8 <prvCheckTasksWaitingTermination+0x58>)
 800a0d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a0d2:	f000 fdef 	bl	800acb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f810 	bl	800a0fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0dc:	4b06      	ldr	r3, [pc, #24]	; (800a0f8 <prvCheckTasksWaitingTermination+0x58>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d1e1      	bne.n	800a0a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a0e4:	bf00      	nop
 800a0e6:	bf00      	nop
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20001c34 	.word	0x20001c34
 800a0f4:	20001c60 	.word	0x20001c60
 800a0f8:	20001c48 	.word	0x20001c48

0800a0fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d108      	bne.n	800a120 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a112:	4618      	mov	r0, r3
 800a114:	f000 ff8c 	bl	800b030 <vPortFree>
				vPortFree( pxTCB );
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 ff89 	bl	800b030 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a11e:	e018      	b.n	800a152 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a126:	2b01      	cmp	r3, #1
 800a128:	d103      	bne.n	800a132 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 ff80 	bl	800b030 <vPortFree>
	}
 800a130:	e00f      	b.n	800a152 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d00a      	beq.n	800a152 <prvDeleteTCB+0x56>
	__asm volatile
 800a13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a140:	f383 8811 	msr	BASEPRI, r3
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	60fb      	str	r3, [r7, #12]
}
 800a14e:	bf00      	nop
 800a150:	e7fe      	b.n	800a150 <prvDeleteTCB+0x54>
	}
 800a152:	bf00      	nop
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
	...

0800a15c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a162:	4b0c      	ldr	r3, [pc, #48]	; (800a194 <prvResetNextTaskUnblockTime+0x38>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d104      	bne.n	800a176 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a16c:	4b0a      	ldr	r3, [pc, #40]	; (800a198 <prvResetNextTaskUnblockTime+0x3c>)
 800a16e:	f04f 32ff 	mov.w	r2, #4294967295
 800a172:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a174:	e008      	b.n	800a188 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a176:	4b07      	ldr	r3, [pc, #28]	; (800a194 <prvResetNextTaskUnblockTime+0x38>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	4a04      	ldr	r2, [pc, #16]	; (800a198 <prvResetNextTaskUnblockTime+0x3c>)
 800a186:	6013      	str	r3, [r2, #0]
}
 800a188:	bf00      	nop
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr
 800a194:	20001c18 	.word	0x20001c18
 800a198:	20001c80 	.word	0x20001c80

0800a19c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a1a2:	4b0b      	ldr	r3, [pc, #44]	; (800a1d0 <xTaskGetSchedulerState+0x34>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d102      	bne.n	800a1b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	607b      	str	r3, [r7, #4]
 800a1ae:	e008      	b.n	800a1c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1b0:	4b08      	ldr	r3, [pc, #32]	; (800a1d4 <xTaskGetSchedulerState+0x38>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d102      	bne.n	800a1be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a1b8:	2302      	movs	r3, #2
 800a1ba:	607b      	str	r3, [r7, #4]
 800a1bc:	e001      	b.n	800a1c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a1c2:	687b      	ldr	r3, [r7, #4]
	}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr
 800a1d0:	20001c6c 	.word	0x20001c6c
 800a1d4:	20001c88 	.word	0x20001c88

0800a1d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d056      	beq.n	800a29c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a1ee:	4b2e      	ldr	r3, [pc, #184]	; (800a2a8 <xTaskPriorityDisinherit+0xd0>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	693a      	ldr	r2, [r7, #16]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d00a      	beq.n	800a20e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fc:	f383 8811 	msr	BASEPRI, r3
 800a200:	f3bf 8f6f 	isb	sy
 800a204:	f3bf 8f4f 	dsb	sy
 800a208:	60fb      	str	r3, [r7, #12]
}
 800a20a:	bf00      	nop
 800a20c:	e7fe      	b.n	800a20c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a212:	2b00      	cmp	r3, #0
 800a214:	d10a      	bne.n	800a22c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21a:	f383 8811 	msr	BASEPRI, r3
 800a21e:	f3bf 8f6f 	isb	sy
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	60bb      	str	r3, [r7, #8]
}
 800a228:	bf00      	nop
 800a22a:	e7fe      	b.n	800a22a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a230:	1e5a      	subs	r2, r3, #1
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a23e:	429a      	cmp	r2, r3
 800a240:	d02c      	beq.n	800a29c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a246:	2b00      	cmp	r3, #0
 800a248:	d128      	bne.n	800a29c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	3304      	adds	r3, #4
 800a24e:	4618      	mov	r0, r3
 800a250:	f7fe f9e0 	bl	8008614 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a260:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a26c:	4b0f      	ldr	r3, [pc, #60]	; (800a2ac <xTaskPriorityDisinherit+0xd4>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	429a      	cmp	r2, r3
 800a272:	d903      	bls.n	800a27c <xTaskPriorityDisinherit+0xa4>
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a278:	4a0c      	ldr	r2, [pc, #48]	; (800a2ac <xTaskPriorityDisinherit+0xd4>)
 800a27a:	6013      	str	r3, [r2, #0]
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a280:	4613      	mov	r3, r2
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4413      	add	r3, r2
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	4a09      	ldr	r2, [pc, #36]	; (800a2b0 <xTaskPriorityDisinherit+0xd8>)
 800a28a:	441a      	add	r2, r3
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	3304      	adds	r3, #4
 800a290:	4619      	mov	r1, r3
 800a292:	4610      	mov	r0, r2
 800a294:	f7fe f961 	bl	800855a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a298:	2301      	movs	r3, #1
 800a29a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a29c:	697b      	ldr	r3, [r7, #20]
	}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	2000178c 	.word	0x2000178c
 800a2ac:	20001c68 	.word	0x20001c68
 800a2b0:	20001790 	.word	0x20001790

0800a2b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a2be:	4b21      	ldr	r3, [pc, #132]	; (800a344 <prvAddCurrentTaskToDelayedList+0x90>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2c4:	4b20      	ldr	r3, [pc, #128]	; (800a348 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	3304      	adds	r3, #4
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7fe f9a2 	bl	8008614 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d6:	d10a      	bne.n	800a2ee <prvAddCurrentTaskToDelayedList+0x3a>
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d007      	beq.n	800a2ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2de:	4b1a      	ldr	r3, [pc, #104]	; (800a348 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	3304      	adds	r3, #4
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	4819      	ldr	r0, [pc, #100]	; (800a34c <prvAddCurrentTaskToDelayedList+0x98>)
 800a2e8:	f7fe f937 	bl	800855a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a2ec:	e026      	b.n	800a33c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a2f6:	4b14      	ldr	r3, [pc, #80]	; (800a348 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a2fe:	68ba      	ldr	r2, [r7, #8]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	429a      	cmp	r2, r3
 800a304:	d209      	bcs.n	800a31a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a306:	4b12      	ldr	r3, [pc, #72]	; (800a350 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	4b0f      	ldr	r3, [pc, #60]	; (800a348 <prvAddCurrentTaskToDelayedList+0x94>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	3304      	adds	r3, #4
 800a310:	4619      	mov	r1, r3
 800a312:	4610      	mov	r0, r2
 800a314:	f7fe f945 	bl	80085a2 <vListInsert>
}
 800a318:	e010      	b.n	800a33c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a31a:	4b0e      	ldr	r3, [pc, #56]	; (800a354 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	4b0a      	ldr	r3, [pc, #40]	; (800a348 <prvAddCurrentTaskToDelayedList+0x94>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	3304      	adds	r3, #4
 800a324:	4619      	mov	r1, r3
 800a326:	4610      	mov	r0, r2
 800a328:	f7fe f93b 	bl	80085a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a32c:	4b0a      	ldr	r3, [pc, #40]	; (800a358 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68ba      	ldr	r2, [r7, #8]
 800a332:	429a      	cmp	r2, r3
 800a334:	d202      	bcs.n	800a33c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a336:	4a08      	ldr	r2, [pc, #32]	; (800a358 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	6013      	str	r3, [r2, #0]
}
 800a33c:	bf00      	nop
 800a33e:	3710      	adds	r7, #16
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	20001c64 	.word	0x20001c64
 800a348:	2000178c 	.word	0x2000178c
 800a34c:	20001c4c 	.word	0x20001c4c
 800a350:	20001c1c 	.word	0x20001c1c
 800a354:	20001c18 	.word	0x20001c18
 800a358:	20001c80 	.word	0x20001c80

0800a35c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b08a      	sub	sp, #40	; 0x28
 800a360:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a362:	2300      	movs	r3, #0
 800a364:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a366:	f000 fb07 	bl	800a978 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a36a:	4b1c      	ldr	r3, [pc, #112]	; (800a3dc <xTimerCreateTimerTask+0x80>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d021      	beq.n	800a3b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a372:	2300      	movs	r3, #0
 800a374:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a376:	2300      	movs	r3, #0
 800a378:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a37a:	1d3a      	adds	r2, r7, #4
 800a37c:	f107 0108 	add.w	r1, r7, #8
 800a380:	f107 030c 	add.w	r3, r7, #12
 800a384:	4618      	mov	r0, r3
 800a386:	f7fe f8a1 	bl	80084cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a38a:	6879      	ldr	r1, [r7, #4]
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	9202      	str	r2, [sp, #8]
 800a392:	9301      	str	r3, [sp, #4]
 800a394:	2302      	movs	r3, #2
 800a396:	9300      	str	r3, [sp, #0]
 800a398:	2300      	movs	r3, #0
 800a39a:	460a      	mov	r2, r1
 800a39c:	4910      	ldr	r1, [pc, #64]	; (800a3e0 <xTimerCreateTimerTask+0x84>)
 800a39e:	4811      	ldr	r0, [pc, #68]	; (800a3e4 <xTimerCreateTimerTask+0x88>)
 800a3a0:	f7fe ff44 	bl	800922c <xTaskCreateStatic>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	4a10      	ldr	r2, [pc, #64]	; (800a3e8 <xTimerCreateTimerTask+0x8c>)
 800a3a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a3aa:	4b0f      	ldr	r3, [pc, #60]	; (800a3e8 <xTimerCreateTimerTask+0x8c>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d001      	beq.n	800a3b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d10a      	bne.n	800a3d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c0:	f383 8811 	msr	BASEPRI, r3
 800a3c4:	f3bf 8f6f 	isb	sy
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	613b      	str	r3, [r7, #16]
}
 800a3ce:	bf00      	nop
 800a3d0:	e7fe      	b.n	800a3d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a3d2:	697b      	ldr	r3, [r7, #20]
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3718      	adds	r7, #24
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	20001cc4 	.word	0x20001cc4
 800a3e0:	08010f1c 	.word	0x08010f1c
 800a3e4:	0800a521 	.word	0x0800a521
 800a3e8:	20001cc8 	.word	0x20001cc8

0800a3ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b08a      	sub	sp, #40	; 0x28
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
 800a3f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d10a      	bne.n	800a41a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a408:	f383 8811 	msr	BASEPRI, r3
 800a40c:	f3bf 8f6f 	isb	sy
 800a410:	f3bf 8f4f 	dsb	sy
 800a414:	623b      	str	r3, [r7, #32]
}
 800a416:	bf00      	nop
 800a418:	e7fe      	b.n	800a418 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a41a:	4b1a      	ldr	r3, [pc, #104]	; (800a484 <xTimerGenericCommand+0x98>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d02a      	beq.n	800a478 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	2b05      	cmp	r3, #5
 800a432:	dc18      	bgt.n	800a466 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a434:	f7ff feb2 	bl	800a19c <xTaskGetSchedulerState>
 800a438:	4603      	mov	r3, r0
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d109      	bne.n	800a452 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a43e:	4b11      	ldr	r3, [pc, #68]	; (800a484 <xTimerGenericCommand+0x98>)
 800a440:	6818      	ldr	r0, [r3, #0]
 800a442:	f107 0110 	add.w	r1, r7, #16
 800a446:	2300      	movs	r3, #0
 800a448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a44a:	f7fe fa4b 	bl	80088e4 <xQueueGenericSend>
 800a44e:	6278      	str	r0, [r7, #36]	; 0x24
 800a450:	e012      	b.n	800a478 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a452:	4b0c      	ldr	r3, [pc, #48]	; (800a484 <xTimerGenericCommand+0x98>)
 800a454:	6818      	ldr	r0, [r3, #0]
 800a456:	f107 0110 	add.w	r1, r7, #16
 800a45a:	2300      	movs	r3, #0
 800a45c:	2200      	movs	r2, #0
 800a45e:	f7fe fa41 	bl	80088e4 <xQueueGenericSend>
 800a462:	6278      	str	r0, [r7, #36]	; 0x24
 800a464:	e008      	b.n	800a478 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a466:	4b07      	ldr	r3, [pc, #28]	; (800a484 <xTimerGenericCommand+0x98>)
 800a468:	6818      	ldr	r0, [r3, #0]
 800a46a:	f107 0110 	add.w	r1, r7, #16
 800a46e:	2300      	movs	r3, #0
 800a470:	683a      	ldr	r2, [r7, #0]
 800a472:	f7fe fb35 	bl	8008ae0 <xQueueGenericSendFromISR>
 800a476:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3728      	adds	r7, #40	; 0x28
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	20001cc4 	.word	0x20001cc4

0800a488 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b088      	sub	sp, #32
 800a48c:	af02      	add	r7, sp, #8
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a492:	4b22      	ldr	r3, [pc, #136]	; (800a51c <prvProcessExpiredTimer+0x94>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	3304      	adds	r3, #4
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7fe f8b7 	bl	8008614 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4ac:	f003 0304 	and.w	r3, r3, #4
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d022      	beq.n	800a4fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	699a      	ldr	r2, [r3, #24]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	18d1      	adds	r1, r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	683a      	ldr	r2, [r7, #0]
 800a4c0:	6978      	ldr	r0, [r7, #20]
 800a4c2:	f000 f8d1 	bl	800a668 <prvInsertTimerInActiveList>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d01f      	beq.n	800a50c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	9300      	str	r3, [sp, #0]
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	6978      	ldr	r0, [r7, #20]
 800a4d8:	f7ff ff88 	bl	800a3ec <xTimerGenericCommand>
 800a4dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d113      	bne.n	800a50c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e8:	f383 8811 	msr	BASEPRI, r3
 800a4ec:	f3bf 8f6f 	isb	sy
 800a4f0:	f3bf 8f4f 	dsb	sy
 800a4f4:	60fb      	str	r3, [r7, #12]
}
 800a4f6:	bf00      	nop
 800a4f8:	e7fe      	b.n	800a4f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a500:	f023 0301 	bic.w	r3, r3, #1
 800a504:	b2da      	uxtb	r2, r3
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	6a1b      	ldr	r3, [r3, #32]
 800a510:	6978      	ldr	r0, [r7, #20]
 800a512:	4798      	blx	r3
}
 800a514:	bf00      	nop
 800a516:	3718      	adds	r7, #24
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	20001cbc 	.word	0x20001cbc

0800a520 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a528:	f107 0308 	add.w	r3, r7, #8
 800a52c:	4618      	mov	r0, r3
 800a52e:	f000 f857 	bl	800a5e0 <prvGetNextExpireTime>
 800a532:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	4619      	mov	r1, r3
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f000 f803 	bl	800a544 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a53e:	f000 f8d5 	bl	800a6ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a542:	e7f1      	b.n	800a528 <prvTimerTask+0x8>

0800a544 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a54e:	f7ff fa29 	bl	80099a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a552:	f107 0308 	add.w	r3, r7, #8
 800a556:	4618      	mov	r0, r3
 800a558:	f000 f866 	bl	800a628 <prvSampleTimeNow>
 800a55c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d130      	bne.n	800a5c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d10a      	bne.n	800a580 <prvProcessTimerOrBlockTask+0x3c>
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d806      	bhi.n	800a580 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a572:	f7ff fa25 	bl	80099c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a576:	68f9      	ldr	r1, [r7, #12]
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f7ff ff85 	bl	800a488 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a57e:	e024      	b.n	800a5ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d008      	beq.n	800a598 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a586:	4b13      	ldr	r3, [pc, #76]	; (800a5d4 <prvProcessTimerOrBlockTask+0x90>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d101      	bne.n	800a594 <prvProcessTimerOrBlockTask+0x50>
 800a590:	2301      	movs	r3, #1
 800a592:	e000      	b.n	800a596 <prvProcessTimerOrBlockTask+0x52>
 800a594:	2300      	movs	r3, #0
 800a596:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a598:	4b0f      	ldr	r3, [pc, #60]	; (800a5d8 <prvProcessTimerOrBlockTask+0x94>)
 800a59a:	6818      	ldr	r0, [r3, #0]
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	683a      	ldr	r2, [r7, #0]
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	f7fe fe0d 	bl	80091c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a5aa:	f7ff fa09 	bl	80099c0 <xTaskResumeAll>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d10a      	bne.n	800a5ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a5b4:	4b09      	ldr	r3, [pc, #36]	; (800a5dc <prvProcessTimerOrBlockTask+0x98>)
 800a5b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5ba:	601a      	str	r2, [r3, #0]
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	f3bf 8f6f 	isb	sy
}
 800a5c4:	e001      	b.n	800a5ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a5c6:	f7ff f9fb 	bl	80099c0 <xTaskResumeAll>
}
 800a5ca:	bf00      	nop
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	20001cc0 	.word	0x20001cc0
 800a5d8:	20001cc4 	.word	0x20001cc4
 800a5dc:	e000ed04 	.word	0xe000ed04

0800a5e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a5e8:	4b0e      	ldr	r3, [pc, #56]	; (800a624 <prvGetNextExpireTime+0x44>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d101      	bne.n	800a5f6 <prvGetNextExpireTime+0x16>
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	e000      	b.n	800a5f8 <prvGetNextExpireTime+0x18>
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d105      	bne.n	800a610 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a604:	4b07      	ldr	r3, [pc, #28]	; (800a624 <prvGetNextExpireTime+0x44>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	60fb      	str	r3, [r7, #12]
 800a60e:	e001      	b.n	800a614 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a610:	2300      	movs	r3, #0
 800a612:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a614:	68fb      	ldr	r3, [r7, #12]
}
 800a616:	4618      	mov	r0, r3
 800a618:	3714      	adds	r7, #20
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	20001cbc 	.word	0x20001cbc

0800a628 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a630:	f7ff fa64 	bl	8009afc <xTaskGetTickCount>
 800a634:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a636:	4b0b      	ldr	r3, [pc, #44]	; (800a664 <prvSampleTimeNow+0x3c>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68fa      	ldr	r2, [r7, #12]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d205      	bcs.n	800a64c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a640:	f000 f936 	bl	800a8b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	601a      	str	r2, [r3, #0]
 800a64a:	e002      	b.n	800a652 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a652:	4a04      	ldr	r2, [pc, #16]	; (800a664 <prvSampleTimeNow+0x3c>)
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a658:	68fb      	ldr	r3, [r7, #12]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	20001ccc 	.word	0x20001ccc

0800a668 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b086      	sub	sp, #24
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	607a      	str	r2, [r7, #4]
 800a674:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a676:	2300      	movs	r3, #0
 800a678:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	68fa      	ldr	r2, [r7, #12]
 800a684:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a686:	68ba      	ldr	r2, [r7, #8]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d812      	bhi.n	800a6b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	1ad2      	subs	r2, r2, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	699b      	ldr	r3, [r3, #24]
 800a698:	429a      	cmp	r2, r3
 800a69a:	d302      	bcc.n	800a6a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a69c:	2301      	movs	r3, #1
 800a69e:	617b      	str	r3, [r7, #20]
 800a6a0:	e01b      	b.n	800a6da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a6a2:	4b10      	ldr	r3, [pc, #64]	; (800a6e4 <prvInsertTimerInActiveList+0x7c>)
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	3304      	adds	r3, #4
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	4610      	mov	r0, r2
 800a6ae:	f7fd ff78 	bl	80085a2 <vListInsert>
 800a6b2:	e012      	b.n	800a6da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d206      	bcs.n	800a6ca <prvInsertTimerInActiveList+0x62>
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d302      	bcc.n	800a6ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	617b      	str	r3, [r7, #20]
 800a6c8:	e007      	b.n	800a6da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6ca:	4b07      	ldr	r3, [pc, #28]	; (800a6e8 <prvInsertTimerInActiveList+0x80>)
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3304      	adds	r3, #4
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	4610      	mov	r0, r2
 800a6d6:	f7fd ff64 	bl	80085a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a6da:	697b      	ldr	r3, [r7, #20]
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3718      	adds	r7, #24
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	20001cc0 	.word	0x20001cc0
 800a6e8:	20001cbc 	.word	0x20001cbc

0800a6ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b08e      	sub	sp, #56	; 0x38
 800a6f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6f2:	e0ca      	b.n	800a88a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	da18      	bge.n	800a72c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a6fa:	1d3b      	adds	r3, r7, #4
 800a6fc:	3304      	adds	r3, #4
 800a6fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a702:	2b00      	cmp	r3, #0
 800a704:	d10a      	bne.n	800a71c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	61fb      	str	r3, [r7, #28]
}
 800a718:	bf00      	nop
 800a71a:	e7fe      	b.n	800a71a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a722:	6850      	ldr	r0, [r2, #4]
 800a724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a726:	6892      	ldr	r2, [r2, #8]
 800a728:	4611      	mov	r1, r2
 800a72a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	f2c0 80ab 	blt.w	800a88a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73a:	695b      	ldr	r3, [r3, #20]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d004      	beq.n	800a74a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a742:	3304      	adds	r3, #4
 800a744:	4618      	mov	r0, r3
 800a746:	f7fd ff65 	bl	8008614 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a74a:	463b      	mov	r3, r7
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7ff ff6b 	bl	800a628 <prvSampleTimeNow>
 800a752:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b09      	cmp	r3, #9
 800a758:	f200 8096 	bhi.w	800a888 <prvProcessReceivedCommands+0x19c>
 800a75c:	a201      	add	r2, pc, #4	; (adr r2, 800a764 <prvProcessReceivedCommands+0x78>)
 800a75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a762:	bf00      	nop
 800a764:	0800a78d 	.word	0x0800a78d
 800a768:	0800a78d 	.word	0x0800a78d
 800a76c:	0800a78d 	.word	0x0800a78d
 800a770:	0800a801 	.word	0x0800a801
 800a774:	0800a815 	.word	0x0800a815
 800a778:	0800a85f 	.word	0x0800a85f
 800a77c:	0800a78d 	.word	0x0800a78d
 800a780:	0800a78d 	.word	0x0800a78d
 800a784:	0800a801 	.word	0x0800a801
 800a788:	0800a815 	.word	0x0800a815
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a792:	f043 0301 	orr.w	r3, r3, #1
 800a796:	b2da      	uxtb	r2, r3
 800a798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a2:	699b      	ldr	r3, [r3, #24]
 800a7a4:	18d1      	adds	r1, r2, r3
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7ac:	f7ff ff5c 	bl	800a668 <prvInsertTimerInActiveList>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d069      	beq.n	800a88a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b8:	6a1b      	ldr	r3, [r3, #32]
 800a7ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7c4:	f003 0304 	and.w	r3, r3, #4
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d05e      	beq.n	800a88a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a7cc:	68ba      	ldr	r2, [r7, #8]
 800a7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d0:	699b      	ldr	r3, [r3, #24]
 800a7d2:	441a      	add	r2, r3
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	2300      	movs	r3, #0
 800a7da:	2100      	movs	r1, #0
 800a7dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7de:	f7ff fe05 	bl	800a3ec <xTimerGenericCommand>
 800a7e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a7e4:	6a3b      	ldr	r3, [r7, #32]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d14f      	bne.n	800a88a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ee:	f383 8811 	msr	BASEPRI, r3
 800a7f2:	f3bf 8f6f 	isb	sy
 800a7f6:	f3bf 8f4f 	dsb	sy
 800a7fa:	61bb      	str	r3, [r7, #24]
}
 800a7fc:	bf00      	nop
 800a7fe:	e7fe      	b.n	800a7fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a802:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a806:	f023 0301 	bic.w	r3, r3, #1
 800a80a:	b2da      	uxtb	r2, r3
 800a80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a812:	e03a      	b.n	800a88a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a81a:	f043 0301 	orr.w	r3, r3, #1
 800a81e:	b2da      	uxtb	r2, r3
 800a820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a826:	68ba      	ldr	r2, [r7, #8]
 800a828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82e:	699b      	ldr	r3, [r3, #24]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d10a      	bne.n	800a84a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a838:	f383 8811 	msr	BASEPRI, r3
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f3bf 8f4f 	dsb	sy
 800a844:	617b      	str	r3, [r7, #20]
}
 800a846:	bf00      	nop
 800a848:	e7fe      	b.n	800a848 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84c:	699a      	ldr	r2, [r3, #24]
 800a84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a850:	18d1      	adds	r1, r2, r3
 800a852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a858:	f7ff ff06 	bl	800a668 <prvInsertTimerInActiveList>
					break;
 800a85c:	e015      	b.n	800a88a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a864:	f003 0302 	and.w	r3, r3, #2
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d103      	bne.n	800a874 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a86c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a86e:	f000 fbdf 	bl	800b030 <vPortFree>
 800a872:	e00a      	b.n	800a88a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a87a:	f023 0301 	bic.w	r3, r3, #1
 800a87e:	b2da      	uxtb	r2, r3
 800a880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a886:	e000      	b.n	800a88a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a888:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a88a:	4b08      	ldr	r3, [pc, #32]	; (800a8ac <prvProcessReceivedCommands+0x1c0>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	1d39      	adds	r1, r7, #4
 800a890:	2200      	movs	r2, #0
 800a892:	4618      	mov	r0, r3
 800a894:	f7fe f9c0 	bl	8008c18 <xQueueReceive>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f47f af2a 	bne.w	800a6f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a8a0:	bf00      	nop
 800a8a2:	bf00      	nop
 800a8a4:	3730      	adds	r7, #48	; 0x30
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	20001cc4 	.word	0x20001cc4

0800a8b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b088      	sub	sp, #32
 800a8b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8b6:	e048      	b.n	800a94a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8b8:	4b2d      	ldr	r3, [pc, #180]	; (800a970 <prvSwitchTimerLists+0xc0>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8c2:	4b2b      	ldr	r3, [pc, #172]	; (800a970 <prvSwitchTimerLists+0xc0>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	3304      	adds	r3, #4
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7fd fe9f 	bl	8008614 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	6a1b      	ldr	r3, [r3, #32]
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8e4:	f003 0304 	and.w	r3, r3, #4
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d02e      	beq.n	800a94a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	699b      	ldr	r3, [r3, #24]
 800a8f0:	693a      	ldr	r2, [r7, #16]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d90e      	bls.n	800a91c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	68ba      	ldr	r2, [r7, #8]
 800a902:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a90a:	4b19      	ldr	r3, [pc, #100]	; (800a970 <prvSwitchTimerLists+0xc0>)
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	3304      	adds	r3, #4
 800a912:	4619      	mov	r1, r3
 800a914:	4610      	mov	r0, r2
 800a916:	f7fd fe44 	bl	80085a2 <vListInsert>
 800a91a:	e016      	b.n	800a94a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a91c:	2300      	movs	r3, #0
 800a91e:	9300      	str	r3, [sp, #0]
 800a920:	2300      	movs	r3, #0
 800a922:	693a      	ldr	r2, [r7, #16]
 800a924:	2100      	movs	r1, #0
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	f7ff fd60 	bl	800a3ec <xTimerGenericCommand>
 800a92c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d10a      	bne.n	800a94a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a938:	f383 8811 	msr	BASEPRI, r3
 800a93c:	f3bf 8f6f 	isb	sy
 800a940:	f3bf 8f4f 	dsb	sy
 800a944:	603b      	str	r3, [r7, #0]
}
 800a946:	bf00      	nop
 800a948:	e7fe      	b.n	800a948 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a94a:	4b09      	ldr	r3, [pc, #36]	; (800a970 <prvSwitchTimerLists+0xc0>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d1b1      	bne.n	800a8b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a954:	4b06      	ldr	r3, [pc, #24]	; (800a970 <prvSwitchTimerLists+0xc0>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a95a:	4b06      	ldr	r3, [pc, #24]	; (800a974 <prvSwitchTimerLists+0xc4>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a04      	ldr	r2, [pc, #16]	; (800a970 <prvSwitchTimerLists+0xc0>)
 800a960:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a962:	4a04      	ldr	r2, [pc, #16]	; (800a974 <prvSwitchTimerLists+0xc4>)
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	6013      	str	r3, [r2, #0]
}
 800a968:	bf00      	nop
 800a96a:	3718      	adds	r7, #24
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	20001cbc 	.word	0x20001cbc
 800a974:	20001cc0 	.word	0x20001cc0

0800a978 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a97e:	f000 f969 	bl	800ac54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a982:	4b15      	ldr	r3, [pc, #84]	; (800a9d8 <prvCheckForValidListAndQueue+0x60>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d120      	bne.n	800a9cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a98a:	4814      	ldr	r0, [pc, #80]	; (800a9dc <prvCheckForValidListAndQueue+0x64>)
 800a98c:	f7fd fdb8 	bl	8008500 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a990:	4813      	ldr	r0, [pc, #76]	; (800a9e0 <prvCheckForValidListAndQueue+0x68>)
 800a992:	f7fd fdb5 	bl	8008500 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a996:	4b13      	ldr	r3, [pc, #76]	; (800a9e4 <prvCheckForValidListAndQueue+0x6c>)
 800a998:	4a10      	ldr	r2, [pc, #64]	; (800a9dc <prvCheckForValidListAndQueue+0x64>)
 800a99a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a99c:	4b12      	ldr	r3, [pc, #72]	; (800a9e8 <prvCheckForValidListAndQueue+0x70>)
 800a99e:	4a10      	ldr	r2, [pc, #64]	; (800a9e0 <prvCheckForValidListAndQueue+0x68>)
 800a9a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	9300      	str	r3, [sp, #0]
 800a9a6:	4b11      	ldr	r3, [pc, #68]	; (800a9ec <prvCheckForValidListAndQueue+0x74>)
 800a9a8:	4a11      	ldr	r2, [pc, #68]	; (800a9f0 <prvCheckForValidListAndQueue+0x78>)
 800a9aa:	2110      	movs	r1, #16
 800a9ac:	200a      	movs	r0, #10
 800a9ae:	f7fd fec3 	bl	8008738 <xQueueGenericCreateStatic>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	4a08      	ldr	r2, [pc, #32]	; (800a9d8 <prvCheckForValidListAndQueue+0x60>)
 800a9b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a9b8:	4b07      	ldr	r3, [pc, #28]	; (800a9d8 <prvCheckForValidListAndQueue+0x60>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d005      	beq.n	800a9cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a9c0:	4b05      	ldr	r3, [pc, #20]	; (800a9d8 <prvCheckForValidListAndQueue+0x60>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	490b      	ldr	r1, [pc, #44]	; (800a9f4 <prvCheckForValidListAndQueue+0x7c>)
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7fe fbd2 	bl	8009170 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9cc:	f000 f972 	bl	800acb4 <vPortExitCritical>
}
 800a9d0:	bf00      	nop
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	20001cc4 	.word	0x20001cc4
 800a9dc:	20001c94 	.word	0x20001c94
 800a9e0:	20001ca8 	.word	0x20001ca8
 800a9e4:	20001cbc 	.word	0x20001cbc
 800a9e8:	20001cc0 	.word	0x20001cc0
 800a9ec:	20001d70 	.word	0x20001d70
 800a9f0:	20001cd0 	.word	0x20001cd0
 800a9f4:	08010f24 	.word	0x08010f24

0800a9f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	3b04      	subs	r3, #4
 800aa08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aa10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	3b04      	subs	r3, #4
 800aa16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	f023 0201 	bic.w	r2, r3, #1
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	3b04      	subs	r3, #4
 800aa26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aa28:	4a0c      	ldr	r2, [pc, #48]	; (800aa5c <pxPortInitialiseStack+0x64>)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	3b14      	subs	r3, #20
 800aa32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	3b04      	subs	r3, #4
 800aa3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f06f 0202 	mvn.w	r2, #2
 800aa46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	3b20      	subs	r3, #32
 800aa4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3714      	adds	r7, #20
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr
 800aa5c:	0800aa61 	.word	0x0800aa61

0800aa60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aa66:	2300      	movs	r3, #0
 800aa68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aa6a:	4b12      	ldr	r3, [pc, #72]	; (800aab4 <prvTaskExitError+0x54>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa72:	d00a      	beq.n	800aa8a <prvTaskExitError+0x2a>
	__asm volatile
 800aa74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa78:	f383 8811 	msr	BASEPRI, r3
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	f3bf 8f4f 	dsb	sy
 800aa84:	60fb      	str	r3, [r7, #12]
}
 800aa86:	bf00      	nop
 800aa88:	e7fe      	b.n	800aa88 <prvTaskExitError+0x28>
	__asm volatile
 800aa8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8e:	f383 8811 	msr	BASEPRI, r3
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	60bb      	str	r3, [r7, #8]
}
 800aa9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa9e:	bf00      	nop
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d0fc      	beq.n	800aaa0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aaa6:	bf00      	nop
 800aaa8:	bf00      	nop
 800aaaa:	3714      	adds	r7, #20
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	200000c4 	.word	0x200000c4
	...

0800aac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aac0:	4b07      	ldr	r3, [pc, #28]	; (800aae0 <pxCurrentTCBConst2>)
 800aac2:	6819      	ldr	r1, [r3, #0]
 800aac4:	6808      	ldr	r0, [r1, #0]
 800aac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaca:	f380 8809 	msr	PSP, r0
 800aace:	f3bf 8f6f 	isb	sy
 800aad2:	f04f 0000 	mov.w	r0, #0
 800aad6:	f380 8811 	msr	BASEPRI, r0
 800aada:	4770      	bx	lr
 800aadc:	f3af 8000 	nop.w

0800aae0 <pxCurrentTCBConst2>:
 800aae0:	2000178c 	.word	0x2000178c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aae4:	bf00      	nop
 800aae6:	bf00      	nop

0800aae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aae8:	4808      	ldr	r0, [pc, #32]	; (800ab0c <prvPortStartFirstTask+0x24>)
 800aaea:	6800      	ldr	r0, [r0, #0]
 800aaec:	6800      	ldr	r0, [r0, #0]
 800aaee:	f380 8808 	msr	MSP, r0
 800aaf2:	f04f 0000 	mov.w	r0, #0
 800aaf6:	f380 8814 	msr	CONTROL, r0
 800aafa:	b662      	cpsie	i
 800aafc:	b661      	cpsie	f
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	f3bf 8f6f 	isb	sy
 800ab06:	df00      	svc	0
 800ab08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab0a:	bf00      	nop
 800ab0c:	e000ed08 	.word	0xe000ed08

0800ab10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ab16:	4b46      	ldr	r3, [pc, #280]	; (800ac30 <xPortStartScheduler+0x120>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a46      	ldr	r2, [pc, #280]	; (800ac34 <xPortStartScheduler+0x124>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d10a      	bne.n	800ab36 <xPortStartScheduler+0x26>
	__asm volatile
 800ab20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab24:	f383 8811 	msr	BASEPRI, r3
 800ab28:	f3bf 8f6f 	isb	sy
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	613b      	str	r3, [r7, #16]
}
 800ab32:	bf00      	nop
 800ab34:	e7fe      	b.n	800ab34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ab36:	4b3e      	ldr	r3, [pc, #248]	; (800ac30 <xPortStartScheduler+0x120>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a3f      	ldr	r2, [pc, #252]	; (800ac38 <xPortStartScheduler+0x128>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d10a      	bne.n	800ab56 <xPortStartScheduler+0x46>
	__asm volatile
 800ab40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab44:	f383 8811 	msr	BASEPRI, r3
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	60fb      	str	r3, [r7, #12]
}
 800ab52:	bf00      	nop
 800ab54:	e7fe      	b.n	800ab54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ab56:	4b39      	ldr	r3, [pc, #228]	; (800ac3c <xPortStartScheduler+0x12c>)
 800ab58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	22ff      	movs	r2, #255	; 0xff
 800ab66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ab70:	78fb      	ldrb	r3, [r7, #3]
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ab78:	b2da      	uxtb	r2, r3
 800ab7a:	4b31      	ldr	r3, [pc, #196]	; (800ac40 <xPortStartScheduler+0x130>)
 800ab7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ab7e:	4b31      	ldr	r3, [pc, #196]	; (800ac44 <xPortStartScheduler+0x134>)
 800ab80:	2207      	movs	r2, #7
 800ab82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab84:	e009      	b.n	800ab9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ab86:	4b2f      	ldr	r3, [pc, #188]	; (800ac44 <xPortStartScheduler+0x134>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	4a2d      	ldr	r2, [pc, #180]	; (800ac44 <xPortStartScheduler+0x134>)
 800ab8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab90:	78fb      	ldrb	r3, [r7, #3]
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	005b      	lsls	r3, r3, #1
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab9a:	78fb      	ldrb	r3, [r7, #3]
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aba2:	2b80      	cmp	r3, #128	; 0x80
 800aba4:	d0ef      	beq.n	800ab86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aba6:	4b27      	ldr	r3, [pc, #156]	; (800ac44 <xPortStartScheduler+0x134>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f1c3 0307 	rsb	r3, r3, #7
 800abae:	2b04      	cmp	r3, #4
 800abb0:	d00a      	beq.n	800abc8 <xPortStartScheduler+0xb8>
	__asm volatile
 800abb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb6:	f383 8811 	msr	BASEPRI, r3
 800abba:	f3bf 8f6f 	isb	sy
 800abbe:	f3bf 8f4f 	dsb	sy
 800abc2:	60bb      	str	r3, [r7, #8]
}
 800abc4:	bf00      	nop
 800abc6:	e7fe      	b.n	800abc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800abc8:	4b1e      	ldr	r3, [pc, #120]	; (800ac44 <xPortStartScheduler+0x134>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	021b      	lsls	r3, r3, #8
 800abce:	4a1d      	ldr	r2, [pc, #116]	; (800ac44 <xPortStartScheduler+0x134>)
 800abd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800abd2:	4b1c      	ldr	r3, [pc, #112]	; (800ac44 <xPortStartScheduler+0x134>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800abda:	4a1a      	ldr	r2, [pc, #104]	; (800ac44 <xPortStartScheduler+0x134>)
 800abdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	b2da      	uxtb	r2, r3
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800abe6:	4b18      	ldr	r3, [pc, #96]	; (800ac48 <xPortStartScheduler+0x138>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a17      	ldr	r2, [pc, #92]	; (800ac48 <xPortStartScheduler+0x138>)
 800abec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800abf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800abf2:	4b15      	ldr	r3, [pc, #84]	; (800ac48 <xPortStartScheduler+0x138>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a14      	ldr	r2, [pc, #80]	; (800ac48 <xPortStartScheduler+0x138>)
 800abf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800abfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800abfe:	f000 f8dd 	bl	800adbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac02:	4b12      	ldr	r3, [pc, #72]	; (800ac4c <xPortStartScheduler+0x13c>)
 800ac04:	2200      	movs	r2, #0
 800ac06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ac08:	f000 f8fc 	bl	800ae04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ac0c:	4b10      	ldr	r3, [pc, #64]	; (800ac50 <xPortStartScheduler+0x140>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a0f      	ldr	r2, [pc, #60]	; (800ac50 <xPortStartScheduler+0x140>)
 800ac12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ac16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ac18:	f7ff ff66 	bl	800aae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac1c:	f7ff f838 	bl	8009c90 <vTaskSwitchContext>
	prvTaskExitError();
 800ac20:	f7ff ff1e 	bl	800aa60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3718      	adds	r7, #24
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	e000ed00 	.word	0xe000ed00
 800ac34:	410fc271 	.word	0x410fc271
 800ac38:	410fc270 	.word	0x410fc270
 800ac3c:	e000e400 	.word	0xe000e400
 800ac40:	20001dc0 	.word	0x20001dc0
 800ac44:	20001dc4 	.word	0x20001dc4
 800ac48:	e000ed20 	.word	0xe000ed20
 800ac4c:	200000c4 	.word	0x200000c4
 800ac50:	e000ef34 	.word	0xe000ef34

0800ac54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
	__asm volatile
 800ac5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5e:	f383 8811 	msr	BASEPRI, r3
 800ac62:	f3bf 8f6f 	isb	sy
 800ac66:	f3bf 8f4f 	dsb	sy
 800ac6a:	607b      	str	r3, [r7, #4]
}
 800ac6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ac6e:	4b0f      	ldr	r3, [pc, #60]	; (800acac <vPortEnterCritical+0x58>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	3301      	adds	r3, #1
 800ac74:	4a0d      	ldr	r2, [pc, #52]	; (800acac <vPortEnterCritical+0x58>)
 800ac76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ac78:	4b0c      	ldr	r3, [pc, #48]	; (800acac <vPortEnterCritical+0x58>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d10f      	bne.n	800aca0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ac80:	4b0b      	ldr	r3, [pc, #44]	; (800acb0 <vPortEnterCritical+0x5c>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00a      	beq.n	800aca0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ac8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8e:	f383 8811 	msr	BASEPRI, r3
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	f3bf 8f4f 	dsb	sy
 800ac9a:	603b      	str	r3, [r7, #0]
}
 800ac9c:	bf00      	nop
 800ac9e:	e7fe      	b.n	800ac9e <vPortEnterCritical+0x4a>
	}
}
 800aca0:	bf00      	nop
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr
 800acac:	200000c4 	.word	0x200000c4
 800acb0:	e000ed04 	.word	0xe000ed04

0800acb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800acba:	4b12      	ldr	r3, [pc, #72]	; (800ad04 <vPortExitCritical+0x50>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d10a      	bne.n	800acd8 <vPortExitCritical+0x24>
	__asm volatile
 800acc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc6:	f383 8811 	msr	BASEPRI, r3
 800acca:	f3bf 8f6f 	isb	sy
 800acce:	f3bf 8f4f 	dsb	sy
 800acd2:	607b      	str	r3, [r7, #4]
}
 800acd4:	bf00      	nop
 800acd6:	e7fe      	b.n	800acd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800acd8:	4b0a      	ldr	r3, [pc, #40]	; (800ad04 <vPortExitCritical+0x50>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	3b01      	subs	r3, #1
 800acde:	4a09      	ldr	r2, [pc, #36]	; (800ad04 <vPortExitCritical+0x50>)
 800ace0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ace2:	4b08      	ldr	r3, [pc, #32]	; (800ad04 <vPortExitCritical+0x50>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d105      	bne.n	800acf6 <vPortExitCritical+0x42>
 800acea:	2300      	movs	r3, #0
 800acec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	f383 8811 	msr	BASEPRI, r3
}
 800acf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800acf6:	bf00      	nop
 800acf8:	370c      	adds	r7, #12
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
 800ad02:	bf00      	nop
 800ad04:	200000c4 	.word	0x200000c4
	...

0800ad10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ad10:	f3ef 8009 	mrs	r0, PSP
 800ad14:	f3bf 8f6f 	isb	sy
 800ad18:	4b15      	ldr	r3, [pc, #84]	; (800ad70 <pxCurrentTCBConst>)
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	f01e 0f10 	tst.w	lr, #16
 800ad20:	bf08      	it	eq
 800ad22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad2a:	6010      	str	r0, [r2, #0]
 800ad2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ad34:	f380 8811 	msr	BASEPRI, r0
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	f3bf 8f6f 	isb	sy
 800ad40:	f7fe ffa6 	bl	8009c90 <vTaskSwitchContext>
 800ad44:	f04f 0000 	mov.w	r0, #0
 800ad48:	f380 8811 	msr	BASEPRI, r0
 800ad4c:	bc09      	pop	{r0, r3}
 800ad4e:	6819      	ldr	r1, [r3, #0]
 800ad50:	6808      	ldr	r0, [r1, #0]
 800ad52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad56:	f01e 0f10 	tst.w	lr, #16
 800ad5a:	bf08      	it	eq
 800ad5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ad60:	f380 8809 	msr	PSP, r0
 800ad64:	f3bf 8f6f 	isb	sy
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop
 800ad6c:	f3af 8000 	nop.w

0800ad70 <pxCurrentTCBConst>:
 800ad70:	2000178c 	.word	0x2000178c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ad74:	bf00      	nop
 800ad76:	bf00      	nop

0800ad78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad82:	f383 8811 	msr	BASEPRI, r3
 800ad86:	f3bf 8f6f 	isb	sy
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	607b      	str	r3, [r7, #4]
}
 800ad90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ad92:	f7fe fec3 	bl	8009b1c <xTaskIncrementTick>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d003      	beq.n	800ada4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad9c:	4b06      	ldr	r3, [pc, #24]	; (800adb8 <xPortSysTickHandler+0x40>)
 800ad9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ada2:	601a      	str	r2, [r3, #0]
 800ada4:	2300      	movs	r3, #0
 800ada6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	f383 8811 	msr	BASEPRI, r3
}
 800adae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800adb0:	bf00      	nop
 800adb2:	3708      	adds	r7, #8
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	e000ed04 	.word	0xe000ed04

0800adbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800adbc:	b480      	push	{r7}
 800adbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800adc0:	4b0b      	ldr	r3, [pc, #44]	; (800adf0 <vPortSetupTimerInterrupt+0x34>)
 800adc2:	2200      	movs	r2, #0
 800adc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800adc6:	4b0b      	ldr	r3, [pc, #44]	; (800adf4 <vPortSetupTimerInterrupt+0x38>)
 800adc8:	2200      	movs	r2, #0
 800adca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800adcc:	4b0a      	ldr	r3, [pc, #40]	; (800adf8 <vPortSetupTimerInterrupt+0x3c>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a0a      	ldr	r2, [pc, #40]	; (800adfc <vPortSetupTimerInterrupt+0x40>)
 800add2:	fba2 2303 	umull	r2, r3, r2, r3
 800add6:	099b      	lsrs	r3, r3, #6
 800add8:	4a09      	ldr	r2, [pc, #36]	; (800ae00 <vPortSetupTimerInterrupt+0x44>)
 800adda:	3b01      	subs	r3, #1
 800addc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800adde:	4b04      	ldr	r3, [pc, #16]	; (800adf0 <vPortSetupTimerInterrupt+0x34>)
 800ade0:	2207      	movs	r2, #7
 800ade2:	601a      	str	r2, [r3, #0]
}
 800ade4:	bf00      	nop
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr
 800adee:	bf00      	nop
 800adf0:	e000e010 	.word	0xe000e010
 800adf4:	e000e018 	.word	0xe000e018
 800adf8:	200000b8 	.word	0x200000b8
 800adfc:	10624dd3 	.word	0x10624dd3
 800ae00:	e000e014 	.word	0xe000e014

0800ae04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ae04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ae14 <vPortEnableVFP+0x10>
 800ae08:	6801      	ldr	r1, [r0, #0]
 800ae0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ae0e:	6001      	str	r1, [r0, #0]
 800ae10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ae12:	bf00      	nop
 800ae14:	e000ed88 	.word	0xe000ed88

0800ae18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ae1e:	f3ef 8305 	mrs	r3, IPSR
 800ae22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2b0f      	cmp	r3, #15
 800ae28:	d914      	bls.n	800ae54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ae2a:	4a17      	ldr	r2, [pc, #92]	; (800ae88 <vPortValidateInterruptPriority+0x70>)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	4413      	add	r3, r2
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ae34:	4b15      	ldr	r3, [pc, #84]	; (800ae8c <vPortValidateInterruptPriority+0x74>)
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	7afa      	ldrb	r2, [r7, #11]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d20a      	bcs.n	800ae54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ae3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	607b      	str	r3, [r7, #4]
}
 800ae50:	bf00      	nop
 800ae52:	e7fe      	b.n	800ae52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ae54:	4b0e      	ldr	r3, [pc, #56]	; (800ae90 <vPortValidateInterruptPriority+0x78>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ae5c:	4b0d      	ldr	r3, [pc, #52]	; (800ae94 <vPortValidateInterruptPriority+0x7c>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d90a      	bls.n	800ae7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ae64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae68:	f383 8811 	msr	BASEPRI, r3
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	603b      	str	r3, [r7, #0]
}
 800ae76:	bf00      	nop
 800ae78:	e7fe      	b.n	800ae78 <vPortValidateInterruptPriority+0x60>
	}
 800ae7a:	bf00      	nop
 800ae7c:	3714      	adds	r7, #20
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr
 800ae86:	bf00      	nop
 800ae88:	e000e3f0 	.word	0xe000e3f0
 800ae8c:	20001dc0 	.word	0x20001dc0
 800ae90:	e000ed0c 	.word	0xe000ed0c
 800ae94:	20001dc4 	.word	0x20001dc4

0800ae98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b08a      	sub	sp, #40	; 0x28
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aea0:	2300      	movs	r3, #0
 800aea2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aea4:	f7fe fd7e 	bl	80099a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aea8:	4b5b      	ldr	r3, [pc, #364]	; (800b018 <pvPortMalloc+0x180>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d101      	bne.n	800aeb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aeb0:	f000 f920 	bl	800b0f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aeb4:	4b59      	ldr	r3, [pc, #356]	; (800b01c <pvPortMalloc+0x184>)
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4013      	ands	r3, r2
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	f040 8093 	bne.w	800afe8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d01d      	beq.n	800af04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800aec8:	2208      	movs	r2, #8
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	4413      	add	r3, r2
 800aece:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f003 0307 	and.w	r3, r3, #7
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d014      	beq.n	800af04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f023 0307 	bic.w	r3, r3, #7
 800aee0:	3308      	adds	r3, #8
 800aee2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f003 0307 	and.w	r3, r3, #7
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00a      	beq.n	800af04 <pvPortMalloc+0x6c>
	__asm volatile
 800aeee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef2:	f383 8811 	msr	BASEPRI, r3
 800aef6:	f3bf 8f6f 	isb	sy
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	617b      	str	r3, [r7, #20]
}
 800af00:	bf00      	nop
 800af02:	e7fe      	b.n	800af02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d06e      	beq.n	800afe8 <pvPortMalloc+0x150>
 800af0a:	4b45      	ldr	r3, [pc, #276]	; (800b020 <pvPortMalloc+0x188>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	429a      	cmp	r2, r3
 800af12:	d869      	bhi.n	800afe8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800af14:	4b43      	ldr	r3, [pc, #268]	; (800b024 <pvPortMalloc+0x18c>)
 800af16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800af18:	4b42      	ldr	r3, [pc, #264]	; (800b024 <pvPortMalloc+0x18c>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af1e:	e004      	b.n	800af2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800af20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800af24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	429a      	cmp	r2, r3
 800af32:	d903      	bls.n	800af3c <pvPortMalloc+0xa4>
 800af34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1f1      	bne.n	800af20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800af3c:	4b36      	ldr	r3, [pc, #216]	; (800b018 <pvPortMalloc+0x180>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af42:	429a      	cmp	r2, r3
 800af44:	d050      	beq.n	800afe8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800af46:	6a3b      	ldr	r3, [r7, #32]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2208      	movs	r2, #8
 800af4c:	4413      	add	r3, r2
 800af4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800af50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	6a3b      	ldr	r3, [r7, #32]
 800af56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800af58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5a:	685a      	ldr	r2, [r3, #4]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	1ad2      	subs	r2, r2, r3
 800af60:	2308      	movs	r3, #8
 800af62:	005b      	lsls	r3, r3, #1
 800af64:	429a      	cmp	r2, r3
 800af66:	d91f      	bls.n	800afa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800af68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4413      	add	r3, r2
 800af6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	f003 0307 	and.w	r3, r3, #7
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00a      	beq.n	800af90 <pvPortMalloc+0xf8>
	__asm volatile
 800af7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7e:	f383 8811 	msr	BASEPRI, r3
 800af82:	f3bf 8f6f 	isb	sy
 800af86:	f3bf 8f4f 	dsb	sy
 800af8a:	613b      	str	r3, [r7, #16]
}
 800af8c:	bf00      	nop
 800af8e:	e7fe      	b.n	800af8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800af90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af92:	685a      	ldr	r2, [r3, #4]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	1ad2      	subs	r2, r2, r3
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800af9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800afa2:	69b8      	ldr	r0, [r7, #24]
 800afa4:	f000 f908 	bl	800b1b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800afa8:	4b1d      	ldr	r3, [pc, #116]	; (800b020 <pvPortMalloc+0x188>)
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	1ad3      	subs	r3, r2, r3
 800afb2:	4a1b      	ldr	r2, [pc, #108]	; (800b020 <pvPortMalloc+0x188>)
 800afb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800afb6:	4b1a      	ldr	r3, [pc, #104]	; (800b020 <pvPortMalloc+0x188>)
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	4b1b      	ldr	r3, [pc, #108]	; (800b028 <pvPortMalloc+0x190>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d203      	bcs.n	800afca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800afc2:	4b17      	ldr	r3, [pc, #92]	; (800b020 <pvPortMalloc+0x188>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a18      	ldr	r2, [pc, #96]	; (800b028 <pvPortMalloc+0x190>)
 800afc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afcc:	685a      	ldr	r2, [r3, #4]
 800afce:	4b13      	ldr	r3, [pc, #76]	; (800b01c <pvPortMalloc+0x184>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	431a      	orrs	r2, r3
 800afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800afd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afda:	2200      	movs	r2, #0
 800afdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800afde:	4b13      	ldr	r3, [pc, #76]	; (800b02c <pvPortMalloc+0x194>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	3301      	adds	r3, #1
 800afe4:	4a11      	ldr	r2, [pc, #68]	; (800b02c <pvPortMalloc+0x194>)
 800afe6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800afe8:	f7fe fcea 	bl	80099c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	f003 0307 	and.w	r3, r3, #7
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d00a      	beq.n	800b00c <pvPortMalloc+0x174>
	__asm volatile
 800aff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affa:	f383 8811 	msr	BASEPRI, r3
 800affe:	f3bf 8f6f 	isb	sy
 800b002:	f3bf 8f4f 	dsb	sy
 800b006:	60fb      	str	r3, [r7, #12]
}
 800b008:	bf00      	nop
 800b00a:	e7fe      	b.n	800b00a <pvPortMalloc+0x172>
	return pvReturn;
 800b00c:	69fb      	ldr	r3, [r7, #28]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3728      	adds	r7, #40	; 0x28
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	200059d0 	.word	0x200059d0
 800b01c:	200059e4 	.word	0x200059e4
 800b020:	200059d4 	.word	0x200059d4
 800b024:	200059c8 	.word	0x200059c8
 800b028:	200059d8 	.word	0x200059d8
 800b02c:	200059dc 	.word	0x200059dc

0800b030 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b086      	sub	sp, #24
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d04d      	beq.n	800b0de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b042:	2308      	movs	r3, #8
 800b044:	425b      	negs	r3, r3
 800b046:	697a      	ldr	r2, [r7, #20]
 800b048:	4413      	add	r3, r2
 800b04a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	685a      	ldr	r2, [r3, #4]
 800b054:	4b24      	ldr	r3, [pc, #144]	; (800b0e8 <vPortFree+0xb8>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4013      	ands	r3, r2
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d10a      	bne.n	800b074 <vPortFree+0x44>
	__asm volatile
 800b05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b062:	f383 8811 	msr	BASEPRI, r3
 800b066:	f3bf 8f6f 	isb	sy
 800b06a:	f3bf 8f4f 	dsb	sy
 800b06e:	60fb      	str	r3, [r7, #12]
}
 800b070:	bf00      	nop
 800b072:	e7fe      	b.n	800b072 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00a      	beq.n	800b092 <vPortFree+0x62>
	__asm volatile
 800b07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b080:	f383 8811 	msr	BASEPRI, r3
 800b084:	f3bf 8f6f 	isb	sy
 800b088:	f3bf 8f4f 	dsb	sy
 800b08c:	60bb      	str	r3, [r7, #8]
}
 800b08e:	bf00      	nop
 800b090:	e7fe      	b.n	800b090 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	685a      	ldr	r2, [r3, #4]
 800b096:	4b14      	ldr	r3, [pc, #80]	; (800b0e8 <vPortFree+0xb8>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4013      	ands	r3, r2
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d01e      	beq.n	800b0de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d11a      	bne.n	800b0de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	685a      	ldr	r2, [r3, #4]
 800b0ac:	4b0e      	ldr	r3, [pc, #56]	; (800b0e8 <vPortFree+0xb8>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	43db      	mvns	r3, r3
 800b0b2:	401a      	ands	r2, r3
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b0b8:	f7fe fc74 	bl	80099a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	685a      	ldr	r2, [r3, #4]
 800b0c0:	4b0a      	ldr	r3, [pc, #40]	; (800b0ec <vPortFree+0xbc>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	4a09      	ldr	r2, [pc, #36]	; (800b0ec <vPortFree+0xbc>)
 800b0c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b0ca:	6938      	ldr	r0, [r7, #16]
 800b0cc:	f000 f874 	bl	800b1b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b0d0:	4b07      	ldr	r3, [pc, #28]	; (800b0f0 <vPortFree+0xc0>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	4a06      	ldr	r2, [pc, #24]	; (800b0f0 <vPortFree+0xc0>)
 800b0d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b0da:	f7fe fc71 	bl	80099c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b0de:	bf00      	nop
 800b0e0:	3718      	adds	r7, #24
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	200059e4 	.word	0x200059e4
 800b0ec:	200059d4 	.word	0x200059d4
 800b0f0:	200059e0 	.word	0x200059e0

0800b0f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b0fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b0fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b100:	4b27      	ldr	r3, [pc, #156]	; (800b1a0 <prvHeapInit+0xac>)
 800b102:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f003 0307 	and.w	r3, r3, #7
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00c      	beq.n	800b128 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	3307      	adds	r3, #7
 800b112:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f023 0307 	bic.w	r3, r3, #7
 800b11a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b11c:	68ba      	ldr	r2, [r7, #8]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	4a1f      	ldr	r2, [pc, #124]	; (800b1a0 <prvHeapInit+0xac>)
 800b124:	4413      	add	r3, r2
 800b126:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b12c:	4a1d      	ldr	r2, [pc, #116]	; (800b1a4 <prvHeapInit+0xb0>)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b132:	4b1c      	ldr	r3, [pc, #112]	; (800b1a4 <prvHeapInit+0xb0>)
 800b134:	2200      	movs	r2, #0
 800b136:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	68ba      	ldr	r2, [r7, #8]
 800b13c:	4413      	add	r3, r2
 800b13e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b140:	2208      	movs	r2, #8
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	1a9b      	subs	r3, r3, r2
 800b146:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f023 0307 	bic.w	r3, r3, #7
 800b14e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	4a15      	ldr	r2, [pc, #84]	; (800b1a8 <prvHeapInit+0xb4>)
 800b154:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b156:	4b14      	ldr	r3, [pc, #80]	; (800b1a8 <prvHeapInit+0xb4>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2200      	movs	r2, #0
 800b15c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b15e:	4b12      	ldr	r3, [pc, #72]	; (800b1a8 <prvHeapInit+0xb4>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2200      	movs	r2, #0
 800b164:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	68fa      	ldr	r2, [r7, #12]
 800b16e:	1ad2      	subs	r2, r2, r3
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b174:	4b0c      	ldr	r3, [pc, #48]	; (800b1a8 <prvHeapInit+0xb4>)
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	4a0a      	ldr	r2, [pc, #40]	; (800b1ac <prvHeapInit+0xb8>)
 800b182:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	4a09      	ldr	r2, [pc, #36]	; (800b1b0 <prvHeapInit+0xbc>)
 800b18a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b18c:	4b09      	ldr	r3, [pc, #36]	; (800b1b4 <prvHeapInit+0xc0>)
 800b18e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b192:	601a      	str	r2, [r3, #0]
}
 800b194:	bf00      	nop
 800b196:	3714      	adds	r7, #20
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr
 800b1a0:	20001dc8 	.word	0x20001dc8
 800b1a4:	200059c8 	.word	0x200059c8
 800b1a8:	200059d0 	.word	0x200059d0
 800b1ac:	200059d8 	.word	0x200059d8
 800b1b0:	200059d4 	.word	0x200059d4
 800b1b4:	200059e4 	.word	0x200059e4

0800b1b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b085      	sub	sp, #20
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b1c0:	4b28      	ldr	r3, [pc, #160]	; (800b264 <prvInsertBlockIntoFreeList+0xac>)
 800b1c2:	60fb      	str	r3, [r7, #12]
 800b1c4:	e002      	b.n	800b1cc <prvInsertBlockIntoFreeList+0x14>
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	60fb      	str	r3, [r7, #12]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d8f7      	bhi.n	800b1c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	68ba      	ldr	r2, [r7, #8]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d108      	bne.n	800b1fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	685a      	ldr	r2, [r3, #4]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	441a      	add	r2, r3
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	68ba      	ldr	r2, [r7, #8]
 800b204:	441a      	add	r2, r3
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d118      	bne.n	800b240 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	4b15      	ldr	r3, [pc, #84]	; (800b268 <prvInsertBlockIntoFreeList+0xb0>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	429a      	cmp	r2, r3
 800b218:	d00d      	beq.n	800b236 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	685a      	ldr	r2, [r3, #4]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	441a      	add	r2, r3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	601a      	str	r2, [r3, #0]
 800b234:	e008      	b.n	800b248 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b236:	4b0c      	ldr	r3, [pc, #48]	; (800b268 <prvInsertBlockIntoFreeList+0xb0>)
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	601a      	str	r2, [r3, #0]
 800b23e:	e003      	b.n	800b248 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d002      	beq.n	800b256 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b256:	bf00      	nop
 800b258:	3714      	adds	r7, #20
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
 800b262:	bf00      	nop
 800b264:	200059c8 	.word	0x200059c8
 800b268:	200059d0 	.word	0x200059d0

0800b26c <__cvt>:
 800b26c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b270:	ec55 4b10 	vmov	r4, r5, d0
 800b274:	2d00      	cmp	r5, #0
 800b276:	460e      	mov	r6, r1
 800b278:	4619      	mov	r1, r3
 800b27a:	462b      	mov	r3, r5
 800b27c:	bfbb      	ittet	lt
 800b27e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b282:	461d      	movlt	r5, r3
 800b284:	2300      	movge	r3, #0
 800b286:	232d      	movlt	r3, #45	; 0x2d
 800b288:	700b      	strb	r3, [r1, #0]
 800b28a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b28c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b290:	4691      	mov	r9, r2
 800b292:	f023 0820 	bic.w	r8, r3, #32
 800b296:	bfbc      	itt	lt
 800b298:	4622      	movlt	r2, r4
 800b29a:	4614      	movlt	r4, r2
 800b29c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b2a0:	d005      	beq.n	800b2ae <__cvt+0x42>
 800b2a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b2a6:	d100      	bne.n	800b2aa <__cvt+0x3e>
 800b2a8:	3601      	adds	r6, #1
 800b2aa:	2102      	movs	r1, #2
 800b2ac:	e000      	b.n	800b2b0 <__cvt+0x44>
 800b2ae:	2103      	movs	r1, #3
 800b2b0:	ab03      	add	r3, sp, #12
 800b2b2:	9301      	str	r3, [sp, #4]
 800b2b4:	ab02      	add	r3, sp, #8
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	ec45 4b10 	vmov	d0, r4, r5
 800b2bc:	4653      	mov	r3, sl
 800b2be:	4632      	mov	r2, r6
 800b2c0:	f001 f88e 	bl	800c3e0 <_dtoa_r>
 800b2c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b2c8:	4607      	mov	r7, r0
 800b2ca:	d102      	bne.n	800b2d2 <__cvt+0x66>
 800b2cc:	f019 0f01 	tst.w	r9, #1
 800b2d0:	d022      	beq.n	800b318 <__cvt+0xac>
 800b2d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b2d6:	eb07 0906 	add.w	r9, r7, r6
 800b2da:	d110      	bne.n	800b2fe <__cvt+0x92>
 800b2dc:	783b      	ldrb	r3, [r7, #0]
 800b2de:	2b30      	cmp	r3, #48	; 0x30
 800b2e0:	d10a      	bne.n	800b2f8 <__cvt+0x8c>
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	f7f5 fbed 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2ee:	b918      	cbnz	r0, 800b2f8 <__cvt+0x8c>
 800b2f0:	f1c6 0601 	rsb	r6, r6, #1
 800b2f4:	f8ca 6000 	str.w	r6, [sl]
 800b2f8:	f8da 3000 	ldr.w	r3, [sl]
 800b2fc:	4499      	add	r9, r3
 800b2fe:	2200      	movs	r2, #0
 800b300:	2300      	movs	r3, #0
 800b302:	4620      	mov	r0, r4
 800b304:	4629      	mov	r1, r5
 800b306:	f7f5 fbdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800b30a:	b108      	cbz	r0, 800b310 <__cvt+0xa4>
 800b30c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b310:	2230      	movs	r2, #48	; 0x30
 800b312:	9b03      	ldr	r3, [sp, #12]
 800b314:	454b      	cmp	r3, r9
 800b316:	d307      	bcc.n	800b328 <__cvt+0xbc>
 800b318:	9b03      	ldr	r3, [sp, #12]
 800b31a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b31c:	1bdb      	subs	r3, r3, r7
 800b31e:	4638      	mov	r0, r7
 800b320:	6013      	str	r3, [r2, #0]
 800b322:	b004      	add	sp, #16
 800b324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b328:	1c59      	adds	r1, r3, #1
 800b32a:	9103      	str	r1, [sp, #12]
 800b32c:	701a      	strb	r2, [r3, #0]
 800b32e:	e7f0      	b.n	800b312 <__cvt+0xa6>

0800b330 <__exponent>:
 800b330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b332:	4603      	mov	r3, r0
 800b334:	2900      	cmp	r1, #0
 800b336:	bfb8      	it	lt
 800b338:	4249      	neglt	r1, r1
 800b33a:	f803 2b02 	strb.w	r2, [r3], #2
 800b33e:	bfb4      	ite	lt
 800b340:	222d      	movlt	r2, #45	; 0x2d
 800b342:	222b      	movge	r2, #43	; 0x2b
 800b344:	2909      	cmp	r1, #9
 800b346:	7042      	strb	r2, [r0, #1]
 800b348:	dd2a      	ble.n	800b3a0 <__exponent+0x70>
 800b34a:	f10d 0207 	add.w	r2, sp, #7
 800b34e:	4617      	mov	r7, r2
 800b350:	260a      	movs	r6, #10
 800b352:	4694      	mov	ip, r2
 800b354:	fb91 f5f6 	sdiv	r5, r1, r6
 800b358:	fb06 1415 	mls	r4, r6, r5, r1
 800b35c:	3430      	adds	r4, #48	; 0x30
 800b35e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b362:	460c      	mov	r4, r1
 800b364:	2c63      	cmp	r4, #99	; 0x63
 800b366:	f102 32ff 	add.w	r2, r2, #4294967295
 800b36a:	4629      	mov	r1, r5
 800b36c:	dcf1      	bgt.n	800b352 <__exponent+0x22>
 800b36e:	3130      	adds	r1, #48	; 0x30
 800b370:	f1ac 0402 	sub.w	r4, ip, #2
 800b374:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b378:	1c41      	adds	r1, r0, #1
 800b37a:	4622      	mov	r2, r4
 800b37c:	42ba      	cmp	r2, r7
 800b37e:	d30a      	bcc.n	800b396 <__exponent+0x66>
 800b380:	f10d 0209 	add.w	r2, sp, #9
 800b384:	eba2 020c 	sub.w	r2, r2, ip
 800b388:	42bc      	cmp	r4, r7
 800b38a:	bf88      	it	hi
 800b38c:	2200      	movhi	r2, #0
 800b38e:	4413      	add	r3, r2
 800b390:	1a18      	subs	r0, r3, r0
 800b392:	b003      	add	sp, #12
 800b394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b396:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b39a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b39e:	e7ed      	b.n	800b37c <__exponent+0x4c>
 800b3a0:	2330      	movs	r3, #48	; 0x30
 800b3a2:	3130      	adds	r1, #48	; 0x30
 800b3a4:	7083      	strb	r3, [r0, #2]
 800b3a6:	70c1      	strb	r1, [r0, #3]
 800b3a8:	1d03      	adds	r3, r0, #4
 800b3aa:	e7f1      	b.n	800b390 <__exponent+0x60>

0800b3ac <_printf_float>:
 800b3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b0:	ed2d 8b02 	vpush	{d8}
 800b3b4:	b08d      	sub	sp, #52	; 0x34
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b3bc:	4616      	mov	r6, r2
 800b3be:	461f      	mov	r7, r3
 800b3c0:	4605      	mov	r5, r0
 800b3c2:	f000 fef7 	bl	800c1b4 <_localeconv_r>
 800b3c6:	f8d0 a000 	ldr.w	sl, [r0]
 800b3ca:	4650      	mov	r0, sl
 800b3cc:	f7f4 ff50 	bl	8000270 <strlen>
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	930a      	str	r3, [sp, #40]	; 0x28
 800b3d4:	6823      	ldr	r3, [r4, #0]
 800b3d6:	9305      	str	r3, [sp, #20]
 800b3d8:	f8d8 3000 	ldr.w	r3, [r8]
 800b3dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b3e0:	3307      	adds	r3, #7
 800b3e2:	f023 0307 	bic.w	r3, r3, #7
 800b3e6:	f103 0208 	add.w	r2, r3, #8
 800b3ea:	f8c8 2000 	str.w	r2, [r8]
 800b3ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b3f6:	9307      	str	r3, [sp, #28]
 800b3f8:	f8cd 8018 	str.w	r8, [sp, #24]
 800b3fc:	ee08 0a10 	vmov	s16, r0
 800b400:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b404:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b408:	4b9e      	ldr	r3, [pc, #632]	; (800b684 <_printf_float+0x2d8>)
 800b40a:	f04f 32ff 	mov.w	r2, #4294967295
 800b40e:	f7f5 fb8d 	bl	8000b2c <__aeabi_dcmpun>
 800b412:	bb88      	cbnz	r0, 800b478 <_printf_float+0xcc>
 800b414:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b418:	4b9a      	ldr	r3, [pc, #616]	; (800b684 <_printf_float+0x2d8>)
 800b41a:	f04f 32ff 	mov.w	r2, #4294967295
 800b41e:	f7f5 fb67 	bl	8000af0 <__aeabi_dcmple>
 800b422:	bb48      	cbnz	r0, 800b478 <_printf_float+0xcc>
 800b424:	2200      	movs	r2, #0
 800b426:	2300      	movs	r3, #0
 800b428:	4640      	mov	r0, r8
 800b42a:	4649      	mov	r1, r9
 800b42c:	f7f5 fb56 	bl	8000adc <__aeabi_dcmplt>
 800b430:	b110      	cbz	r0, 800b438 <_printf_float+0x8c>
 800b432:	232d      	movs	r3, #45	; 0x2d
 800b434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b438:	4a93      	ldr	r2, [pc, #588]	; (800b688 <_printf_float+0x2dc>)
 800b43a:	4b94      	ldr	r3, [pc, #592]	; (800b68c <_printf_float+0x2e0>)
 800b43c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b440:	bf94      	ite	ls
 800b442:	4690      	movls	r8, r2
 800b444:	4698      	movhi	r8, r3
 800b446:	2303      	movs	r3, #3
 800b448:	6123      	str	r3, [r4, #16]
 800b44a:	9b05      	ldr	r3, [sp, #20]
 800b44c:	f023 0304 	bic.w	r3, r3, #4
 800b450:	6023      	str	r3, [r4, #0]
 800b452:	f04f 0900 	mov.w	r9, #0
 800b456:	9700      	str	r7, [sp, #0]
 800b458:	4633      	mov	r3, r6
 800b45a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b45c:	4621      	mov	r1, r4
 800b45e:	4628      	mov	r0, r5
 800b460:	f000 f9da 	bl	800b818 <_printf_common>
 800b464:	3001      	adds	r0, #1
 800b466:	f040 8090 	bne.w	800b58a <_printf_float+0x1de>
 800b46a:	f04f 30ff 	mov.w	r0, #4294967295
 800b46e:	b00d      	add	sp, #52	; 0x34
 800b470:	ecbd 8b02 	vpop	{d8}
 800b474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b478:	4642      	mov	r2, r8
 800b47a:	464b      	mov	r3, r9
 800b47c:	4640      	mov	r0, r8
 800b47e:	4649      	mov	r1, r9
 800b480:	f7f5 fb54 	bl	8000b2c <__aeabi_dcmpun>
 800b484:	b140      	cbz	r0, 800b498 <_printf_float+0xec>
 800b486:	464b      	mov	r3, r9
 800b488:	2b00      	cmp	r3, #0
 800b48a:	bfbc      	itt	lt
 800b48c:	232d      	movlt	r3, #45	; 0x2d
 800b48e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b492:	4a7f      	ldr	r2, [pc, #508]	; (800b690 <_printf_float+0x2e4>)
 800b494:	4b7f      	ldr	r3, [pc, #508]	; (800b694 <_printf_float+0x2e8>)
 800b496:	e7d1      	b.n	800b43c <_printf_float+0x90>
 800b498:	6863      	ldr	r3, [r4, #4]
 800b49a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b49e:	9206      	str	r2, [sp, #24]
 800b4a0:	1c5a      	adds	r2, r3, #1
 800b4a2:	d13f      	bne.n	800b524 <_printf_float+0x178>
 800b4a4:	2306      	movs	r3, #6
 800b4a6:	6063      	str	r3, [r4, #4]
 800b4a8:	9b05      	ldr	r3, [sp, #20]
 800b4aa:	6861      	ldr	r1, [r4, #4]
 800b4ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	9303      	str	r3, [sp, #12]
 800b4b4:	ab0a      	add	r3, sp, #40	; 0x28
 800b4b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b4ba:	ab09      	add	r3, sp, #36	; 0x24
 800b4bc:	ec49 8b10 	vmov	d0, r8, r9
 800b4c0:	9300      	str	r3, [sp, #0]
 800b4c2:	6022      	str	r2, [r4, #0]
 800b4c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b4c8:	4628      	mov	r0, r5
 800b4ca:	f7ff fecf 	bl	800b26c <__cvt>
 800b4ce:	9b06      	ldr	r3, [sp, #24]
 800b4d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4d2:	2b47      	cmp	r3, #71	; 0x47
 800b4d4:	4680      	mov	r8, r0
 800b4d6:	d108      	bne.n	800b4ea <_printf_float+0x13e>
 800b4d8:	1cc8      	adds	r0, r1, #3
 800b4da:	db02      	blt.n	800b4e2 <_printf_float+0x136>
 800b4dc:	6863      	ldr	r3, [r4, #4]
 800b4de:	4299      	cmp	r1, r3
 800b4e0:	dd41      	ble.n	800b566 <_printf_float+0x1ba>
 800b4e2:	f1ab 0302 	sub.w	r3, fp, #2
 800b4e6:	fa5f fb83 	uxtb.w	fp, r3
 800b4ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b4ee:	d820      	bhi.n	800b532 <_printf_float+0x186>
 800b4f0:	3901      	subs	r1, #1
 800b4f2:	465a      	mov	r2, fp
 800b4f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b4f8:	9109      	str	r1, [sp, #36]	; 0x24
 800b4fa:	f7ff ff19 	bl	800b330 <__exponent>
 800b4fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b500:	1813      	adds	r3, r2, r0
 800b502:	2a01      	cmp	r2, #1
 800b504:	4681      	mov	r9, r0
 800b506:	6123      	str	r3, [r4, #16]
 800b508:	dc02      	bgt.n	800b510 <_printf_float+0x164>
 800b50a:	6822      	ldr	r2, [r4, #0]
 800b50c:	07d2      	lsls	r2, r2, #31
 800b50e:	d501      	bpl.n	800b514 <_printf_float+0x168>
 800b510:	3301      	adds	r3, #1
 800b512:	6123      	str	r3, [r4, #16]
 800b514:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d09c      	beq.n	800b456 <_printf_float+0xaa>
 800b51c:	232d      	movs	r3, #45	; 0x2d
 800b51e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b522:	e798      	b.n	800b456 <_printf_float+0xaa>
 800b524:	9a06      	ldr	r2, [sp, #24]
 800b526:	2a47      	cmp	r2, #71	; 0x47
 800b528:	d1be      	bne.n	800b4a8 <_printf_float+0xfc>
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1bc      	bne.n	800b4a8 <_printf_float+0xfc>
 800b52e:	2301      	movs	r3, #1
 800b530:	e7b9      	b.n	800b4a6 <_printf_float+0xfa>
 800b532:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b536:	d118      	bne.n	800b56a <_printf_float+0x1be>
 800b538:	2900      	cmp	r1, #0
 800b53a:	6863      	ldr	r3, [r4, #4]
 800b53c:	dd0b      	ble.n	800b556 <_printf_float+0x1aa>
 800b53e:	6121      	str	r1, [r4, #16]
 800b540:	b913      	cbnz	r3, 800b548 <_printf_float+0x19c>
 800b542:	6822      	ldr	r2, [r4, #0]
 800b544:	07d0      	lsls	r0, r2, #31
 800b546:	d502      	bpl.n	800b54e <_printf_float+0x1a2>
 800b548:	3301      	adds	r3, #1
 800b54a:	440b      	add	r3, r1
 800b54c:	6123      	str	r3, [r4, #16]
 800b54e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b550:	f04f 0900 	mov.w	r9, #0
 800b554:	e7de      	b.n	800b514 <_printf_float+0x168>
 800b556:	b913      	cbnz	r3, 800b55e <_printf_float+0x1b2>
 800b558:	6822      	ldr	r2, [r4, #0]
 800b55a:	07d2      	lsls	r2, r2, #31
 800b55c:	d501      	bpl.n	800b562 <_printf_float+0x1b6>
 800b55e:	3302      	adds	r3, #2
 800b560:	e7f4      	b.n	800b54c <_printf_float+0x1a0>
 800b562:	2301      	movs	r3, #1
 800b564:	e7f2      	b.n	800b54c <_printf_float+0x1a0>
 800b566:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b56a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b56c:	4299      	cmp	r1, r3
 800b56e:	db05      	blt.n	800b57c <_printf_float+0x1d0>
 800b570:	6823      	ldr	r3, [r4, #0]
 800b572:	6121      	str	r1, [r4, #16]
 800b574:	07d8      	lsls	r0, r3, #31
 800b576:	d5ea      	bpl.n	800b54e <_printf_float+0x1a2>
 800b578:	1c4b      	adds	r3, r1, #1
 800b57a:	e7e7      	b.n	800b54c <_printf_float+0x1a0>
 800b57c:	2900      	cmp	r1, #0
 800b57e:	bfd4      	ite	le
 800b580:	f1c1 0202 	rsble	r2, r1, #2
 800b584:	2201      	movgt	r2, #1
 800b586:	4413      	add	r3, r2
 800b588:	e7e0      	b.n	800b54c <_printf_float+0x1a0>
 800b58a:	6823      	ldr	r3, [r4, #0]
 800b58c:	055a      	lsls	r2, r3, #21
 800b58e:	d407      	bmi.n	800b5a0 <_printf_float+0x1f4>
 800b590:	6923      	ldr	r3, [r4, #16]
 800b592:	4642      	mov	r2, r8
 800b594:	4631      	mov	r1, r6
 800b596:	4628      	mov	r0, r5
 800b598:	47b8      	blx	r7
 800b59a:	3001      	adds	r0, #1
 800b59c:	d12c      	bne.n	800b5f8 <_printf_float+0x24c>
 800b59e:	e764      	b.n	800b46a <_printf_float+0xbe>
 800b5a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b5a4:	f240 80e0 	bls.w	800b768 <_printf_float+0x3bc>
 800b5a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	f7f5 fa8a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	d034      	beq.n	800b622 <_printf_float+0x276>
 800b5b8:	4a37      	ldr	r2, [pc, #220]	; (800b698 <_printf_float+0x2ec>)
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	4631      	mov	r1, r6
 800b5be:	4628      	mov	r0, r5
 800b5c0:	47b8      	blx	r7
 800b5c2:	3001      	adds	r0, #1
 800b5c4:	f43f af51 	beq.w	800b46a <_printf_float+0xbe>
 800b5c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	db02      	blt.n	800b5d6 <_printf_float+0x22a>
 800b5d0:	6823      	ldr	r3, [r4, #0]
 800b5d2:	07d8      	lsls	r0, r3, #31
 800b5d4:	d510      	bpl.n	800b5f8 <_printf_float+0x24c>
 800b5d6:	ee18 3a10 	vmov	r3, s16
 800b5da:	4652      	mov	r2, sl
 800b5dc:	4631      	mov	r1, r6
 800b5de:	4628      	mov	r0, r5
 800b5e0:	47b8      	blx	r7
 800b5e2:	3001      	adds	r0, #1
 800b5e4:	f43f af41 	beq.w	800b46a <_printf_float+0xbe>
 800b5e8:	f04f 0800 	mov.w	r8, #0
 800b5ec:	f104 091a 	add.w	r9, r4, #26
 800b5f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5f2:	3b01      	subs	r3, #1
 800b5f4:	4543      	cmp	r3, r8
 800b5f6:	dc09      	bgt.n	800b60c <_printf_float+0x260>
 800b5f8:	6823      	ldr	r3, [r4, #0]
 800b5fa:	079b      	lsls	r3, r3, #30
 800b5fc:	f100 8107 	bmi.w	800b80e <_printf_float+0x462>
 800b600:	68e0      	ldr	r0, [r4, #12]
 800b602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b604:	4298      	cmp	r0, r3
 800b606:	bfb8      	it	lt
 800b608:	4618      	movlt	r0, r3
 800b60a:	e730      	b.n	800b46e <_printf_float+0xc2>
 800b60c:	2301      	movs	r3, #1
 800b60e:	464a      	mov	r2, r9
 800b610:	4631      	mov	r1, r6
 800b612:	4628      	mov	r0, r5
 800b614:	47b8      	blx	r7
 800b616:	3001      	adds	r0, #1
 800b618:	f43f af27 	beq.w	800b46a <_printf_float+0xbe>
 800b61c:	f108 0801 	add.w	r8, r8, #1
 800b620:	e7e6      	b.n	800b5f0 <_printf_float+0x244>
 800b622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b624:	2b00      	cmp	r3, #0
 800b626:	dc39      	bgt.n	800b69c <_printf_float+0x2f0>
 800b628:	4a1b      	ldr	r2, [pc, #108]	; (800b698 <_printf_float+0x2ec>)
 800b62a:	2301      	movs	r3, #1
 800b62c:	4631      	mov	r1, r6
 800b62e:	4628      	mov	r0, r5
 800b630:	47b8      	blx	r7
 800b632:	3001      	adds	r0, #1
 800b634:	f43f af19 	beq.w	800b46a <_printf_float+0xbe>
 800b638:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b63c:	4313      	orrs	r3, r2
 800b63e:	d102      	bne.n	800b646 <_printf_float+0x29a>
 800b640:	6823      	ldr	r3, [r4, #0]
 800b642:	07d9      	lsls	r1, r3, #31
 800b644:	d5d8      	bpl.n	800b5f8 <_printf_float+0x24c>
 800b646:	ee18 3a10 	vmov	r3, s16
 800b64a:	4652      	mov	r2, sl
 800b64c:	4631      	mov	r1, r6
 800b64e:	4628      	mov	r0, r5
 800b650:	47b8      	blx	r7
 800b652:	3001      	adds	r0, #1
 800b654:	f43f af09 	beq.w	800b46a <_printf_float+0xbe>
 800b658:	f04f 0900 	mov.w	r9, #0
 800b65c:	f104 0a1a 	add.w	sl, r4, #26
 800b660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b662:	425b      	negs	r3, r3
 800b664:	454b      	cmp	r3, r9
 800b666:	dc01      	bgt.n	800b66c <_printf_float+0x2c0>
 800b668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b66a:	e792      	b.n	800b592 <_printf_float+0x1e6>
 800b66c:	2301      	movs	r3, #1
 800b66e:	4652      	mov	r2, sl
 800b670:	4631      	mov	r1, r6
 800b672:	4628      	mov	r0, r5
 800b674:	47b8      	blx	r7
 800b676:	3001      	adds	r0, #1
 800b678:	f43f aef7 	beq.w	800b46a <_printf_float+0xbe>
 800b67c:	f109 0901 	add.w	r9, r9, #1
 800b680:	e7ee      	b.n	800b660 <_printf_float+0x2b4>
 800b682:	bf00      	nop
 800b684:	7fefffff 	.word	0x7fefffff
 800b688:	08011111 	.word	0x08011111
 800b68c:	08011115 	.word	0x08011115
 800b690:	08011119 	.word	0x08011119
 800b694:	0801111d 	.word	0x0801111d
 800b698:	08011121 	.word	0x08011121
 800b69c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b69e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	bfa8      	it	ge
 800b6a4:	461a      	movge	r2, r3
 800b6a6:	2a00      	cmp	r2, #0
 800b6a8:	4691      	mov	r9, r2
 800b6aa:	dc37      	bgt.n	800b71c <_printf_float+0x370>
 800b6ac:	f04f 0b00 	mov.w	fp, #0
 800b6b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6b4:	f104 021a 	add.w	r2, r4, #26
 800b6b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b6ba:	9305      	str	r3, [sp, #20]
 800b6bc:	eba3 0309 	sub.w	r3, r3, r9
 800b6c0:	455b      	cmp	r3, fp
 800b6c2:	dc33      	bgt.n	800b72c <_printf_float+0x380>
 800b6c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	db3b      	blt.n	800b744 <_printf_float+0x398>
 800b6cc:	6823      	ldr	r3, [r4, #0]
 800b6ce:	07da      	lsls	r2, r3, #31
 800b6d0:	d438      	bmi.n	800b744 <_printf_float+0x398>
 800b6d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b6d6:	eba2 0903 	sub.w	r9, r2, r3
 800b6da:	9b05      	ldr	r3, [sp, #20]
 800b6dc:	1ad2      	subs	r2, r2, r3
 800b6de:	4591      	cmp	r9, r2
 800b6e0:	bfa8      	it	ge
 800b6e2:	4691      	movge	r9, r2
 800b6e4:	f1b9 0f00 	cmp.w	r9, #0
 800b6e8:	dc35      	bgt.n	800b756 <_printf_float+0x3aa>
 800b6ea:	f04f 0800 	mov.w	r8, #0
 800b6ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6f2:	f104 0a1a 	add.w	sl, r4, #26
 800b6f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6fa:	1a9b      	subs	r3, r3, r2
 800b6fc:	eba3 0309 	sub.w	r3, r3, r9
 800b700:	4543      	cmp	r3, r8
 800b702:	f77f af79 	ble.w	800b5f8 <_printf_float+0x24c>
 800b706:	2301      	movs	r3, #1
 800b708:	4652      	mov	r2, sl
 800b70a:	4631      	mov	r1, r6
 800b70c:	4628      	mov	r0, r5
 800b70e:	47b8      	blx	r7
 800b710:	3001      	adds	r0, #1
 800b712:	f43f aeaa 	beq.w	800b46a <_printf_float+0xbe>
 800b716:	f108 0801 	add.w	r8, r8, #1
 800b71a:	e7ec      	b.n	800b6f6 <_printf_float+0x34a>
 800b71c:	4613      	mov	r3, r2
 800b71e:	4631      	mov	r1, r6
 800b720:	4642      	mov	r2, r8
 800b722:	4628      	mov	r0, r5
 800b724:	47b8      	blx	r7
 800b726:	3001      	adds	r0, #1
 800b728:	d1c0      	bne.n	800b6ac <_printf_float+0x300>
 800b72a:	e69e      	b.n	800b46a <_printf_float+0xbe>
 800b72c:	2301      	movs	r3, #1
 800b72e:	4631      	mov	r1, r6
 800b730:	4628      	mov	r0, r5
 800b732:	9205      	str	r2, [sp, #20]
 800b734:	47b8      	blx	r7
 800b736:	3001      	adds	r0, #1
 800b738:	f43f ae97 	beq.w	800b46a <_printf_float+0xbe>
 800b73c:	9a05      	ldr	r2, [sp, #20]
 800b73e:	f10b 0b01 	add.w	fp, fp, #1
 800b742:	e7b9      	b.n	800b6b8 <_printf_float+0x30c>
 800b744:	ee18 3a10 	vmov	r3, s16
 800b748:	4652      	mov	r2, sl
 800b74a:	4631      	mov	r1, r6
 800b74c:	4628      	mov	r0, r5
 800b74e:	47b8      	blx	r7
 800b750:	3001      	adds	r0, #1
 800b752:	d1be      	bne.n	800b6d2 <_printf_float+0x326>
 800b754:	e689      	b.n	800b46a <_printf_float+0xbe>
 800b756:	9a05      	ldr	r2, [sp, #20]
 800b758:	464b      	mov	r3, r9
 800b75a:	4442      	add	r2, r8
 800b75c:	4631      	mov	r1, r6
 800b75e:	4628      	mov	r0, r5
 800b760:	47b8      	blx	r7
 800b762:	3001      	adds	r0, #1
 800b764:	d1c1      	bne.n	800b6ea <_printf_float+0x33e>
 800b766:	e680      	b.n	800b46a <_printf_float+0xbe>
 800b768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b76a:	2a01      	cmp	r2, #1
 800b76c:	dc01      	bgt.n	800b772 <_printf_float+0x3c6>
 800b76e:	07db      	lsls	r3, r3, #31
 800b770:	d53a      	bpl.n	800b7e8 <_printf_float+0x43c>
 800b772:	2301      	movs	r3, #1
 800b774:	4642      	mov	r2, r8
 800b776:	4631      	mov	r1, r6
 800b778:	4628      	mov	r0, r5
 800b77a:	47b8      	blx	r7
 800b77c:	3001      	adds	r0, #1
 800b77e:	f43f ae74 	beq.w	800b46a <_printf_float+0xbe>
 800b782:	ee18 3a10 	vmov	r3, s16
 800b786:	4652      	mov	r2, sl
 800b788:	4631      	mov	r1, r6
 800b78a:	4628      	mov	r0, r5
 800b78c:	47b8      	blx	r7
 800b78e:	3001      	adds	r0, #1
 800b790:	f43f ae6b 	beq.w	800b46a <_printf_float+0xbe>
 800b794:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b798:	2200      	movs	r2, #0
 800b79a:	2300      	movs	r3, #0
 800b79c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b7a0:	f7f5 f992 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7a4:	b9d8      	cbnz	r0, 800b7de <_printf_float+0x432>
 800b7a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b7aa:	f108 0201 	add.w	r2, r8, #1
 800b7ae:	4631      	mov	r1, r6
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	47b8      	blx	r7
 800b7b4:	3001      	adds	r0, #1
 800b7b6:	d10e      	bne.n	800b7d6 <_printf_float+0x42a>
 800b7b8:	e657      	b.n	800b46a <_printf_float+0xbe>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	4652      	mov	r2, sl
 800b7be:	4631      	mov	r1, r6
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	47b8      	blx	r7
 800b7c4:	3001      	adds	r0, #1
 800b7c6:	f43f ae50 	beq.w	800b46a <_printf_float+0xbe>
 800b7ca:	f108 0801 	add.w	r8, r8, #1
 800b7ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7d0:	3b01      	subs	r3, #1
 800b7d2:	4543      	cmp	r3, r8
 800b7d4:	dcf1      	bgt.n	800b7ba <_printf_float+0x40e>
 800b7d6:	464b      	mov	r3, r9
 800b7d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b7dc:	e6da      	b.n	800b594 <_printf_float+0x1e8>
 800b7de:	f04f 0800 	mov.w	r8, #0
 800b7e2:	f104 0a1a 	add.w	sl, r4, #26
 800b7e6:	e7f2      	b.n	800b7ce <_printf_float+0x422>
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	4642      	mov	r2, r8
 800b7ec:	e7df      	b.n	800b7ae <_printf_float+0x402>
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	464a      	mov	r2, r9
 800b7f2:	4631      	mov	r1, r6
 800b7f4:	4628      	mov	r0, r5
 800b7f6:	47b8      	blx	r7
 800b7f8:	3001      	adds	r0, #1
 800b7fa:	f43f ae36 	beq.w	800b46a <_printf_float+0xbe>
 800b7fe:	f108 0801 	add.w	r8, r8, #1
 800b802:	68e3      	ldr	r3, [r4, #12]
 800b804:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b806:	1a5b      	subs	r3, r3, r1
 800b808:	4543      	cmp	r3, r8
 800b80a:	dcf0      	bgt.n	800b7ee <_printf_float+0x442>
 800b80c:	e6f8      	b.n	800b600 <_printf_float+0x254>
 800b80e:	f04f 0800 	mov.w	r8, #0
 800b812:	f104 0919 	add.w	r9, r4, #25
 800b816:	e7f4      	b.n	800b802 <_printf_float+0x456>

0800b818 <_printf_common>:
 800b818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b81c:	4616      	mov	r6, r2
 800b81e:	4699      	mov	r9, r3
 800b820:	688a      	ldr	r2, [r1, #8]
 800b822:	690b      	ldr	r3, [r1, #16]
 800b824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b828:	4293      	cmp	r3, r2
 800b82a:	bfb8      	it	lt
 800b82c:	4613      	movlt	r3, r2
 800b82e:	6033      	str	r3, [r6, #0]
 800b830:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b834:	4607      	mov	r7, r0
 800b836:	460c      	mov	r4, r1
 800b838:	b10a      	cbz	r2, 800b83e <_printf_common+0x26>
 800b83a:	3301      	adds	r3, #1
 800b83c:	6033      	str	r3, [r6, #0]
 800b83e:	6823      	ldr	r3, [r4, #0]
 800b840:	0699      	lsls	r1, r3, #26
 800b842:	bf42      	ittt	mi
 800b844:	6833      	ldrmi	r3, [r6, #0]
 800b846:	3302      	addmi	r3, #2
 800b848:	6033      	strmi	r3, [r6, #0]
 800b84a:	6825      	ldr	r5, [r4, #0]
 800b84c:	f015 0506 	ands.w	r5, r5, #6
 800b850:	d106      	bne.n	800b860 <_printf_common+0x48>
 800b852:	f104 0a19 	add.w	sl, r4, #25
 800b856:	68e3      	ldr	r3, [r4, #12]
 800b858:	6832      	ldr	r2, [r6, #0]
 800b85a:	1a9b      	subs	r3, r3, r2
 800b85c:	42ab      	cmp	r3, r5
 800b85e:	dc26      	bgt.n	800b8ae <_printf_common+0x96>
 800b860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b864:	1e13      	subs	r3, r2, #0
 800b866:	6822      	ldr	r2, [r4, #0]
 800b868:	bf18      	it	ne
 800b86a:	2301      	movne	r3, #1
 800b86c:	0692      	lsls	r2, r2, #26
 800b86e:	d42b      	bmi.n	800b8c8 <_printf_common+0xb0>
 800b870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b874:	4649      	mov	r1, r9
 800b876:	4638      	mov	r0, r7
 800b878:	47c0      	blx	r8
 800b87a:	3001      	adds	r0, #1
 800b87c:	d01e      	beq.n	800b8bc <_printf_common+0xa4>
 800b87e:	6823      	ldr	r3, [r4, #0]
 800b880:	6922      	ldr	r2, [r4, #16]
 800b882:	f003 0306 	and.w	r3, r3, #6
 800b886:	2b04      	cmp	r3, #4
 800b888:	bf02      	ittt	eq
 800b88a:	68e5      	ldreq	r5, [r4, #12]
 800b88c:	6833      	ldreq	r3, [r6, #0]
 800b88e:	1aed      	subeq	r5, r5, r3
 800b890:	68a3      	ldr	r3, [r4, #8]
 800b892:	bf0c      	ite	eq
 800b894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b898:	2500      	movne	r5, #0
 800b89a:	4293      	cmp	r3, r2
 800b89c:	bfc4      	itt	gt
 800b89e:	1a9b      	subgt	r3, r3, r2
 800b8a0:	18ed      	addgt	r5, r5, r3
 800b8a2:	2600      	movs	r6, #0
 800b8a4:	341a      	adds	r4, #26
 800b8a6:	42b5      	cmp	r5, r6
 800b8a8:	d11a      	bne.n	800b8e0 <_printf_common+0xc8>
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	e008      	b.n	800b8c0 <_printf_common+0xa8>
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	4652      	mov	r2, sl
 800b8b2:	4649      	mov	r1, r9
 800b8b4:	4638      	mov	r0, r7
 800b8b6:	47c0      	blx	r8
 800b8b8:	3001      	adds	r0, #1
 800b8ba:	d103      	bne.n	800b8c4 <_printf_common+0xac>
 800b8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8c4:	3501      	adds	r5, #1
 800b8c6:	e7c6      	b.n	800b856 <_printf_common+0x3e>
 800b8c8:	18e1      	adds	r1, r4, r3
 800b8ca:	1c5a      	adds	r2, r3, #1
 800b8cc:	2030      	movs	r0, #48	; 0x30
 800b8ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b8d2:	4422      	add	r2, r4
 800b8d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b8d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b8dc:	3302      	adds	r3, #2
 800b8de:	e7c7      	b.n	800b870 <_printf_common+0x58>
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	4622      	mov	r2, r4
 800b8e4:	4649      	mov	r1, r9
 800b8e6:	4638      	mov	r0, r7
 800b8e8:	47c0      	blx	r8
 800b8ea:	3001      	adds	r0, #1
 800b8ec:	d0e6      	beq.n	800b8bc <_printf_common+0xa4>
 800b8ee:	3601      	adds	r6, #1
 800b8f0:	e7d9      	b.n	800b8a6 <_printf_common+0x8e>
	...

0800b8f4 <_printf_i>:
 800b8f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f8:	7e0f      	ldrb	r7, [r1, #24]
 800b8fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b8fc:	2f78      	cmp	r7, #120	; 0x78
 800b8fe:	4691      	mov	r9, r2
 800b900:	4680      	mov	r8, r0
 800b902:	460c      	mov	r4, r1
 800b904:	469a      	mov	sl, r3
 800b906:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b90a:	d807      	bhi.n	800b91c <_printf_i+0x28>
 800b90c:	2f62      	cmp	r7, #98	; 0x62
 800b90e:	d80a      	bhi.n	800b926 <_printf_i+0x32>
 800b910:	2f00      	cmp	r7, #0
 800b912:	f000 80d4 	beq.w	800babe <_printf_i+0x1ca>
 800b916:	2f58      	cmp	r7, #88	; 0x58
 800b918:	f000 80c0 	beq.w	800ba9c <_printf_i+0x1a8>
 800b91c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b920:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b924:	e03a      	b.n	800b99c <_printf_i+0xa8>
 800b926:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b92a:	2b15      	cmp	r3, #21
 800b92c:	d8f6      	bhi.n	800b91c <_printf_i+0x28>
 800b92e:	a101      	add	r1, pc, #4	; (adr r1, 800b934 <_printf_i+0x40>)
 800b930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b934:	0800b98d 	.word	0x0800b98d
 800b938:	0800b9a1 	.word	0x0800b9a1
 800b93c:	0800b91d 	.word	0x0800b91d
 800b940:	0800b91d 	.word	0x0800b91d
 800b944:	0800b91d 	.word	0x0800b91d
 800b948:	0800b91d 	.word	0x0800b91d
 800b94c:	0800b9a1 	.word	0x0800b9a1
 800b950:	0800b91d 	.word	0x0800b91d
 800b954:	0800b91d 	.word	0x0800b91d
 800b958:	0800b91d 	.word	0x0800b91d
 800b95c:	0800b91d 	.word	0x0800b91d
 800b960:	0800baa5 	.word	0x0800baa5
 800b964:	0800b9cd 	.word	0x0800b9cd
 800b968:	0800ba5f 	.word	0x0800ba5f
 800b96c:	0800b91d 	.word	0x0800b91d
 800b970:	0800b91d 	.word	0x0800b91d
 800b974:	0800bac7 	.word	0x0800bac7
 800b978:	0800b91d 	.word	0x0800b91d
 800b97c:	0800b9cd 	.word	0x0800b9cd
 800b980:	0800b91d 	.word	0x0800b91d
 800b984:	0800b91d 	.word	0x0800b91d
 800b988:	0800ba67 	.word	0x0800ba67
 800b98c:	682b      	ldr	r3, [r5, #0]
 800b98e:	1d1a      	adds	r2, r3, #4
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	602a      	str	r2, [r5, #0]
 800b994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b99c:	2301      	movs	r3, #1
 800b99e:	e09f      	b.n	800bae0 <_printf_i+0x1ec>
 800b9a0:	6820      	ldr	r0, [r4, #0]
 800b9a2:	682b      	ldr	r3, [r5, #0]
 800b9a4:	0607      	lsls	r7, r0, #24
 800b9a6:	f103 0104 	add.w	r1, r3, #4
 800b9aa:	6029      	str	r1, [r5, #0]
 800b9ac:	d501      	bpl.n	800b9b2 <_printf_i+0xbe>
 800b9ae:	681e      	ldr	r6, [r3, #0]
 800b9b0:	e003      	b.n	800b9ba <_printf_i+0xc6>
 800b9b2:	0646      	lsls	r6, r0, #25
 800b9b4:	d5fb      	bpl.n	800b9ae <_printf_i+0xba>
 800b9b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b9ba:	2e00      	cmp	r6, #0
 800b9bc:	da03      	bge.n	800b9c6 <_printf_i+0xd2>
 800b9be:	232d      	movs	r3, #45	; 0x2d
 800b9c0:	4276      	negs	r6, r6
 800b9c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9c6:	485a      	ldr	r0, [pc, #360]	; (800bb30 <_printf_i+0x23c>)
 800b9c8:	230a      	movs	r3, #10
 800b9ca:	e012      	b.n	800b9f2 <_printf_i+0xfe>
 800b9cc:	682b      	ldr	r3, [r5, #0]
 800b9ce:	6820      	ldr	r0, [r4, #0]
 800b9d0:	1d19      	adds	r1, r3, #4
 800b9d2:	6029      	str	r1, [r5, #0]
 800b9d4:	0605      	lsls	r5, r0, #24
 800b9d6:	d501      	bpl.n	800b9dc <_printf_i+0xe8>
 800b9d8:	681e      	ldr	r6, [r3, #0]
 800b9da:	e002      	b.n	800b9e2 <_printf_i+0xee>
 800b9dc:	0641      	lsls	r1, r0, #25
 800b9de:	d5fb      	bpl.n	800b9d8 <_printf_i+0xe4>
 800b9e0:	881e      	ldrh	r6, [r3, #0]
 800b9e2:	4853      	ldr	r0, [pc, #332]	; (800bb30 <_printf_i+0x23c>)
 800b9e4:	2f6f      	cmp	r7, #111	; 0x6f
 800b9e6:	bf0c      	ite	eq
 800b9e8:	2308      	moveq	r3, #8
 800b9ea:	230a      	movne	r3, #10
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b9f2:	6865      	ldr	r5, [r4, #4]
 800b9f4:	60a5      	str	r5, [r4, #8]
 800b9f6:	2d00      	cmp	r5, #0
 800b9f8:	bfa2      	ittt	ge
 800b9fa:	6821      	ldrge	r1, [r4, #0]
 800b9fc:	f021 0104 	bicge.w	r1, r1, #4
 800ba00:	6021      	strge	r1, [r4, #0]
 800ba02:	b90e      	cbnz	r6, 800ba08 <_printf_i+0x114>
 800ba04:	2d00      	cmp	r5, #0
 800ba06:	d04b      	beq.n	800baa0 <_printf_i+0x1ac>
 800ba08:	4615      	mov	r5, r2
 800ba0a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ba0e:	fb03 6711 	mls	r7, r3, r1, r6
 800ba12:	5dc7      	ldrb	r7, [r0, r7]
 800ba14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ba18:	4637      	mov	r7, r6
 800ba1a:	42bb      	cmp	r3, r7
 800ba1c:	460e      	mov	r6, r1
 800ba1e:	d9f4      	bls.n	800ba0a <_printf_i+0x116>
 800ba20:	2b08      	cmp	r3, #8
 800ba22:	d10b      	bne.n	800ba3c <_printf_i+0x148>
 800ba24:	6823      	ldr	r3, [r4, #0]
 800ba26:	07de      	lsls	r6, r3, #31
 800ba28:	d508      	bpl.n	800ba3c <_printf_i+0x148>
 800ba2a:	6923      	ldr	r3, [r4, #16]
 800ba2c:	6861      	ldr	r1, [r4, #4]
 800ba2e:	4299      	cmp	r1, r3
 800ba30:	bfde      	ittt	le
 800ba32:	2330      	movle	r3, #48	; 0x30
 800ba34:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba38:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ba3c:	1b52      	subs	r2, r2, r5
 800ba3e:	6122      	str	r2, [r4, #16]
 800ba40:	f8cd a000 	str.w	sl, [sp]
 800ba44:	464b      	mov	r3, r9
 800ba46:	aa03      	add	r2, sp, #12
 800ba48:	4621      	mov	r1, r4
 800ba4a:	4640      	mov	r0, r8
 800ba4c:	f7ff fee4 	bl	800b818 <_printf_common>
 800ba50:	3001      	adds	r0, #1
 800ba52:	d14a      	bne.n	800baea <_printf_i+0x1f6>
 800ba54:	f04f 30ff 	mov.w	r0, #4294967295
 800ba58:	b004      	add	sp, #16
 800ba5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba5e:	6823      	ldr	r3, [r4, #0]
 800ba60:	f043 0320 	orr.w	r3, r3, #32
 800ba64:	6023      	str	r3, [r4, #0]
 800ba66:	4833      	ldr	r0, [pc, #204]	; (800bb34 <_printf_i+0x240>)
 800ba68:	2778      	movs	r7, #120	; 0x78
 800ba6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ba6e:	6823      	ldr	r3, [r4, #0]
 800ba70:	6829      	ldr	r1, [r5, #0]
 800ba72:	061f      	lsls	r7, r3, #24
 800ba74:	f851 6b04 	ldr.w	r6, [r1], #4
 800ba78:	d402      	bmi.n	800ba80 <_printf_i+0x18c>
 800ba7a:	065f      	lsls	r7, r3, #25
 800ba7c:	bf48      	it	mi
 800ba7e:	b2b6      	uxthmi	r6, r6
 800ba80:	07df      	lsls	r7, r3, #31
 800ba82:	bf48      	it	mi
 800ba84:	f043 0320 	orrmi.w	r3, r3, #32
 800ba88:	6029      	str	r1, [r5, #0]
 800ba8a:	bf48      	it	mi
 800ba8c:	6023      	strmi	r3, [r4, #0]
 800ba8e:	b91e      	cbnz	r6, 800ba98 <_printf_i+0x1a4>
 800ba90:	6823      	ldr	r3, [r4, #0]
 800ba92:	f023 0320 	bic.w	r3, r3, #32
 800ba96:	6023      	str	r3, [r4, #0]
 800ba98:	2310      	movs	r3, #16
 800ba9a:	e7a7      	b.n	800b9ec <_printf_i+0xf8>
 800ba9c:	4824      	ldr	r0, [pc, #144]	; (800bb30 <_printf_i+0x23c>)
 800ba9e:	e7e4      	b.n	800ba6a <_printf_i+0x176>
 800baa0:	4615      	mov	r5, r2
 800baa2:	e7bd      	b.n	800ba20 <_printf_i+0x12c>
 800baa4:	682b      	ldr	r3, [r5, #0]
 800baa6:	6826      	ldr	r6, [r4, #0]
 800baa8:	6961      	ldr	r1, [r4, #20]
 800baaa:	1d18      	adds	r0, r3, #4
 800baac:	6028      	str	r0, [r5, #0]
 800baae:	0635      	lsls	r5, r6, #24
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	d501      	bpl.n	800bab8 <_printf_i+0x1c4>
 800bab4:	6019      	str	r1, [r3, #0]
 800bab6:	e002      	b.n	800babe <_printf_i+0x1ca>
 800bab8:	0670      	lsls	r0, r6, #25
 800baba:	d5fb      	bpl.n	800bab4 <_printf_i+0x1c0>
 800babc:	8019      	strh	r1, [r3, #0]
 800babe:	2300      	movs	r3, #0
 800bac0:	6123      	str	r3, [r4, #16]
 800bac2:	4615      	mov	r5, r2
 800bac4:	e7bc      	b.n	800ba40 <_printf_i+0x14c>
 800bac6:	682b      	ldr	r3, [r5, #0]
 800bac8:	1d1a      	adds	r2, r3, #4
 800baca:	602a      	str	r2, [r5, #0]
 800bacc:	681d      	ldr	r5, [r3, #0]
 800bace:	6862      	ldr	r2, [r4, #4]
 800bad0:	2100      	movs	r1, #0
 800bad2:	4628      	mov	r0, r5
 800bad4:	f7f4 fb7c 	bl	80001d0 <memchr>
 800bad8:	b108      	cbz	r0, 800bade <_printf_i+0x1ea>
 800bada:	1b40      	subs	r0, r0, r5
 800badc:	6060      	str	r0, [r4, #4]
 800bade:	6863      	ldr	r3, [r4, #4]
 800bae0:	6123      	str	r3, [r4, #16]
 800bae2:	2300      	movs	r3, #0
 800bae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bae8:	e7aa      	b.n	800ba40 <_printf_i+0x14c>
 800baea:	6923      	ldr	r3, [r4, #16]
 800baec:	462a      	mov	r2, r5
 800baee:	4649      	mov	r1, r9
 800baf0:	4640      	mov	r0, r8
 800baf2:	47d0      	blx	sl
 800baf4:	3001      	adds	r0, #1
 800baf6:	d0ad      	beq.n	800ba54 <_printf_i+0x160>
 800baf8:	6823      	ldr	r3, [r4, #0]
 800bafa:	079b      	lsls	r3, r3, #30
 800bafc:	d413      	bmi.n	800bb26 <_printf_i+0x232>
 800bafe:	68e0      	ldr	r0, [r4, #12]
 800bb00:	9b03      	ldr	r3, [sp, #12]
 800bb02:	4298      	cmp	r0, r3
 800bb04:	bfb8      	it	lt
 800bb06:	4618      	movlt	r0, r3
 800bb08:	e7a6      	b.n	800ba58 <_printf_i+0x164>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	4632      	mov	r2, r6
 800bb0e:	4649      	mov	r1, r9
 800bb10:	4640      	mov	r0, r8
 800bb12:	47d0      	blx	sl
 800bb14:	3001      	adds	r0, #1
 800bb16:	d09d      	beq.n	800ba54 <_printf_i+0x160>
 800bb18:	3501      	adds	r5, #1
 800bb1a:	68e3      	ldr	r3, [r4, #12]
 800bb1c:	9903      	ldr	r1, [sp, #12]
 800bb1e:	1a5b      	subs	r3, r3, r1
 800bb20:	42ab      	cmp	r3, r5
 800bb22:	dcf2      	bgt.n	800bb0a <_printf_i+0x216>
 800bb24:	e7eb      	b.n	800bafe <_printf_i+0x20a>
 800bb26:	2500      	movs	r5, #0
 800bb28:	f104 0619 	add.w	r6, r4, #25
 800bb2c:	e7f5      	b.n	800bb1a <_printf_i+0x226>
 800bb2e:	bf00      	nop
 800bb30:	08011123 	.word	0x08011123
 800bb34:	08011134 	.word	0x08011134

0800bb38 <_scanf_float>:
 800bb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb3c:	b087      	sub	sp, #28
 800bb3e:	4617      	mov	r7, r2
 800bb40:	9303      	str	r3, [sp, #12]
 800bb42:	688b      	ldr	r3, [r1, #8]
 800bb44:	1e5a      	subs	r2, r3, #1
 800bb46:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bb4a:	bf83      	ittte	hi
 800bb4c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bb50:	195b      	addhi	r3, r3, r5
 800bb52:	9302      	strhi	r3, [sp, #8]
 800bb54:	2300      	movls	r3, #0
 800bb56:	bf86      	itte	hi
 800bb58:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bb5c:	608b      	strhi	r3, [r1, #8]
 800bb5e:	9302      	strls	r3, [sp, #8]
 800bb60:	680b      	ldr	r3, [r1, #0]
 800bb62:	468b      	mov	fp, r1
 800bb64:	2500      	movs	r5, #0
 800bb66:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800bb6a:	f84b 3b1c 	str.w	r3, [fp], #28
 800bb6e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bb72:	4680      	mov	r8, r0
 800bb74:	460c      	mov	r4, r1
 800bb76:	465e      	mov	r6, fp
 800bb78:	46aa      	mov	sl, r5
 800bb7a:	46a9      	mov	r9, r5
 800bb7c:	9501      	str	r5, [sp, #4]
 800bb7e:	68a2      	ldr	r2, [r4, #8]
 800bb80:	b152      	cbz	r2, 800bb98 <_scanf_float+0x60>
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	2b4e      	cmp	r3, #78	; 0x4e
 800bb88:	d864      	bhi.n	800bc54 <_scanf_float+0x11c>
 800bb8a:	2b40      	cmp	r3, #64	; 0x40
 800bb8c:	d83c      	bhi.n	800bc08 <_scanf_float+0xd0>
 800bb8e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800bb92:	b2c8      	uxtb	r0, r1
 800bb94:	280e      	cmp	r0, #14
 800bb96:	d93a      	bls.n	800bc0e <_scanf_float+0xd6>
 800bb98:	f1b9 0f00 	cmp.w	r9, #0
 800bb9c:	d003      	beq.n	800bba6 <_scanf_float+0x6e>
 800bb9e:	6823      	ldr	r3, [r4, #0]
 800bba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bba4:	6023      	str	r3, [r4, #0]
 800bba6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bbaa:	f1ba 0f01 	cmp.w	sl, #1
 800bbae:	f200 8113 	bhi.w	800bdd8 <_scanf_float+0x2a0>
 800bbb2:	455e      	cmp	r6, fp
 800bbb4:	f200 8105 	bhi.w	800bdc2 <_scanf_float+0x28a>
 800bbb8:	2501      	movs	r5, #1
 800bbba:	4628      	mov	r0, r5
 800bbbc:	b007      	add	sp, #28
 800bbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800bbc6:	2a0d      	cmp	r2, #13
 800bbc8:	d8e6      	bhi.n	800bb98 <_scanf_float+0x60>
 800bbca:	a101      	add	r1, pc, #4	; (adr r1, 800bbd0 <_scanf_float+0x98>)
 800bbcc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bbd0:	0800bd0f 	.word	0x0800bd0f
 800bbd4:	0800bb99 	.word	0x0800bb99
 800bbd8:	0800bb99 	.word	0x0800bb99
 800bbdc:	0800bb99 	.word	0x0800bb99
 800bbe0:	0800bd6f 	.word	0x0800bd6f
 800bbe4:	0800bd47 	.word	0x0800bd47
 800bbe8:	0800bb99 	.word	0x0800bb99
 800bbec:	0800bb99 	.word	0x0800bb99
 800bbf0:	0800bd1d 	.word	0x0800bd1d
 800bbf4:	0800bb99 	.word	0x0800bb99
 800bbf8:	0800bb99 	.word	0x0800bb99
 800bbfc:	0800bb99 	.word	0x0800bb99
 800bc00:	0800bb99 	.word	0x0800bb99
 800bc04:	0800bcd5 	.word	0x0800bcd5
 800bc08:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800bc0c:	e7db      	b.n	800bbc6 <_scanf_float+0x8e>
 800bc0e:	290e      	cmp	r1, #14
 800bc10:	d8c2      	bhi.n	800bb98 <_scanf_float+0x60>
 800bc12:	a001      	add	r0, pc, #4	; (adr r0, 800bc18 <_scanf_float+0xe0>)
 800bc14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bc18:	0800bcc7 	.word	0x0800bcc7
 800bc1c:	0800bb99 	.word	0x0800bb99
 800bc20:	0800bcc7 	.word	0x0800bcc7
 800bc24:	0800bd5b 	.word	0x0800bd5b
 800bc28:	0800bb99 	.word	0x0800bb99
 800bc2c:	0800bc75 	.word	0x0800bc75
 800bc30:	0800bcb1 	.word	0x0800bcb1
 800bc34:	0800bcb1 	.word	0x0800bcb1
 800bc38:	0800bcb1 	.word	0x0800bcb1
 800bc3c:	0800bcb1 	.word	0x0800bcb1
 800bc40:	0800bcb1 	.word	0x0800bcb1
 800bc44:	0800bcb1 	.word	0x0800bcb1
 800bc48:	0800bcb1 	.word	0x0800bcb1
 800bc4c:	0800bcb1 	.word	0x0800bcb1
 800bc50:	0800bcb1 	.word	0x0800bcb1
 800bc54:	2b6e      	cmp	r3, #110	; 0x6e
 800bc56:	d809      	bhi.n	800bc6c <_scanf_float+0x134>
 800bc58:	2b60      	cmp	r3, #96	; 0x60
 800bc5a:	d8b2      	bhi.n	800bbc2 <_scanf_float+0x8a>
 800bc5c:	2b54      	cmp	r3, #84	; 0x54
 800bc5e:	d077      	beq.n	800bd50 <_scanf_float+0x218>
 800bc60:	2b59      	cmp	r3, #89	; 0x59
 800bc62:	d199      	bne.n	800bb98 <_scanf_float+0x60>
 800bc64:	2d07      	cmp	r5, #7
 800bc66:	d197      	bne.n	800bb98 <_scanf_float+0x60>
 800bc68:	2508      	movs	r5, #8
 800bc6a:	e029      	b.n	800bcc0 <_scanf_float+0x188>
 800bc6c:	2b74      	cmp	r3, #116	; 0x74
 800bc6e:	d06f      	beq.n	800bd50 <_scanf_float+0x218>
 800bc70:	2b79      	cmp	r3, #121	; 0x79
 800bc72:	e7f6      	b.n	800bc62 <_scanf_float+0x12a>
 800bc74:	6821      	ldr	r1, [r4, #0]
 800bc76:	05c8      	lsls	r0, r1, #23
 800bc78:	d51a      	bpl.n	800bcb0 <_scanf_float+0x178>
 800bc7a:	9b02      	ldr	r3, [sp, #8]
 800bc7c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bc80:	6021      	str	r1, [r4, #0]
 800bc82:	f109 0901 	add.w	r9, r9, #1
 800bc86:	b11b      	cbz	r3, 800bc90 <_scanf_float+0x158>
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	3201      	adds	r2, #1
 800bc8c:	9302      	str	r3, [sp, #8]
 800bc8e:	60a2      	str	r2, [r4, #8]
 800bc90:	68a3      	ldr	r3, [r4, #8]
 800bc92:	3b01      	subs	r3, #1
 800bc94:	60a3      	str	r3, [r4, #8]
 800bc96:	6923      	ldr	r3, [r4, #16]
 800bc98:	3301      	adds	r3, #1
 800bc9a:	6123      	str	r3, [r4, #16]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	3b01      	subs	r3, #1
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	607b      	str	r3, [r7, #4]
 800bca4:	f340 8084 	ble.w	800bdb0 <_scanf_float+0x278>
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	603b      	str	r3, [r7, #0]
 800bcae:	e766      	b.n	800bb7e <_scanf_float+0x46>
 800bcb0:	eb1a 0f05 	cmn.w	sl, r5
 800bcb4:	f47f af70 	bne.w	800bb98 <_scanf_float+0x60>
 800bcb8:	6822      	ldr	r2, [r4, #0]
 800bcba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bcbe:	6022      	str	r2, [r4, #0]
 800bcc0:	f806 3b01 	strb.w	r3, [r6], #1
 800bcc4:	e7e4      	b.n	800bc90 <_scanf_float+0x158>
 800bcc6:	6822      	ldr	r2, [r4, #0]
 800bcc8:	0610      	lsls	r0, r2, #24
 800bcca:	f57f af65 	bpl.w	800bb98 <_scanf_float+0x60>
 800bcce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bcd2:	e7f4      	b.n	800bcbe <_scanf_float+0x186>
 800bcd4:	f1ba 0f00 	cmp.w	sl, #0
 800bcd8:	d10e      	bne.n	800bcf8 <_scanf_float+0x1c0>
 800bcda:	f1b9 0f00 	cmp.w	r9, #0
 800bcde:	d10e      	bne.n	800bcfe <_scanf_float+0x1c6>
 800bce0:	6822      	ldr	r2, [r4, #0]
 800bce2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bce6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bcea:	d108      	bne.n	800bcfe <_scanf_float+0x1c6>
 800bcec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bcf0:	6022      	str	r2, [r4, #0]
 800bcf2:	f04f 0a01 	mov.w	sl, #1
 800bcf6:	e7e3      	b.n	800bcc0 <_scanf_float+0x188>
 800bcf8:	f1ba 0f02 	cmp.w	sl, #2
 800bcfc:	d055      	beq.n	800bdaa <_scanf_float+0x272>
 800bcfe:	2d01      	cmp	r5, #1
 800bd00:	d002      	beq.n	800bd08 <_scanf_float+0x1d0>
 800bd02:	2d04      	cmp	r5, #4
 800bd04:	f47f af48 	bne.w	800bb98 <_scanf_float+0x60>
 800bd08:	3501      	adds	r5, #1
 800bd0a:	b2ed      	uxtb	r5, r5
 800bd0c:	e7d8      	b.n	800bcc0 <_scanf_float+0x188>
 800bd0e:	f1ba 0f01 	cmp.w	sl, #1
 800bd12:	f47f af41 	bne.w	800bb98 <_scanf_float+0x60>
 800bd16:	f04f 0a02 	mov.w	sl, #2
 800bd1a:	e7d1      	b.n	800bcc0 <_scanf_float+0x188>
 800bd1c:	b97d      	cbnz	r5, 800bd3e <_scanf_float+0x206>
 800bd1e:	f1b9 0f00 	cmp.w	r9, #0
 800bd22:	f47f af3c 	bne.w	800bb9e <_scanf_float+0x66>
 800bd26:	6822      	ldr	r2, [r4, #0]
 800bd28:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bd2c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bd30:	f47f af39 	bne.w	800bba6 <_scanf_float+0x6e>
 800bd34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bd38:	6022      	str	r2, [r4, #0]
 800bd3a:	2501      	movs	r5, #1
 800bd3c:	e7c0      	b.n	800bcc0 <_scanf_float+0x188>
 800bd3e:	2d03      	cmp	r5, #3
 800bd40:	d0e2      	beq.n	800bd08 <_scanf_float+0x1d0>
 800bd42:	2d05      	cmp	r5, #5
 800bd44:	e7de      	b.n	800bd04 <_scanf_float+0x1cc>
 800bd46:	2d02      	cmp	r5, #2
 800bd48:	f47f af26 	bne.w	800bb98 <_scanf_float+0x60>
 800bd4c:	2503      	movs	r5, #3
 800bd4e:	e7b7      	b.n	800bcc0 <_scanf_float+0x188>
 800bd50:	2d06      	cmp	r5, #6
 800bd52:	f47f af21 	bne.w	800bb98 <_scanf_float+0x60>
 800bd56:	2507      	movs	r5, #7
 800bd58:	e7b2      	b.n	800bcc0 <_scanf_float+0x188>
 800bd5a:	6822      	ldr	r2, [r4, #0]
 800bd5c:	0591      	lsls	r1, r2, #22
 800bd5e:	f57f af1b 	bpl.w	800bb98 <_scanf_float+0x60>
 800bd62:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800bd66:	6022      	str	r2, [r4, #0]
 800bd68:	f8cd 9004 	str.w	r9, [sp, #4]
 800bd6c:	e7a8      	b.n	800bcc0 <_scanf_float+0x188>
 800bd6e:	6822      	ldr	r2, [r4, #0]
 800bd70:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bd74:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bd78:	d006      	beq.n	800bd88 <_scanf_float+0x250>
 800bd7a:	0550      	lsls	r0, r2, #21
 800bd7c:	f57f af0c 	bpl.w	800bb98 <_scanf_float+0x60>
 800bd80:	f1b9 0f00 	cmp.w	r9, #0
 800bd84:	f43f af0f 	beq.w	800bba6 <_scanf_float+0x6e>
 800bd88:	0591      	lsls	r1, r2, #22
 800bd8a:	bf58      	it	pl
 800bd8c:	9901      	ldrpl	r1, [sp, #4]
 800bd8e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bd92:	bf58      	it	pl
 800bd94:	eba9 0101 	subpl.w	r1, r9, r1
 800bd98:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bd9c:	bf58      	it	pl
 800bd9e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bda2:	6022      	str	r2, [r4, #0]
 800bda4:	f04f 0900 	mov.w	r9, #0
 800bda8:	e78a      	b.n	800bcc0 <_scanf_float+0x188>
 800bdaa:	f04f 0a03 	mov.w	sl, #3
 800bdae:	e787      	b.n	800bcc0 <_scanf_float+0x188>
 800bdb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bdb4:	4639      	mov	r1, r7
 800bdb6:	4640      	mov	r0, r8
 800bdb8:	4798      	blx	r3
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	f43f aedf 	beq.w	800bb7e <_scanf_float+0x46>
 800bdc0:	e6ea      	b.n	800bb98 <_scanf_float+0x60>
 800bdc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bdc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bdca:	463a      	mov	r2, r7
 800bdcc:	4640      	mov	r0, r8
 800bdce:	4798      	blx	r3
 800bdd0:	6923      	ldr	r3, [r4, #16]
 800bdd2:	3b01      	subs	r3, #1
 800bdd4:	6123      	str	r3, [r4, #16]
 800bdd6:	e6ec      	b.n	800bbb2 <_scanf_float+0x7a>
 800bdd8:	1e6b      	subs	r3, r5, #1
 800bdda:	2b06      	cmp	r3, #6
 800bddc:	d825      	bhi.n	800be2a <_scanf_float+0x2f2>
 800bdde:	2d02      	cmp	r5, #2
 800bde0:	d836      	bhi.n	800be50 <_scanf_float+0x318>
 800bde2:	455e      	cmp	r6, fp
 800bde4:	f67f aee8 	bls.w	800bbb8 <_scanf_float+0x80>
 800bde8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bdec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bdf0:	463a      	mov	r2, r7
 800bdf2:	4640      	mov	r0, r8
 800bdf4:	4798      	blx	r3
 800bdf6:	6923      	ldr	r3, [r4, #16]
 800bdf8:	3b01      	subs	r3, #1
 800bdfa:	6123      	str	r3, [r4, #16]
 800bdfc:	e7f1      	b.n	800bde2 <_scanf_float+0x2aa>
 800bdfe:	9802      	ldr	r0, [sp, #8]
 800be00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800be04:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800be08:	9002      	str	r0, [sp, #8]
 800be0a:	463a      	mov	r2, r7
 800be0c:	4640      	mov	r0, r8
 800be0e:	4798      	blx	r3
 800be10:	6923      	ldr	r3, [r4, #16]
 800be12:	3b01      	subs	r3, #1
 800be14:	6123      	str	r3, [r4, #16]
 800be16:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be1a:	fa5f fa8a 	uxtb.w	sl, sl
 800be1e:	f1ba 0f02 	cmp.w	sl, #2
 800be22:	d1ec      	bne.n	800bdfe <_scanf_float+0x2c6>
 800be24:	3d03      	subs	r5, #3
 800be26:	b2ed      	uxtb	r5, r5
 800be28:	1b76      	subs	r6, r6, r5
 800be2a:	6823      	ldr	r3, [r4, #0]
 800be2c:	05da      	lsls	r2, r3, #23
 800be2e:	d52f      	bpl.n	800be90 <_scanf_float+0x358>
 800be30:	055b      	lsls	r3, r3, #21
 800be32:	d510      	bpl.n	800be56 <_scanf_float+0x31e>
 800be34:	455e      	cmp	r6, fp
 800be36:	f67f aebf 	bls.w	800bbb8 <_scanf_float+0x80>
 800be3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800be3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800be42:	463a      	mov	r2, r7
 800be44:	4640      	mov	r0, r8
 800be46:	4798      	blx	r3
 800be48:	6923      	ldr	r3, [r4, #16]
 800be4a:	3b01      	subs	r3, #1
 800be4c:	6123      	str	r3, [r4, #16]
 800be4e:	e7f1      	b.n	800be34 <_scanf_float+0x2fc>
 800be50:	46aa      	mov	sl, r5
 800be52:	9602      	str	r6, [sp, #8]
 800be54:	e7df      	b.n	800be16 <_scanf_float+0x2de>
 800be56:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800be5a:	6923      	ldr	r3, [r4, #16]
 800be5c:	2965      	cmp	r1, #101	; 0x65
 800be5e:	f103 33ff 	add.w	r3, r3, #4294967295
 800be62:	f106 35ff 	add.w	r5, r6, #4294967295
 800be66:	6123      	str	r3, [r4, #16]
 800be68:	d00c      	beq.n	800be84 <_scanf_float+0x34c>
 800be6a:	2945      	cmp	r1, #69	; 0x45
 800be6c:	d00a      	beq.n	800be84 <_scanf_float+0x34c>
 800be6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800be72:	463a      	mov	r2, r7
 800be74:	4640      	mov	r0, r8
 800be76:	4798      	blx	r3
 800be78:	6923      	ldr	r3, [r4, #16]
 800be7a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800be7e:	3b01      	subs	r3, #1
 800be80:	1eb5      	subs	r5, r6, #2
 800be82:	6123      	str	r3, [r4, #16]
 800be84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800be88:	463a      	mov	r2, r7
 800be8a:	4640      	mov	r0, r8
 800be8c:	4798      	blx	r3
 800be8e:	462e      	mov	r6, r5
 800be90:	6825      	ldr	r5, [r4, #0]
 800be92:	f015 0510 	ands.w	r5, r5, #16
 800be96:	d158      	bne.n	800bf4a <_scanf_float+0x412>
 800be98:	7035      	strb	r5, [r6, #0]
 800be9a:	6823      	ldr	r3, [r4, #0]
 800be9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bea4:	d11c      	bne.n	800bee0 <_scanf_float+0x3a8>
 800bea6:	9b01      	ldr	r3, [sp, #4]
 800bea8:	454b      	cmp	r3, r9
 800beaa:	eba3 0209 	sub.w	r2, r3, r9
 800beae:	d124      	bne.n	800befa <_scanf_float+0x3c2>
 800beb0:	2200      	movs	r2, #0
 800beb2:	4659      	mov	r1, fp
 800beb4:	4640      	mov	r0, r8
 800beb6:	f002 fc3f 	bl	800e738 <_strtod_r>
 800beba:	9b03      	ldr	r3, [sp, #12]
 800bebc:	6821      	ldr	r1, [r4, #0]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f011 0f02 	tst.w	r1, #2
 800bec4:	ec57 6b10 	vmov	r6, r7, d0
 800bec8:	f103 0204 	add.w	r2, r3, #4
 800becc:	d020      	beq.n	800bf10 <_scanf_float+0x3d8>
 800bece:	9903      	ldr	r1, [sp, #12]
 800bed0:	600a      	str	r2, [r1, #0]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	e9c3 6700 	strd	r6, r7, [r3]
 800bed8:	68e3      	ldr	r3, [r4, #12]
 800beda:	3301      	adds	r3, #1
 800bedc:	60e3      	str	r3, [r4, #12]
 800bede:	e66c      	b.n	800bbba <_scanf_float+0x82>
 800bee0:	9b04      	ldr	r3, [sp, #16]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d0e4      	beq.n	800beb0 <_scanf_float+0x378>
 800bee6:	9905      	ldr	r1, [sp, #20]
 800bee8:	230a      	movs	r3, #10
 800beea:	462a      	mov	r2, r5
 800beec:	3101      	adds	r1, #1
 800beee:	4640      	mov	r0, r8
 800bef0:	f002 fcaa 	bl	800e848 <_strtol_r>
 800bef4:	9b04      	ldr	r3, [sp, #16]
 800bef6:	9e05      	ldr	r6, [sp, #20]
 800bef8:	1ac2      	subs	r2, r0, r3
 800befa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800befe:	429e      	cmp	r6, r3
 800bf00:	bf28      	it	cs
 800bf02:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800bf06:	4912      	ldr	r1, [pc, #72]	; (800bf50 <_scanf_float+0x418>)
 800bf08:	4630      	mov	r0, r6
 800bf0a:	f000 f8e7 	bl	800c0dc <siprintf>
 800bf0e:	e7cf      	b.n	800beb0 <_scanf_float+0x378>
 800bf10:	f011 0f04 	tst.w	r1, #4
 800bf14:	9903      	ldr	r1, [sp, #12]
 800bf16:	600a      	str	r2, [r1, #0]
 800bf18:	d1db      	bne.n	800bed2 <_scanf_float+0x39a>
 800bf1a:	f8d3 8000 	ldr.w	r8, [r3]
 800bf1e:	ee10 2a10 	vmov	r2, s0
 800bf22:	ee10 0a10 	vmov	r0, s0
 800bf26:	463b      	mov	r3, r7
 800bf28:	4639      	mov	r1, r7
 800bf2a:	f7f4 fdff 	bl	8000b2c <__aeabi_dcmpun>
 800bf2e:	b128      	cbz	r0, 800bf3c <_scanf_float+0x404>
 800bf30:	4808      	ldr	r0, [pc, #32]	; (800bf54 <_scanf_float+0x41c>)
 800bf32:	f000 f9c5 	bl	800c2c0 <nanf>
 800bf36:	ed88 0a00 	vstr	s0, [r8]
 800bf3a:	e7cd      	b.n	800bed8 <_scanf_float+0x3a0>
 800bf3c:	4630      	mov	r0, r6
 800bf3e:	4639      	mov	r1, r7
 800bf40:	f7f4 fe52 	bl	8000be8 <__aeabi_d2f>
 800bf44:	f8c8 0000 	str.w	r0, [r8]
 800bf48:	e7c6      	b.n	800bed8 <_scanf_float+0x3a0>
 800bf4a:	2500      	movs	r5, #0
 800bf4c:	e635      	b.n	800bbba <_scanf_float+0x82>
 800bf4e:	bf00      	nop
 800bf50:	08011145 	.word	0x08011145
 800bf54:	080113d4 	.word	0x080113d4

0800bf58 <std>:
 800bf58:	2300      	movs	r3, #0
 800bf5a:	b510      	push	{r4, lr}
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	e9c0 3300 	strd	r3, r3, [r0]
 800bf62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf66:	6083      	str	r3, [r0, #8]
 800bf68:	8181      	strh	r1, [r0, #12]
 800bf6a:	6643      	str	r3, [r0, #100]	; 0x64
 800bf6c:	81c2      	strh	r2, [r0, #14]
 800bf6e:	6183      	str	r3, [r0, #24]
 800bf70:	4619      	mov	r1, r3
 800bf72:	2208      	movs	r2, #8
 800bf74:	305c      	adds	r0, #92	; 0x5c
 800bf76:	f000 f914 	bl	800c1a2 <memset>
 800bf7a:	4b0d      	ldr	r3, [pc, #52]	; (800bfb0 <std+0x58>)
 800bf7c:	6263      	str	r3, [r4, #36]	; 0x24
 800bf7e:	4b0d      	ldr	r3, [pc, #52]	; (800bfb4 <std+0x5c>)
 800bf80:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf82:	4b0d      	ldr	r3, [pc, #52]	; (800bfb8 <std+0x60>)
 800bf84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf86:	4b0d      	ldr	r3, [pc, #52]	; (800bfbc <std+0x64>)
 800bf88:	6323      	str	r3, [r4, #48]	; 0x30
 800bf8a:	4b0d      	ldr	r3, [pc, #52]	; (800bfc0 <std+0x68>)
 800bf8c:	6224      	str	r4, [r4, #32]
 800bf8e:	429c      	cmp	r4, r3
 800bf90:	d006      	beq.n	800bfa0 <std+0x48>
 800bf92:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bf96:	4294      	cmp	r4, r2
 800bf98:	d002      	beq.n	800bfa0 <std+0x48>
 800bf9a:	33d0      	adds	r3, #208	; 0xd0
 800bf9c:	429c      	cmp	r4, r3
 800bf9e:	d105      	bne.n	800bfac <std+0x54>
 800bfa0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bfa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfa8:	f000 b978 	b.w	800c29c <__retarget_lock_init_recursive>
 800bfac:	bd10      	pop	{r4, pc}
 800bfae:	bf00      	nop
 800bfb0:	0800c11d 	.word	0x0800c11d
 800bfb4:	0800c13f 	.word	0x0800c13f
 800bfb8:	0800c177 	.word	0x0800c177
 800bfbc:	0800c19b 	.word	0x0800c19b
 800bfc0:	200059e8 	.word	0x200059e8

0800bfc4 <stdio_exit_handler>:
 800bfc4:	4a02      	ldr	r2, [pc, #8]	; (800bfd0 <stdio_exit_handler+0xc>)
 800bfc6:	4903      	ldr	r1, [pc, #12]	; (800bfd4 <stdio_exit_handler+0x10>)
 800bfc8:	4803      	ldr	r0, [pc, #12]	; (800bfd8 <stdio_exit_handler+0x14>)
 800bfca:	f000 b869 	b.w	800c0a0 <_fwalk_sglue>
 800bfce:	bf00      	nop
 800bfd0:	200000c8 	.word	0x200000c8
 800bfd4:	0800ec09 	.word	0x0800ec09
 800bfd8:	200000d4 	.word	0x200000d4

0800bfdc <cleanup_stdio>:
 800bfdc:	6841      	ldr	r1, [r0, #4]
 800bfde:	4b0c      	ldr	r3, [pc, #48]	; (800c010 <cleanup_stdio+0x34>)
 800bfe0:	4299      	cmp	r1, r3
 800bfe2:	b510      	push	{r4, lr}
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	d001      	beq.n	800bfec <cleanup_stdio+0x10>
 800bfe8:	f002 fe0e 	bl	800ec08 <_fflush_r>
 800bfec:	68a1      	ldr	r1, [r4, #8]
 800bfee:	4b09      	ldr	r3, [pc, #36]	; (800c014 <cleanup_stdio+0x38>)
 800bff0:	4299      	cmp	r1, r3
 800bff2:	d002      	beq.n	800bffa <cleanup_stdio+0x1e>
 800bff4:	4620      	mov	r0, r4
 800bff6:	f002 fe07 	bl	800ec08 <_fflush_r>
 800bffa:	68e1      	ldr	r1, [r4, #12]
 800bffc:	4b06      	ldr	r3, [pc, #24]	; (800c018 <cleanup_stdio+0x3c>)
 800bffe:	4299      	cmp	r1, r3
 800c000:	d004      	beq.n	800c00c <cleanup_stdio+0x30>
 800c002:	4620      	mov	r0, r4
 800c004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c008:	f002 bdfe 	b.w	800ec08 <_fflush_r>
 800c00c:	bd10      	pop	{r4, pc}
 800c00e:	bf00      	nop
 800c010:	200059e8 	.word	0x200059e8
 800c014:	20005a50 	.word	0x20005a50
 800c018:	20005ab8 	.word	0x20005ab8

0800c01c <global_stdio_init.part.0>:
 800c01c:	b510      	push	{r4, lr}
 800c01e:	4b0b      	ldr	r3, [pc, #44]	; (800c04c <global_stdio_init.part.0+0x30>)
 800c020:	4c0b      	ldr	r4, [pc, #44]	; (800c050 <global_stdio_init.part.0+0x34>)
 800c022:	4a0c      	ldr	r2, [pc, #48]	; (800c054 <global_stdio_init.part.0+0x38>)
 800c024:	601a      	str	r2, [r3, #0]
 800c026:	4620      	mov	r0, r4
 800c028:	2200      	movs	r2, #0
 800c02a:	2104      	movs	r1, #4
 800c02c:	f7ff ff94 	bl	800bf58 <std>
 800c030:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c034:	2201      	movs	r2, #1
 800c036:	2109      	movs	r1, #9
 800c038:	f7ff ff8e 	bl	800bf58 <std>
 800c03c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c040:	2202      	movs	r2, #2
 800c042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c046:	2112      	movs	r1, #18
 800c048:	f7ff bf86 	b.w	800bf58 <std>
 800c04c:	20005b20 	.word	0x20005b20
 800c050:	200059e8 	.word	0x200059e8
 800c054:	0800bfc5 	.word	0x0800bfc5

0800c058 <__sfp_lock_acquire>:
 800c058:	4801      	ldr	r0, [pc, #4]	; (800c060 <__sfp_lock_acquire+0x8>)
 800c05a:	f000 b920 	b.w	800c29e <__retarget_lock_acquire_recursive>
 800c05e:	bf00      	nop
 800c060:	20005b29 	.word	0x20005b29

0800c064 <__sfp_lock_release>:
 800c064:	4801      	ldr	r0, [pc, #4]	; (800c06c <__sfp_lock_release+0x8>)
 800c066:	f000 b91b 	b.w	800c2a0 <__retarget_lock_release_recursive>
 800c06a:	bf00      	nop
 800c06c:	20005b29 	.word	0x20005b29

0800c070 <__sinit>:
 800c070:	b510      	push	{r4, lr}
 800c072:	4604      	mov	r4, r0
 800c074:	f7ff fff0 	bl	800c058 <__sfp_lock_acquire>
 800c078:	6a23      	ldr	r3, [r4, #32]
 800c07a:	b11b      	cbz	r3, 800c084 <__sinit+0x14>
 800c07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c080:	f7ff bff0 	b.w	800c064 <__sfp_lock_release>
 800c084:	4b04      	ldr	r3, [pc, #16]	; (800c098 <__sinit+0x28>)
 800c086:	6223      	str	r3, [r4, #32]
 800c088:	4b04      	ldr	r3, [pc, #16]	; (800c09c <__sinit+0x2c>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d1f5      	bne.n	800c07c <__sinit+0xc>
 800c090:	f7ff ffc4 	bl	800c01c <global_stdio_init.part.0>
 800c094:	e7f2      	b.n	800c07c <__sinit+0xc>
 800c096:	bf00      	nop
 800c098:	0800bfdd 	.word	0x0800bfdd
 800c09c:	20005b20 	.word	0x20005b20

0800c0a0 <_fwalk_sglue>:
 800c0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0a4:	4607      	mov	r7, r0
 800c0a6:	4688      	mov	r8, r1
 800c0a8:	4614      	mov	r4, r2
 800c0aa:	2600      	movs	r6, #0
 800c0ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0b0:	f1b9 0901 	subs.w	r9, r9, #1
 800c0b4:	d505      	bpl.n	800c0c2 <_fwalk_sglue+0x22>
 800c0b6:	6824      	ldr	r4, [r4, #0]
 800c0b8:	2c00      	cmp	r4, #0
 800c0ba:	d1f7      	bne.n	800c0ac <_fwalk_sglue+0xc>
 800c0bc:	4630      	mov	r0, r6
 800c0be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0c2:	89ab      	ldrh	r3, [r5, #12]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d907      	bls.n	800c0d8 <_fwalk_sglue+0x38>
 800c0c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	d003      	beq.n	800c0d8 <_fwalk_sglue+0x38>
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	4638      	mov	r0, r7
 800c0d4:	47c0      	blx	r8
 800c0d6:	4306      	orrs	r6, r0
 800c0d8:	3568      	adds	r5, #104	; 0x68
 800c0da:	e7e9      	b.n	800c0b0 <_fwalk_sglue+0x10>

0800c0dc <siprintf>:
 800c0dc:	b40e      	push	{r1, r2, r3}
 800c0de:	b500      	push	{lr}
 800c0e0:	b09c      	sub	sp, #112	; 0x70
 800c0e2:	ab1d      	add	r3, sp, #116	; 0x74
 800c0e4:	9002      	str	r0, [sp, #8]
 800c0e6:	9006      	str	r0, [sp, #24]
 800c0e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c0ec:	4809      	ldr	r0, [pc, #36]	; (800c114 <siprintf+0x38>)
 800c0ee:	9107      	str	r1, [sp, #28]
 800c0f0:	9104      	str	r1, [sp, #16]
 800c0f2:	4909      	ldr	r1, [pc, #36]	; (800c118 <siprintf+0x3c>)
 800c0f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0f8:	9105      	str	r1, [sp, #20]
 800c0fa:	6800      	ldr	r0, [r0, #0]
 800c0fc:	9301      	str	r3, [sp, #4]
 800c0fe:	a902      	add	r1, sp, #8
 800c100:	f002 fbfe 	bl	800e900 <_svfiprintf_r>
 800c104:	9b02      	ldr	r3, [sp, #8]
 800c106:	2200      	movs	r2, #0
 800c108:	701a      	strb	r2, [r3, #0]
 800c10a:	b01c      	add	sp, #112	; 0x70
 800c10c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c110:	b003      	add	sp, #12
 800c112:	4770      	bx	lr
 800c114:	20000120 	.word	0x20000120
 800c118:	ffff0208 	.word	0xffff0208

0800c11c <__sread>:
 800c11c:	b510      	push	{r4, lr}
 800c11e:	460c      	mov	r4, r1
 800c120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c124:	f000 f86c 	bl	800c200 <_read_r>
 800c128:	2800      	cmp	r0, #0
 800c12a:	bfab      	itete	ge
 800c12c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c12e:	89a3      	ldrhlt	r3, [r4, #12]
 800c130:	181b      	addge	r3, r3, r0
 800c132:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c136:	bfac      	ite	ge
 800c138:	6563      	strge	r3, [r4, #84]	; 0x54
 800c13a:	81a3      	strhlt	r3, [r4, #12]
 800c13c:	bd10      	pop	{r4, pc}

0800c13e <__swrite>:
 800c13e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c142:	461f      	mov	r7, r3
 800c144:	898b      	ldrh	r3, [r1, #12]
 800c146:	05db      	lsls	r3, r3, #23
 800c148:	4605      	mov	r5, r0
 800c14a:	460c      	mov	r4, r1
 800c14c:	4616      	mov	r6, r2
 800c14e:	d505      	bpl.n	800c15c <__swrite+0x1e>
 800c150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c154:	2302      	movs	r3, #2
 800c156:	2200      	movs	r2, #0
 800c158:	f000 f840 	bl	800c1dc <_lseek_r>
 800c15c:	89a3      	ldrh	r3, [r4, #12]
 800c15e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c162:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c166:	81a3      	strh	r3, [r4, #12]
 800c168:	4632      	mov	r2, r6
 800c16a:	463b      	mov	r3, r7
 800c16c:	4628      	mov	r0, r5
 800c16e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c172:	f000 b857 	b.w	800c224 <_write_r>

0800c176 <__sseek>:
 800c176:	b510      	push	{r4, lr}
 800c178:	460c      	mov	r4, r1
 800c17a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c17e:	f000 f82d 	bl	800c1dc <_lseek_r>
 800c182:	1c43      	adds	r3, r0, #1
 800c184:	89a3      	ldrh	r3, [r4, #12]
 800c186:	bf15      	itete	ne
 800c188:	6560      	strne	r0, [r4, #84]	; 0x54
 800c18a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c18e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c192:	81a3      	strheq	r3, [r4, #12]
 800c194:	bf18      	it	ne
 800c196:	81a3      	strhne	r3, [r4, #12]
 800c198:	bd10      	pop	{r4, pc}

0800c19a <__sclose>:
 800c19a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c19e:	f000 b80d 	b.w	800c1bc <_close_r>

0800c1a2 <memset>:
 800c1a2:	4402      	add	r2, r0
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d100      	bne.n	800c1ac <memset+0xa>
 800c1aa:	4770      	bx	lr
 800c1ac:	f803 1b01 	strb.w	r1, [r3], #1
 800c1b0:	e7f9      	b.n	800c1a6 <memset+0x4>
	...

0800c1b4 <_localeconv_r>:
 800c1b4:	4800      	ldr	r0, [pc, #0]	; (800c1b8 <_localeconv_r+0x4>)
 800c1b6:	4770      	bx	lr
 800c1b8:	20000214 	.word	0x20000214

0800c1bc <_close_r>:
 800c1bc:	b538      	push	{r3, r4, r5, lr}
 800c1be:	4d06      	ldr	r5, [pc, #24]	; (800c1d8 <_close_r+0x1c>)
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	4604      	mov	r4, r0
 800c1c4:	4608      	mov	r0, r1
 800c1c6:	602b      	str	r3, [r5, #0]
 800c1c8:	f7f7 fcc5 	bl	8003b56 <_close>
 800c1cc:	1c43      	adds	r3, r0, #1
 800c1ce:	d102      	bne.n	800c1d6 <_close_r+0x1a>
 800c1d0:	682b      	ldr	r3, [r5, #0]
 800c1d2:	b103      	cbz	r3, 800c1d6 <_close_r+0x1a>
 800c1d4:	6023      	str	r3, [r4, #0]
 800c1d6:	bd38      	pop	{r3, r4, r5, pc}
 800c1d8:	20005b24 	.word	0x20005b24

0800c1dc <_lseek_r>:
 800c1dc:	b538      	push	{r3, r4, r5, lr}
 800c1de:	4d07      	ldr	r5, [pc, #28]	; (800c1fc <_lseek_r+0x20>)
 800c1e0:	4604      	mov	r4, r0
 800c1e2:	4608      	mov	r0, r1
 800c1e4:	4611      	mov	r1, r2
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	602a      	str	r2, [r5, #0]
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	f7f7 fcda 	bl	8003ba4 <_lseek>
 800c1f0:	1c43      	adds	r3, r0, #1
 800c1f2:	d102      	bne.n	800c1fa <_lseek_r+0x1e>
 800c1f4:	682b      	ldr	r3, [r5, #0]
 800c1f6:	b103      	cbz	r3, 800c1fa <_lseek_r+0x1e>
 800c1f8:	6023      	str	r3, [r4, #0]
 800c1fa:	bd38      	pop	{r3, r4, r5, pc}
 800c1fc:	20005b24 	.word	0x20005b24

0800c200 <_read_r>:
 800c200:	b538      	push	{r3, r4, r5, lr}
 800c202:	4d07      	ldr	r5, [pc, #28]	; (800c220 <_read_r+0x20>)
 800c204:	4604      	mov	r4, r0
 800c206:	4608      	mov	r0, r1
 800c208:	4611      	mov	r1, r2
 800c20a:	2200      	movs	r2, #0
 800c20c:	602a      	str	r2, [r5, #0]
 800c20e:	461a      	mov	r2, r3
 800c210:	f7f7 fc68 	bl	8003ae4 <_read>
 800c214:	1c43      	adds	r3, r0, #1
 800c216:	d102      	bne.n	800c21e <_read_r+0x1e>
 800c218:	682b      	ldr	r3, [r5, #0]
 800c21a:	b103      	cbz	r3, 800c21e <_read_r+0x1e>
 800c21c:	6023      	str	r3, [r4, #0]
 800c21e:	bd38      	pop	{r3, r4, r5, pc}
 800c220:	20005b24 	.word	0x20005b24

0800c224 <_write_r>:
 800c224:	b538      	push	{r3, r4, r5, lr}
 800c226:	4d07      	ldr	r5, [pc, #28]	; (800c244 <_write_r+0x20>)
 800c228:	4604      	mov	r4, r0
 800c22a:	4608      	mov	r0, r1
 800c22c:	4611      	mov	r1, r2
 800c22e:	2200      	movs	r2, #0
 800c230:	602a      	str	r2, [r5, #0]
 800c232:	461a      	mov	r2, r3
 800c234:	f7f7 fc73 	bl	8003b1e <_write>
 800c238:	1c43      	adds	r3, r0, #1
 800c23a:	d102      	bne.n	800c242 <_write_r+0x1e>
 800c23c:	682b      	ldr	r3, [r5, #0]
 800c23e:	b103      	cbz	r3, 800c242 <_write_r+0x1e>
 800c240:	6023      	str	r3, [r4, #0]
 800c242:	bd38      	pop	{r3, r4, r5, pc}
 800c244:	20005b24 	.word	0x20005b24

0800c248 <__errno>:
 800c248:	4b01      	ldr	r3, [pc, #4]	; (800c250 <__errno+0x8>)
 800c24a:	6818      	ldr	r0, [r3, #0]
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	20000120 	.word	0x20000120

0800c254 <__libc_init_array>:
 800c254:	b570      	push	{r4, r5, r6, lr}
 800c256:	4d0d      	ldr	r5, [pc, #52]	; (800c28c <__libc_init_array+0x38>)
 800c258:	4c0d      	ldr	r4, [pc, #52]	; (800c290 <__libc_init_array+0x3c>)
 800c25a:	1b64      	subs	r4, r4, r5
 800c25c:	10a4      	asrs	r4, r4, #2
 800c25e:	2600      	movs	r6, #0
 800c260:	42a6      	cmp	r6, r4
 800c262:	d109      	bne.n	800c278 <__libc_init_array+0x24>
 800c264:	4d0b      	ldr	r5, [pc, #44]	; (800c294 <__libc_init_array+0x40>)
 800c266:	4c0c      	ldr	r4, [pc, #48]	; (800c298 <__libc_init_array+0x44>)
 800c268:	f004 fe0e 	bl	8010e88 <_init>
 800c26c:	1b64      	subs	r4, r4, r5
 800c26e:	10a4      	asrs	r4, r4, #2
 800c270:	2600      	movs	r6, #0
 800c272:	42a6      	cmp	r6, r4
 800c274:	d105      	bne.n	800c282 <__libc_init_array+0x2e>
 800c276:	bd70      	pop	{r4, r5, r6, pc}
 800c278:	f855 3b04 	ldr.w	r3, [r5], #4
 800c27c:	4798      	blx	r3
 800c27e:	3601      	adds	r6, #1
 800c280:	e7ee      	b.n	800c260 <__libc_init_array+0xc>
 800c282:	f855 3b04 	ldr.w	r3, [r5], #4
 800c286:	4798      	blx	r3
 800c288:	3601      	adds	r6, #1
 800c28a:	e7f2      	b.n	800c272 <__libc_init_array+0x1e>
 800c28c:	08011658 	.word	0x08011658
 800c290:	08011658 	.word	0x08011658
 800c294:	08011658 	.word	0x08011658
 800c298:	0801165c 	.word	0x0801165c

0800c29c <__retarget_lock_init_recursive>:
 800c29c:	4770      	bx	lr

0800c29e <__retarget_lock_acquire_recursive>:
 800c29e:	4770      	bx	lr

0800c2a0 <__retarget_lock_release_recursive>:
 800c2a0:	4770      	bx	lr

0800c2a2 <memcpy>:
 800c2a2:	440a      	add	r2, r1
 800c2a4:	4291      	cmp	r1, r2
 800c2a6:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2aa:	d100      	bne.n	800c2ae <memcpy+0xc>
 800c2ac:	4770      	bx	lr
 800c2ae:	b510      	push	{r4, lr}
 800c2b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2b8:	4291      	cmp	r1, r2
 800c2ba:	d1f9      	bne.n	800c2b0 <memcpy+0xe>
 800c2bc:	bd10      	pop	{r4, pc}
	...

0800c2c0 <nanf>:
 800c2c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c2c8 <nanf+0x8>
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
 800c2c8:	7fc00000 	.word	0x7fc00000

0800c2cc <quorem>:
 800c2cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d0:	6903      	ldr	r3, [r0, #16]
 800c2d2:	690c      	ldr	r4, [r1, #16]
 800c2d4:	42a3      	cmp	r3, r4
 800c2d6:	4607      	mov	r7, r0
 800c2d8:	db7e      	blt.n	800c3d8 <quorem+0x10c>
 800c2da:	3c01      	subs	r4, #1
 800c2dc:	f101 0814 	add.w	r8, r1, #20
 800c2e0:	f100 0514 	add.w	r5, r0, #20
 800c2e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2e8:	9301      	str	r3, [sp, #4]
 800c2ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c2ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c2fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c2fe:	fbb2 f6f3 	udiv	r6, r2, r3
 800c302:	d331      	bcc.n	800c368 <quorem+0x9c>
 800c304:	f04f 0e00 	mov.w	lr, #0
 800c308:	4640      	mov	r0, r8
 800c30a:	46ac      	mov	ip, r5
 800c30c:	46f2      	mov	sl, lr
 800c30e:	f850 2b04 	ldr.w	r2, [r0], #4
 800c312:	b293      	uxth	r3, r2
 800c314:	fb06 e303 	mla	r3, r6, r3, lr
 800c318:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c31c:	0c1a      	lsrs	r2, r3, #16
 800c31e:	b29b      	uxth	r3, r3
 800c320:	ebaa 0303 	sub.w	r3, sl, r3
 800c324:	f8dc a000 	ldr.w	sl, [ip]
 800c328:	fa13 f38a 	uxtah	r3, r3, sl
 800c32c:	fb06 220e 	mla	r2, r6, lr, r2
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	9b00      	ldr	r3, [sp, #0]
 800c334:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c338:	b292      	uxth	r2, r2
 800c33a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c33e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c342:	f8bd 3000 	ldrh.w	r3, [sp]
 800c346:	4581      	cmp	r9, r0
 800c348:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c34c:	f84c 3b04 	str.w	r3, [ip], #4
 800c350:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c354:	d2db      	bcs.n	800c30e <quorem+0x42>
 800c356:	f855 300b 	ldr.w	r3, [r5, fp]
 800c35a:	b92b      	cbnz	r3, 800c368 <quorem+0x9c>
 800c35c:	9b01      	ldr	r3, [sp, #4]
 800c35e:	3b04      	subs	r3, #4
 800c360:	429d      	cmp	r5, r3
 800c362:	461a      	mov	r2, r3
 800c364:	d32c      	bcc.n	800c3c0 <quorem+0xf4>
 800c366:	613c      	str	r4, [r7, #16]
 800c368:	4638      	mov	r0, r7
 800c36a:	f001 f9f1 	bl	800d750 <__mcmp>
 800c36e:	2800      	cmp	r0, #0
 800c370:	db22      	blt.n	800c3b8 <quorem+0xec>
 800c372:	3601      	adds	r6, #1
 800c374:	4629      	mov	r1, r5
 800c376:	2000      	movs	r0, #0
 800c378:	f858 2b04 	ldr.w	r2, [r8], #4
 800c37c:	f8d1 c000 	ldr.w	ip, [r1]
 800c380:	b293      	uxth	r3, r2
 800c382:	1ac3      	subs	r3, r0, r3
 800c384:	0c12      	lsrs	r2, r2, #16
 800c386:	fa13 f38c 	uxtah	r3, r3, ip
 800c38a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c38e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c392:	b29b      	uxth	r3, r3
 800c394:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c398:	45c1      	cmp	r9, r8
 800c39a:	f841 3b04 	str.w	r3, [r1], #4
 800c39e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c3a2:	d2e9      	bcs.n	800c378 <quorem+0xac>
 800c3a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c3a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3ac:	b922      	cbnz	r2, 800c3b8 <quorem+0xec>
 800c3ae:	3b04      	subs	r3, #4
 800c3b0:	429d      	cmp	r5, r3
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	d30a      	bcc.n	800c3cc <quorem+0x100>
 800c3b6:	613c      	str	r4, [r7, #16]
 800c3b8:	4630      	mov	r0, r6
 800c3ba:	b003      	add	sp, #12
 800c3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3c0:	6812      	ldr	r2, [r2, #0]
 800c3c2:	3b04      	subs	r3, #4
 800c3c4:	2a00      	cmp	r2, #0
 800c3c6:	d1ce      	bne.n	800c366 <quorem+0x9a>
 800c3c8:	3c01      	subs	r4, #1
 800c3ca:	e7c9      	b.n	800c360 <quorem+0x94>
 800c3cc:	6812      	ldr	r2, [r2, #0]
 800c3ce:	3b04      	subs	r3, #4
 800c3d0:	2a00      	cmp	r2, #0
 800c3d2:	d1f0      	bne.n	800c3b6 <quorem+0xea>
 800c3d4:	3c01      	subs	r4, #1
 800c3d6:	e7eb      	b.n	800c3b0 <quorem+0xe4>
 800c3d8:	2000      	movs	r0, #0
 800c3da:	e7ee      	b.n	800c3ba <quorem+0xee>
 800c3dc:	0000      	movs	r0, r0
	...

0800c3e0 <_dtoa_r>:
 800c3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e4:	ed2d 8b04 	vpush	{d8-d9}
 800c3e8:	69c5      	ldr	r5, [r0, #28]
 800c3ea:	b093      	sub	sp, #76	; 0x4c
 800c3ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c3f0:	ec57 6b10 	vmov	r6, r7, d0
 800c3f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c3f8:	9107      	str	r1, [sp, #28]
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	920a      	str	r2, [sp, #40]	; 0x28
 800c3fe:	930d      	str	r3, [sp, #52]	; 0x34
 800c400:	b975      	cbnz	r5, 800c420 <_dtoa_r+0x40>
 800c402:	2010      	movs	r0, #16
 800c404:	f000 fe2a 	bl	800d05c <malloc>
 800c408:	4602      	mov	r2, r0
 800c40a:	61e0      	str	r0, [r4, #28]
 800c40c:	b920      	cbnz	r0, 800c418 <_dtoa_r+0x38>
 800c40e:	4bae      	ldr	r3, [pc, #696]	; (800c6c8 <_dtoa_r+0x2e8>)
 800c410:	21ef      	movs	r1, #239	; 0xef
 800c412:	48ae      	ldr	r0, [pc, #696]	; (800c6cc <_dtoa_r+0x2ec>)
 800c414:	f002 fc64 	bl	800ece0 <__assert_func>
 800c418:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c41c:	6005      	str	r5, [r0, #0]
 800c41e:	60c5      	str	r5, [r0, #12]
 800c420:	69e3      	ldr	r3, [r4, #28]
 800c422:	6819      	ldr	r1, [r3, #0]
 800c424:	b151      	cbz	r1, 800c43c <_dtoa_r+0x5c>
 800c426:	685a      	ldr	r2, [r3, #4]
 800c428:	604a      	str	r2, [r1, #4]
 800c42a:	2301      	movs	r3, #1
 800c42c:	4093      	lsls	r3, r2
 800c42e:	608b      	str	r3, [r1, #8]
 800c430:	4620      	mov	r0, r4
 800c432:	f000 ff07 	bl	800d244 <_Bfree>
 800c436:	69e3      	ldr	r3, [r4, #28]
 800c438:	2200      	movs	r2, #0
 800c43a:	601a      	str	r2, [r3, #0]
 800c43c:	1e3b      	subs	r3, r7, #0
 800c43e:	bfbb      	ittet	lt
 800c440:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c444:	9303      	strlt	r3, [sp, #12]
 800c446:	2300      	movge	r3, #0
 800c448:	2201      	movlt	r2, #1
 800c44a:	bfac      	ite	ge
 800c44c:	f8c8 3000 	strge.w	r3, [r8]
 800c450:	f8c8 2000 	strlt.w	r2, [r8]
 800c454:	4b9e      	ldr	r3, [pc, #632]	; (800c6d0 <_dtoa_r+0x2f0>)
 800c456:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c45a:	ea33 0308 	bics.w	r3, r3, r8
 800c45e:	d11b      	bne.n	800c498 <_dtoa_r+0xb8>
 800c460:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c462:	f242 730f 	movw	r3, #9999	; 0x270f
 800c466:	6013      	str	r3, [r2, #0]
 800c468:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c46c:	4333      	orrs	r3, r6
 800c46e:	f000 8593 	beq.w	800cf98 <_dtoa_r+0xbb8>
 800c472:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c474:	b963      	cbnz	r3, 800c490 <_dtoa_r+0xb0>
 800c476:	4b97      	ldr	r3, [pc, #604]	; (800c6d4 <_dtoa_r+0x2f4>)
 800c478:	e027      	b.n	800c4ca <_dtoa_r+0xea>
 800c47a:	4b97      	ldr	r3, [pc, #604]	; (800c6d8 <_dtoa_r+0x2f8>)
 800c47c:	9300      	str	r3, [sp, #0]
 800c47e:	3308      	adds	r3, #8
 800c480:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c482:	6013      	str	r3, [r2, #0]
 800c484:	9800      	ldr	r0, [sp, #0]
 800c486:	b013      	add	sp, #76	; 0x4c
 800c488:	ecbd 8b04 	vpop	{d8-d9}
 800c48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c490:	4b90      	ldr	r3, [pc, #576]	; (800c6d4 <_dtoa_r+0x2f4>)
 800c492:	9300      	str	r3, [sp, #0]
 800c494:	3303      	adds	r3, #3
 800c496:	e7f3      	b.n	800c480 <_dtoa_r+0xa0>
 800c498:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c49c:	2200      	movs	r2, #0
 800c49e:	ec51 0b17 	vmov	r0, r1, d7
 800c4a2:	eeb0 8a47 	vmov.f32	s16, s14
 800c4a6:	eef0 8a67 	vmov.f32	s17, s15
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	f7f4 fb0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4b0:	4681      	mov	r9, r0
 800c4b2:	b160      	cbz	r0, 800c4ce <_dtoa_r+0xee>
 800c4b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	6013      	str	r3, [r2, #0]
 800c4ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f000 8568 	beq.w	800cf92 <_dtoa_r+0xbb2>
 800c4c2:	4b86      	ldr	r3, [pc, #536]	; (800c6dc <_dtoa_r+0x2fc>)
 800c4c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c4c6:	6013      	str	r3, [r2, #0]
 800c4c8:	3b01      	subs	r3, #1
 800c4ca:	9300      	str	r3, [sp, #0]
 800c4cc:	e7da      	b.n	800c484 <_dtoa_r+0xa4>
 800c4ce:	aa10      	add	r2, sp, #64	; 0x40
 800c4d0:	a911      	add	r1, sp, #68	; 0x44
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	eeb0 0a48 	vmov.f32	s0, s16
 800c4d8:	eef0 0a68 	vmov.f32	s1, s17
 800c4dc:	f001 fa4e 	bl	800d97c <__d2b>
 800c4e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c4e4:	4682      	mov	sl, r0
 800c4e6:	2d00      	cmp	r5, #0
 800c4e8:	d07f      	beq.n	800c5ea <_dtoa_r+0x20a>
 800c4ea:	ee18 3a90 	vmov	r3, s17
 800c4ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c4f6:	ec51 0b18 	vmov	r0, r1, d8
 800c4fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c4fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c502:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c506:	4619      	mov	r1, r3
 800c508:	2200      	movs	r2, #0
 800c50a:	4b75      	ldr	r3, [pc, #468]	; (800c6e0 <_dtoa_r+0x300>)
 800c50c:	f7f3 febc 	bl	8000288 <__aeabi_dsub>
 800c510:	a367      	add	r3, pc, #412	; (adr r3, 800c6b0 <_dtoa_r+0x2d0>)
 800c512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c516:	f7f4 f86f 	bl	80005f8 <__aeabi_dmul>
 800c51a:	a367      	add	r3, pc, #412	; (adr r3, 800c6b8 <_dtoa_r+0x2d8>)
 800c51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c520:	f7f3 feb4 	bl	800028c <__adddf3>
 800c524:	4606      	mov	r6, r0
 800c526:	4628      	mov	r0, r5
 800c528:	460f      	mov	r7, r1
 800c52a:	f7f3 fffb 	bl	8000524 <__aeabi_i2d>
 800c52e:	a364      	add	r3, pc, #400	; (adr r3, 800c6c0 <_dtoa_r+0x2e0>)
 800c530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c534:	f7f4 f860 	bl	80005f8 <__aeabi_dmul>
 800c538:	4602      	mov	r2, r0
 800c53a:	460b      	mov	r3, r1
 800c53c:	4630      	mov	r0, r6
 800c53e:	4639      	mov	r1, r7
 800c540:	f7f3 fea4 	bl	800028c <__adddf3>
 800c544:	4606      	mov	r6, r0
 800c546:	460f      	mov	r7, r1
 800c548:	f7f4 fb06 	bl	8000b58 <__aeabi_d2iz>
 800c54c:	2200      	movs	r2, #0
 800c54e:	4683      	mov	fp, r0
 800c550:	2300      	movs	r3, #0
 800c552:	4630      	mov	r0, r6
 800c554:	4639      	mov	r1, r7
 800c556:	f7f4 fac1 	bl	8000adc <__aeabi_dcmplt>
 800c55a:	b148      	cbz	r0, 800c570 <_dtoa_r+0x190>
 800c55c:	4658      	mov	r0, fp
 800c55e:	f7f3 ffe1 	bl	8000524 <__aeabi_i2d>
 800c562:	4632      	mov	r2, r6
 800c564:	463b      	mov	r3, r7
 800c566:	f7f4 faaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800c56a:	b908      	cbnz	r0, 800c570 <_dtoa_r+0x190>
 800c56c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c570:	f1bb 0f16 	cmp.w	fp, #22
 800c574:	d857      	bhi.n	800c626 <_dtoa_r+0x246>
 800c576:	4b5b      	ldr	r3, [pc, #364]	; (800c6e4 <_dtoa_r+0x304>)
 800c578:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c580:	ec51 0b18 	vmov	r0, r1, d8
 800c584:	f7f4 faaa 	bl	8000adc <__aeabi_dcmplt>
 800c588:	2800      	cmp	r0, #0
 800c58a:	d04e      	beq.n	800c62a <_dtoa_r+0x24a>
 800c58c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c590:	2300      	movs	r3, #0
 800c592:	930c      	str	r3, [sp, #48]	; 0x30
 800c594:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c596:	1b5b      	subs	r3, r3, r5
 800c598:	1e5a      	subs	r2, r3, #1
 800c59a:	bf45      	ittet	mi
 800c59c:	f1c3 0301 	rsbmi	r3, r3, #1
 800c5a0:	9305      	strmi	r3, [sp, #20]
 800c5a2:	2300      	movpl	r3, #0
 800c5a4:	2300      	movmi	r3, #0
 800c5a6:	9206      	str	r2, [sp, #24]
 800c5a8:	bf54      	ite	pl
 800c5aa:	9305      	strpl	r3, [sp, #20]
 800c5ac:	9306      	strmi	r3, [sp, #24]
 800c5ae:	f1bb 0f00 	cmp.w	fp, #0
 800c5b2:	db3c      	blt.n	800c62e <_dtoa_r+0x24e>
 800c5b4:	9b06      	ldr	r3, [sp, #24]
 800c5b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c5ba:	445b      	add	r3, fp
 800c5bc:	9306      	str	r3, [sp, #24]
 800c5be:	2300      	movs	r3, #0
 800c5c0:	9308      	str	r3, [sp, #32]
 800c5c2:	9b07      	ldr	r3, [sp, #28]
 800c5c4:	2b09      	cmp	r3, #9
 800c5c6:	d868      	bhi.n	800c69a <_dtoa_r+0x2ba>
 800c5c8:	2b05      	cmp	r3, #5
 800c5ca:	bfc4      	itt	gt
 800c5cc:	3b04      	subgt	r3, #4
 800c5ce:	9307      	strgt	r3, [sp, #28]
 800c5d0:	9b07      	ldr	r3, [sp, #28]
 800c5d2:	f1a3 0302 	sub.w	r3, r3, #2
 800c5d6:	bfcc      	ite	gt
 800c5d8:	2500      	movgt	r5, #0
 800c5da:	2501      	movle	r5, #1
 800c5dc:	2b03      	cmp	r3, #3
 800c5de:	f200 8085 	bhi.w	800c6ec <_dtoa_r+0x30c>
 800c5e2:	e8df f003 	tbb	[pc, r3]
 800c5e6:	3b2e      	.short	0x3b2e
 800c5e8:	5839      	.short	0x5839
 800c5ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c5ee:	441d      	add	r5, r3
 800c5f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c5f4:	2b20      	cmp	r3, #32
 800c5f6:	bfc1      	itttt	gt
 800c5f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c5fc:	fa08 f803 	lslgt.w	r8, r8, r3
 800c600:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c604:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c608:	bfd6      	itet	le
 800c60a:	f1c3 0320 	rsble	r3, r3, #32
 800c60e:	ea48 0003 	orrgt.w	r0, r8, r3
 800c612:	fa06 f003 	lslle.w	r0, r6, r3
 800c616:	f7f3 ff75 	bl	8000504 <__aeabi_ui2d>
 800c61a:	2201      	movs	r2, #1
 800c61c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c620:	3d01      	subs	r5, #1
 800c622:	920e      	str	r2, [sp, #56]	; 0x38
 800c624:	e76f      	b.n	800c506 <_dtoa_r+0x126>
 800c626:	2301      	movs	r3, #1
 800c628:	e7b3      	b.n	800c592 <_dtoa_r+0x1b2>
 800c62a:	900c      	str	r0, [sp, #48]	; 0x30
 800c62c:	e7b2      	b.n	800c594 <_dtoa_r+0x1b4>
 800c62e:	9b05      	ldr	r3, [sp, #20]
 800c630:	eba3 030b 	sub.w	r3, r3, fp
 800c634:	9305      	str	r3, [sp, #20]
 800c636:	f1cb 0300 	rsb	r3, fp, #0
 800c63a:	9308      	str	r3, [sp, #32]
 800c63c:	2300      	movs	r3, #0
 800c63e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c640:	e7bf      	b.n	800c5c2 <_dtoa_r+0x1e2>
 800c642:	2300      	movs	r3, #0
 800c644:	9309      	str	r3, [sp, #36]	; 0x24
 800c646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c648:	2b00      	cmp	r3, #0
 800c64a:	dc52      	bgt.n	800c6f2 <_dtoa_r+0x312>
 800c64c:	2301      	movs	r3, #1
 800c64e:	9301      	str	r3, [sp, #4]
 800c650:	9304      	str	r3, [sp, #16]
 800c652:	461a      	mov	r2, r3
 800c654:	920a      	str	r2, [sp, #40]	; 0x28
 800c656:	e00b      	b.n	800c670 <_dtoa_r+0x290>
 800c658:	2301      	movs	r3, #1
 800c65a:	e7f3      	b.n	800c644 <_dtoa_r+0x264>
 800c65c:	2300      	movs	r3, #0
 800c65e:	9309      	str	r3, [sp, #36]	; 0x24
 800c660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c662:	445b      	add	r3, fp
 800c664:	9301      	str	r3, [sp, #4]
 800c666:	3301      	adds	r3, #1
 800c668:	2b01      	cmp	r3, #1
 800c66a:	9304      	str	r3, [sp, #16]
 800c66c:	bfb8      	it	lt
 800c66e:	2301      	movlt	r3, #1
 800c670:	69e0      	ldr	r0, [r4, #28]
 800c672:	2100      	movs	r1, #0
 800c674:	2204      	movs	r2, #4
 800c676:	f102 0614 	add.w	r6, r2, #20
 800c67a:	429e      	cmp	r6, r3
 800c67c:	d93d      	bls.n	800c6fa <_dtoa_r+0x31a>
 800c67e:	6041      	str	r1, [r0, #4]
 800c680:	4620      	mov	r0, r4
 800c682:	f000 fd9f 	bl	800d1c4 <_Balloc>
 800c686:	9000      	str	r0, [sp, #0]
 800c688:	2800      	cmp	r0, #0
 800c68a:	d139      	bne.n	800c700 <_dtoa_r+0x320>
 800c68c:	4b16      	ldr	r3, [pc, #88]	; (800c6e8 <_dtoa_r+0x308>)
 800c68e:	4602      	mov	r2, r0
 800c690:	f240 11af 	movw	r1, #431	; 0x1af
 800c694:	e6bd      	b.n	800c412 <_dtoa_r+0x32>
 800c696:	2301      	movs	r3, #1
 800c698:	e7e1      	b.n	800c65e <_dtoa_r+0x27e>
 800c69a:	2501      	movs	r5, #1
 800c69c:	2300      	movs	r3, #0
 800c69e:	9307      	str	r3, [sp, #28]
 800c6a0:	9509      	str	r5, [sp, #36]	; 0x24
 800c6a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c6a6:	9301      	str	r3, [sp, #4]
 800c6a8:	9304      	str	r3, [sp, #16]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	2312      	movs	r3, #18
 800c6ae:	e7d1      	b.n	800c654 <_dtoa_r+0x274>
 800c6b0:	636f4361 	.word	0x636f4361
 800c6b4:	3fd287a7 	.word	0x3fd287a7
 800c6b8:	8b60c8b3 	.word	0x8b60c8b3
 800c6bc:	3fc68a28 	.word	0x3fc68a28
 800c6c0:	509f79fb 	.word	0x509f79fb
 800c6c4:	3fd34413 	.word	0x3fd34413
 800c6c8:	08011157 	.word	0x08011157
 800c6cc:	0801116e 	.word	0x0801116e
 800c6d0:	7ff00000 	.word	0x7ff00000
 800c6d4:	08011153 	.word	0x08011153
 800c6d8:	0801114a 	.word	0x0801114a
 800c6dc:	08011122 	.word	0x08011122
 800c6e0:	3ff80000 	.word	0x3ff80000
 800c6e4:	08011258 	.word	0x08011258
 800c6e8:	080111c6 	.word	0x080111c6
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	9309      	str	r3, [sp, #36]	; 0x24
 800c6f0:	e7d7      	b.n	800c6a2 <_dtoa_r+0x2c2>
 800c6f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6f4:	9301      	str	r3, [sp, #4]
 800c6f6:	9304      	str	r3, [sp, #16]
 800c6f8:	e7ba      	b.n	800c670 <_dtoa_r+0x290>
 800c6fa:	3101      	adds	r1, #1
 800c6fc:	0052      	lsls	r2, r2, #1
 800c6fe:	e7ba      	b.n	800c676 <_dtoa_r+0x296>
 800c700:	69e3      	ldr	r3, [r4, #28]
 800c702:	9a00      	ldr	r2, [sp, #0]
 800c704:	601a      	str	r2, [r3, #0]
 800c706:	9b04      	ldr	r3, [sp, #16]
 800c708:	2b0e      	cmp	r3, #14
 800c70a:	f200 80a8 	bhi.w	800c85e <_dtoa_r+0x47e>
 800c70e:	2d00      	cmp	r5, #0
 800c710:	f000 80a5 	beq.w	800c85e <_dtoa_r+0x47e>
 800c714:	f1bb 0f00 	cmp.w	fp, #0
 800c718:	dd38      	ble.n	800c78c <_dtoa_r+0x3ac>
 800c71a:	4bc0      	ldr	r3, [pc, #768]	; (800ca1c <_dtoa_r+0x63c>)
 800c71c:	f00b 020f 	and.w	r2, fp, #15
 800c720:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c724:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c728:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c72c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c730:	d019      	beq.n	800c766 <_dtoa_r+0x386>
 800c732:	4bbb      	ldr	r3, [pc, #748]	; (800ca20 <_dtoa_r+0x640>)
 800c734:	ec51 0b18 	vmov	r0, r1, d8
 800c738:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c73c:	f7f4 f886 	bl	800084c <__aeabi_ddiv>
 800c740:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c744:	f008 080f 	and.w	r8, r8, #15
 800c748:	2503      	movs	r5, #3
 800c74a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ca20 <_dtoa_r+0x640>
 800c74e:	f1b8 0f00 	cmp.w	r8, #0
 800c752:	d10a      	bne.n	800c76a <_dtoa_r+0x38a>
 800c754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c758:	4632      	mov	r2, r6
 800c75a:	463b      	mov	r3, r7
 800c75c:	f7f4 f876 	bl	800084c <__aeabi_ddiv>
 800c760:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c764:	e02b      	b.n	800c7be <_dtoa_r+0x3de>
 800c766:	2502      	movs	r5, #2
 800c768:	e7ef      	b.n	800c74a <_dtoa_r+0x36a>
 800c76a:	f018 0f01 	tst.w	r8, #1
 800c76e:	d008      	beq.n	800c782 <_dtoa_r+0x3a2>
 800c770:	4630      	mov	r0, r6
 800c772:	4639      	mov	r1, r7
 800c774:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c778:	f7f3 ff3e 	bl	80005f8 <__aeabi_dmul>
 800c77c:	3501      	adds	r5, #1
 800c77e:	4606      	mov	r6, r0
 800c780:	460f      	mov	r7, r1
 800c782:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c786:	f109 0908 	add.w	r9, r9, #8
 800c78a:	e7e0      	b.n	800c74e <_dtoa_r+0x36e>
 800c78c:	f000 809f 	beq.w	800c8ce <_dtoa_r+0x4ee>
 800c790:	f1cb 0600 	rsb	r6, fp, #0
 800c794:	4ba1      	ldr	r3, [pc, #644]	; (800ca1c <_dtoa_r+0x63c>)
 800c796:	4fa2      	ldr	r7, [pc, #648]	; (800ca20 <_dtoa_r+0x640>)
 800c798:	f006 020f 	and.w	r2, r6, #15
 800c79c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a4:	ec51 0b18 	vmov	r0, r1, d8
 800c7a8:	f7f3 ff26 	bl	80005f8 <__aeabi_dmul>
 800c7ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7b0:	1136      	asrs	r6, r6, #4
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	2502      	movs	r5, #2
 800c7b6:	2e00      	cmp	r6, #0
 800c7b8:	d17e      	bne.n	800c8b8 <_dtoa_r+0x4d8>
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d1d0      	bne.n	800c760 <_dtoa_r+0x380>
 800c7be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	f000 8084 	beq.w	800c8d2 <_dtoa_r+0x4f2>
 800c7ca:	4b96      	ldr	r3, [pc, #600]	; (800ca24 <_dtoa_r+0x644>)
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	4640      	mov	r0, r8
 800c7d0:	4649      	mov	r1, r9
 800c7d2:	f7f4 f983 	bl	8000adc <__aeabi_dcmplt>
 800c7d6:	2800      	cmp	r0, #0
 800c7d8:	d07b      	beq.n	800c8d2 <_dtoa_r+0x4f2>
 800c7da:	9b04      	ldr	r3, [sp, #16]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d078      	beq.n	800c8d2 <_dtoa_r+0x4f2>
 800c7e0:	9b01      	ldr	r3, [sp, #4]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	dd39      	ble.n	800c85a <_dtoa_r+0x47a>
 800c7e6:	4b90      	ldr	r3, [pc, #576]	; (800ca28 <_dtoa_r+0x648>)
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	4640      	mov	r0, r8
 800c7ec:	4649      	mov	r1, r9
 800c7ee:	f7f3 ff03 	bl	80005f8 <__aeabi_dmul>
 800c7f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7f6:	9e01      	ldr	r6, [sp, #4]
 800c7f8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c7fc:	3501      	adds	r5, #1
 800c7fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c802:	4628      	mov	r0, r5
 800c804:	f7f3 fe8e 	bl	8000524 <__aeabi_i2d>
 800c808:	4642      	mov	r2, r8
 800c80a:	464b      	mov	r3, r9
 800c80c:	f7f3 fef4 	bl	80005f8 <__aeabi_dmul>
 800c810:	4b86      	ldr	r3, [pc, #536]	; (800ca2c <_dtoa_r+0x64c>)
 800c812:	2200      	movs	r2, #0
 800c814:	f7f3 fd3a 	bl	800028c <__adddf3>
 800c818:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c81c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c820:	9303      	str	r3, [sp, #12]
 800c822:	2e00      	cmp	r6, #0
 800c824:	d158      	bne.n	800c8d8 <_dtoa_r+0x4f8>
 800c826:	4b82      	ldr	r3, [pc, #520]	; (800ca30 <_dtoa_r+0x650>)
 800c828:	2200      	movs	r2, #0
 800c82a:	4640      	mov	r0, r8
 800c82c:	4649      	mov	r1, r9
 800c82e:	f7f3 fd2b 	bl	8000288 <__aeabi_dsub>
 800c832:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c836:	4680      	mov	r8, r0
 800c838:	4689      	mov	r9, r1
 800c83a:	f7f4 f96d 	bl	8000b18 <__aeabi_dcmpgt>
 800c83e:	2800      	cmp	r0, #0
 800c840:	f040 8296 	bne.w	800cd70 <_dtoa_r+0x990>
 800c844:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c848:	4640      	mov	r0, r8
 800c84a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c84e:	4649      	mov	r1, r9
 800c850:	f7f4 f944 	bl	8000adc <__aeabi_dcmplt>
 800c854:	2800      	cmp	r0, #0
 800c856:	f040 8289 	bne.w	800cd6c <_dtoa_r+0x98c>
 800c85a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c85e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c860:	2b00      	cmp	r3, #0
 800c862:	f2c0 814e 	blt.w	800cb02 <_dtoa_r+0x722>
 800c866:	f1bb 0f0e 	cmp.w	fp, #14
 800c86a:	f300 814a 	bgt.w	800cb02 <_dtoa_r+0x722>
 800c86e:	4b6b      	ldr	r3, [pc, #428]	; (800ca1c <_dtoa_r+0x63c>)
 800c870:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c874:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	f280 80dc 	bge.w	800ca38 <_dtoa_r+0x658>
 800c880:	9b04      	ldr	r3, [sp, #16]
 800c882:	2b00      	cmp	r3, #0
 800c884:	f300 80d8 	bgt.w	800ca38 <_dtoa_r+0x658>
 800c888:	f040 826f 	bne.w	800cd6a <_dtoa_r+0x98a>
 800c88c:	4b68      	ldr	r3, [pc, #416]	; (800ca30 <_dtoa_r+0x650>)
 800c88e:	2200      	movs	r2, #0
 800c890:	4640      	mov	r0, r8
 800c892:	4649      	mov	r1, r9
 800c894:	f7f3 feb0 	bl	80005f8 <__aeabi_dmul>
 800c898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c89c:	f7f4 f932 	bl	8000b04 <__aeabi_dcmpge>
 800c8a0:	9e04      	ldr	r6, [sp, #16]
 800c8a2:	4637      	mov	r7, r6
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	f040 8245 	bne.w	800cd34 <_dtoa_r+0x954>
 800c8aa:	9d00      	ldr	r5, [sp, #0]
 800c8ac:	2331      	movs	r3, #49	; 0x31
 800c8ae:	f805 3b01 	strb.w	r3, [r5], #1
 800c8b2:	f10b 0b01 	add.w	fp, fp, #1
 800c8b6:	e241      	b.n	800cd3c <_dtoa_r+0x95c>
 800c8b8:	07f2      	lsls	r2, r6, #31
 800c8ba:	d505      	bpl.n	800c8c8 <_dtoa_r+0x4e8>
 800c8bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8c0:	f7f3 fe9a 	bl	80005f8 <__aeabi_dmul>
 800c8c4:	3501      	adds	r5, #1
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	1076      	asrs	r6, r6, #1
 800c8ca:	3708      	adds	r7, #8
 800c8cc:	e773      	b.n	800c7b6 <_dtoa_r+0x3d6>
 800c8ce:	2502      	movs	r5, #2
 800c8d0:	e775      	b.n	800c7be <_dtoa_r+0x3de>
 800c8d2:	9e04      	ldr	r6, [sp, #16]
 800c8d4:	465f      	mov	r7, fp
 800c8d6:	e792      	b.n	800c7fe <_dtoa_r+0x41e>
 800c8d8:	9900      	ldr	r1, [sp, #0]
 800c8da:	4b50      	ldr	r3, [pc, #320]	; (800ca1c <_dtoa_r+0x63c>)
 800c8dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c8e0:	4431      	add	r1, r6
 800c8e2:	9102      	str	r1, [sp, #8]
 800c8e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8e6:	eeb0 9a47 	vmov.f32	s18, s14
 800c8ea:	eef0 9a67 	vmov.f32	s19, s15
 800c8ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c8f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c8f6:	2900      	cmp	r1, #0
 800c8f8:	d044      	beq.n	800c984 <_dtoa_r+0x5a4>
 800c8fa:	494e      	ldr	r1, [pc, #312]	; (800ca34 <_dtoa_r+0x654>)
 800c8fc:	2000      	movs	r0, #0
 800c8fe:	f7f3 ffa5 	bl	800084c <__aeabi_ddiv>
 800c902:	ec53 2b19 	vmov	r2, r3, d9
 800c906:	f7f3 fcbf 	bl	8000288 <__aeabi_dsub>
 800c90a:	9d00      	ldr	r5, [sp, #0]
 800c90c:	ec41 0b19 	vmov	d9, r0, r1
 800c910:	4649      	mov	r1, r9
 800c912:	4640      	mov	r0, r8
 800c914:	f7f4 f920 	bl	8000b58 <__aeabi_d2iz>
 800c918:	4606      	mov	r6, r0
 800c91a:	f7f3 fe03 	bl	8000524 <__aeabi_i2d>
 800c91e:	4602      	mov	r2, r0
 800c920:	460b      	mov	r3, r1
 800c922:	4640      	mov	r0, r8
 800c924:	4649      	mov	r1, r9
 800c926:	f7f3 fcaf 	bl	8000288 <__aeabi_dsub>
 800c92a:	3630      	adds	r6, #48	; 0x30
 800c92c:	f805 6b01 	strb.w	r6, [r5], #1
 800c930:	ec53 2b19 	vmov	r2, r3, d9
 800c934:	4680      	mov	r8, r0
 800c936:	4689      	mov	r9, r1
 800c938:	f7f4 f8d0 	bl	8000adc <__aeabi_dcmplt>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	d164      	bne.n	800ca0a <_dtoa_r+0x62a>
 800c940:	4642      	mov	r2, r8
 800c942:	464b      	mov	r3, r9
 800c944:	4937      	ldr	r1, [pc, #220]	; (800ca24 <_dtoa_r+0x644>)
 800c946:	2000      	movs	r0, #0
 800c948:	f7f3 fc9e 	bl	8000288 <__aeabi_dsub>
 800c94c:	ec53 2b19 	vmov	r2, r3, d9
 800c950:	f7f4 f8c4 	bl	8000adc <__aeabi_dcmplt>
 800c954:	2800      	cmp	r0, #0
 800c956:	f040 80b6 	bne.w	800cac6 <_dtoa_r+0x6e6>
 800c95a:	9b02      	ldr	r3, [sp, #8]
 800c95c:	429d      	cmp	r5, r3
 800c95e:	f43f af7c 	beq.w	800c85a <_dtoa_r+0x47a>
 800c962:	4b31      	ldr	r3, [pc, #196]	; (800ca28 <_dtoa_r+0x648>)
 800c964:	ec51 0b19 	vmov	r0, r1, d9
 800c968:	2200      	movs	r2, #0
 800c96a:	f7f3 fe45 	bl	80005f8 <__aeabi_dmul>
 800c96e:	4b2e      	ldr	r3, [pc, #184]	; (800ca28 <_dtoa_r+0x648>)
 800c970:	ec41 0b19 	vmov	d9, r0, r1
 800c974:	2200      	movs	r2, #0
 800c976:	4640      	mov	r0, r8
 800c978:	4649      	mov	r1, r9
 800c97a:	f7f3 fe3d 	bl	80005f8 <__aeabi_dmul>
 800c97e:	4680      	mov	r8, r0
 800c980:	4689      	mov	r9, r1
 800c982:	e7c5      	b.n	800c910 <_dtoa_r+0x530>
 800c984:	ec51 0b17 	vmov	r0, r1, d7
 800c988:	f7f3 fe36 	bl	80005f8 <__aeabi_dmul>
 800c98c:	9b02      	ldr	r3, [sp, #8]
 800c98e:	9d00      	ldr	r5, [sp, #0]
 800c990:	930f      	str	r3, [sp, #60]	; 0x3c
 800c992:	ec41 0b19 	vmov	d9, r0, r1
 800c996:	4649      	mov	r1, r9
 800c998:	4640      	mov	r0, r8
 800c99a:	f7f4 f8dd 	bl	8000b58 <__aeabi_d2iz>
 800c99e:	4606      	mov	r6, r0
 800c9a0:	f7f3 fdc0 	bl	8000524 <__aeabi_i2d>
 800c9a4:	3630      	adds	r6, #48	; 0x30
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	4640      	mov	r0, r8
 800c9ac:	4649      	mov	r1, r9
 800c9ae:	f7f3 fc6b 	bl	8000288 <__aeabi_dsub>
 800c9b2:	f805 6b01 	strb.w	r6, [r5], #1
 800c9b6:	9b02      	ldr	r3, [sp, #8]
 800c9b8:	429d      	cmp	r5, r3
 800c9ba:	4680      	mov	r8, r0
 800c9bc:	4689      	mov	r9, r1
 800c9be:	f04f 0200 	mov.w	r2, #0
 800c9c2:	d124      	bne.n	800ca0e <_dtoa_r+0x62e>
 800c9c4:	4b1b      	ldr	r3, [pc, #108]	; (800ca34 <_dtoa_r+0x654>)
 800c9c6:	ec51 0b19 	vmov	r0, r1, d9
 800c9ca:	f7f3 fc5f 	bl	800028c <__adddf3>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	460b      	mov	r3, r1
 800c9d2:	4640      	mov	r0, r8
 800c9d4:	4649      	mov	r1, r9
 800c9d6:	f7f4 f89f 	bl	8000b18 <__aeabi_dcmpgt>
 800c9da:	2800      	cmp	r0, #0
 800c9dc:	d173      	bne.n	800cac6 <_dtoa_r+0x6e6>
 800c9de:	ec53 2b19 	vmov	r2, r3, d9
 800c9e2:	4914      	ldr	r1, [pc, #80]	; (800ca34 <_dtoa_r+0x654>)
 800c9e4:	2000      	movs	r0, #0
 800c9e6:	f7f3 fc4f 	bl	8000288 <__aeabi_dsub>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	4640      	mov	r0, r8
 800c9f0:	4649      	mov	r1, r9
 800c9f2:	f7f4 f873 	bl	8000adc <__aeabi_dcmplt>
 800c9f6:	2800      	cmp	r0, #0
 800c9f8:	f43f af2f 	beq.w	800c85a <_dtoa_r+0x47a>
 800c9fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c9fe:	1e6b      	subs	r3, r5, #1
 800ca00:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ca06:	2b30      	cmp	r3, #48	; 0x30
 800ca08:	d0f8      	beq.n	800c9fc <_dtoa_r+0x61c>
 800ca0a:	46bb      	mov	fp, r7
 800ca0c:	e04a      	b.n	800caa4 <_dtoa_r+0x6c4>
 800ca0e:	4b06      	ldr	r3, [pc, #24]	; (800ca28 <_dtoa_r+0x648>)
 800ca10:	f7f3 fdf2 	bl	80005f8 <__aeabi_dmul>
 800ca14:	4680      	mov	r8, r0
 800ca16:	4689      	mov	r9, r1
 800ca18:	e7bd      	b.n	800c996 <_dtoa_r+0x5b6>
 800ca1a:	bf00      	nop
 800ca1c:	08011258 	.word	0x08011258
 800ca20:	08011230 	.word	0x08011230
 800ca24:	3ff00000 	.word	0x3ff00000
 800ca28:	40240000 	.word	0x40240000
 800ca2c:	401c0000 	.word	0x401c0000
 800ca30:	40140000 	.word	0x40140000
 800ca34:	3fe00000 	.word	0x3fe00000
 800ca38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ca3c:	9d00      	ldr	r5, [sp, #0]
 800ca3e:	4642      	mov	r2, r8
 800ca40:	464b      	mov	r3, r9
 800ca42:	4630      	mov	r0, r6
 800ca44:	4639      	mov	r1, r7
 800ca46:	f7f3 ff01 	bl	800084c <__aeabi_ddiv>
 800ca4a:	f7f4 f885 	bl	8000b58 <__aeabi_d2iz>
 800ca4e:	9001      	str	r0, [sp, #4]
 800ca50:	f7f3 fd68 	bl	8000524 <__aeabi_i2d>
 800ca54:	4642      	mov	r2, r8
 800ca56:	464b      	mov	r3, r9
 800ca58:	f7f3 fdce 	bl	80005f8 <__aeabi_dmul>
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	460b      	mov	r3, r1
 800ca60:	4630      	mov	r0, r6
 800ca62:	4639      	mov	r1, r7
 800ca64:	f7f3 fc10 	bl	8000288 <__aeabi_dsub>
 800ca68:	9e01      	ldr	r6, [sp, #4]
 800ca6a:	9f04      	ldr	r7, [sp, #16]
 800ca6c:	3630      	adds	r6, #48	; 0x30
 800ca6e:	f805 6b01 	strb.w	r6, [r5], #1
 800ca72:	9e00      	ldr	r6, [sp, #0]
 800ca74:	1bae      	subs	r6, r5, r6
 800ca76:	42b7      	cmp	r7, r6
 800ca78:	4602      	mov	r2, r0
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	d134      	bne.n	800cae8 <_dtoa_r+0x708>
 800ca7e:	f7f3 fc05 	bl	800028c <__adddf3>
 800ca82:	4642      	mov	r2, r8
 800ca84:	464b      	mov	r3, r9
 800ca86:	4606      	mov	r6, r0
 800ca88:	460f      	mov	r7, r1
 800ca8a:	f7f4 f845 	bl	8000b18 <__aeabi_dcmpgt>
 800ca8e:	b9c8      	cbnz	r0, 800cac4 <_dtoa_r+0x6e4>
 800ca90:	4642      	mov	r2, r8
 800ca92:	464b      	mov	r3, r9
 800ca94:	4630      	mov	r0, r6
 800ca96:	4639      	mov	r1, r7
 800ca98:	f7f4 f816 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca9c:	b110      	cbz	r0, 800caa4 <_dtoa_r+0x6c4>
 800ca9e:	9b01      	ldr	r3, [sp, #4]
 800caa0:	07db      	lsls	r3, r3, #31
 800caa2:	d40f      	bmi.n	800cac4 <_dtoa_r+0x6e4>
 800caa4:	4651      	mov	r1, sl
 800caa6:	4620      	mov	r0, r4
 800caa8:	f000 fbcc 	bl	800d244 <_Bfree>
 800caac:	2300      	movs	r3, #0
 800caae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cab0:	702b      	strb	r3, [r5, #0]
 800cab2:	f10b 0301 	add.w	r3, fp, #1
 800cab6:	6013      	str	r3, [r2, #0]
 800cab8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800caba:	2b00      	cmp	r3, #0
 800cabc:	f43f ace2 	beq.w	800c484 <_dtoa_r+0xa4>
 800cac0:	601d      	str	r5, [r3, #0]
 800cac2:	e4df      	b.n	800c484 <_dtoa_r+0xa4>
 800cac4:	465f      	mov	r7, fp
 800cac6:	462b      	mov	r3, r5
 800cac8:	461d      	mov	r5, r3
 800caca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cace:	2a39      	cmp	r2, #57	; 0x39
 800cad0:	d106      	bne.n	800cae0 <_dtoa_r+0x700>
 800cad2:	9a00      	ldr	r2, [sp, #0]
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d1f7      	bne.n	800cac8 <_dtoa_r+0x6e8>
 800cad8:	9900      	ldr	r1, [sp, #0]
 800cada:	2230      	movs	r2, #48	; 0x30
 800cadc:	3701      	adds	r7, #1
 800cade:	700a      	strb	r2, [r1, #0]
 800cae0:	781a      	ldrb	r2, [r3, #0]
 800cae2:	3201      	adds	r2, #1
 800cae4:	701a      	strb	r2, [r3, #0]
 800cae6:	e790      	b.n	800ca0a <_dtoa_r+0x62a>
 800cae8:	4ba3      	ldr	r3, [pc, #652]	; (800cd78 <_dtoa_r+0x998>)
 800caea:	2200      	movs	r2, #0
 800caec:	f7f3 fd84 	bl	80005f8 <__aeabi_dmul>
 800caf0:	2200      	movs	r2, #0
 800caf2:	2300      	movs	r3, #0
 800caf4:	4606      	mov	r6, r0
 800caf6:	460f      	mov	r7, r1
 800caf8:	f7f3 ffe6 	bl	8000ac8 <__aeabi_dcmpeq>
 800cafc:	2800      	cmp	r0, #0
 800cafe:	d09e      	beq.n	800ca3e <_dtoa_r+0x65e>
 800cb00:	e7d0      	b.n	800caa4 <_dtoa_r+0x6c4>
 800cb02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb04:	2a00      	cmp	r2, #0
 800cb06:	f000 80ca 	beq.w	800cc9e <_dtoa_r+0x8be>
 800cb0a:	9a07      	ldr	r2, [sp, #28]
 800cb0c:	2a01      	cmp	r2, #1
 800cb0e:	f300 80ad 	bgt.w	800cc6c <_dtoa_r+0x88c>
 800cb12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb14:	2a00      	cmp	r2, #0
 800cb16:	f000 80a5 	beq.w	800cc64 <_dtoa_r+0x884>
 800cb1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cb1e:	9e08      	ldr	r6, [sp, #32]
 800cb20:	9d05      	ldr	r5, [sp, #20]
 800cb22:	9a05      	ldr	r2, [sp, #20]
 800cb24:	441a      	add	r2, r3
 800cb26:	9205      	str	r2, [sp, #20]
 800cb28:	9a06      	ldr	r2, [sp, #24]
 800cb2a:	2101      	movs	r1, #1
 800cb2c:	441a      	add	r2, r3
 800cb2e:	4620      	mov	r0, r4
 800cb30:	9206      	str	r2, [sp, #24]
 800cb32:	f000 fc87 	bl	800d444 <__i2b>
 800cb36:	4607      	mov	r7, r0
 800cb38:	b165      	cbz	r5, 800cb54 <_dtoa_r+0x774>
 800cb3a:	9b06      	ldr	r3, [sp, #24]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	dd09      	ble.n	800cb54 <_dtoa_r+0x774>
 800cb40:	42ab      	cmp	r3, r5
 800cb42:	9a05      	ldr	r2, [sp, #20]
 800cb44:	bfa8      	it	ge
 800cb46:	462b      	movge	r3, r5
 800cb48:	1ad2      	subs	r2, r2, r3
 800cb4a:	9205      	str	r2, [sp, #20]
 800cb4c:	9a06      	ldr	r2, [sp, #24]
 800cb4e:	1aed      	subs	r5, r5, r3
 800cb50:	1ad3      	subs	r3, r2, r3
 800cb52:	9306      	str	r3, [sp, #24]
 800cb54:	9b08      	ldr	r3, [sp, #32]
 800cb56:	b1f3      	cbz	r3, 800cb96 <_dtoa_r+0x7b6>
 800cb58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	f000 80a3 	beq.w	800cca6 <_dtoa_r+0x8c6>
 800cb60:	2e00      	cmp	r6, #0
 800cb62:	dd10      	ble.n	800cb86 <_dtoa_r+0x7a6>
 800cb64:	4639      	mov	r1, r7
 800cb66:	4632      	mov	r2, r6
 800cb68:	4620      	mov	r0, r4
 800cb6a:	f000 fd2b 	bl	800d5c4 <__pow5mult>
 800cb6e:	4652      	mov	r2, sl
 800cb70:	4601      	mov	r1, r0
 800cb72:	4607      	mov	r7, r0
 800cb74:	4620      	mov	r0, r4
 800cb76:	f000 fc7b 	bl	800d470 <__multiply>
 800cb7a:	4651      	mov	r1, sl
 800cb7c:	4680      	mov	r8, r0
 800cb7e:	4620      	mov	r0, r4
 800cb80:	f000 fb60 	bl	800d244 <_Bfree>
 800cb84:	46c2      	mov	sl, r8
 800cb86:	9b08      	ldr	r3, [sp, #32]
 800cb88:	1b9a      	subs	r2, r3, r6
 800cb8a:	d004      	beq.n	800cb96 <_dtoa_r+0x7b6>
 800cb8c:	4651      	mov	r1, sl
 800cb8e:	4620      	mov	r0, r4
 800cb90:	f000 fd18 	bl	800d5c4 <__pow5mult>
 800cb94:	4682      	mov	sl, r0
 800cb96:	2101      	movs	r1, #1
 800cb98:	4620      	mov	r0, r4
 800cb9a:	f000 fc53 	bl	800d444 <__i2b>
 800cb9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	4606      	mov	r6, r0
 800cba4:	f340 8081 	ble.w	800ccaa <_dtoa_r+0x8ca>
 800cba8:	461a      	mov	r2, r3
 800cbaa:	4601      	mov	r1, r0
 800cbac:	4620      	mov	r0, r4
 800cbae:	f000 fd09 	bl	800d5c4 <__pow5mult>
 800cbb2:	9b07      	ldr	r3, [sp, #28]
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	4606      	mov	r6, r0
 800cbb8:	dd7a      	ble.n	800ccb0 <_dtoa_r+0x8d0>
 800cbba:	f04f 0800 	mov.w	r8, #0
 800cbbe:	6933      	ldr	r3, [r6, #16]
 800cbc0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cbc4:	6918      	ldr	r0, [r3, #16]
 800cbc6:	f000 fbef 	bl	800d3a8 <__hi0bits>
 800cbca:	f1c0 0020 	rsb	r0, r0, #32
 800cbce:	9b06      	ldr	r3, [sp, #24]
 800cbd0:	4418      	add	r0, r3
 800cbd2:	f010 001f 	ands.w	r0, r0, #31
 800cbd6:	f000 8094 	beq.w	800cd02 <_dtoa_r+0x922>
 800cbda:	f1c0 0320 	rsb	r3, r0, #32
 800cbde:	2b04      	cmp	r3, #4
 800cbe0:	f340 8085 	ble.w	800ccee <_dtoa_r+0x90e>
 800cbe4:	9b05      	ldr	r3, [sp, #20]
 800cbe6:	f1c0 001c 	rsb	r0, r0, #28
 800cbea:	4403      	add	r3, r0
 800cbec:	9305      	str	r3, [sp, #20]
 800cbee:	9b06      	ldr	r3, [sp, #24]
 800cbf0:	4403      	add	r3, r0
 800cbf2:	4405      	add	r5, r0
 800cbf4:	9306      	str	r3, [sp, #24]
 800cbf6:	9b05      	ldr	r3, [sp, #20]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	dd05      	ble.n	800cc08 <_dtoa_r+0x828>
 800cbfc:	4651      	mov	r1, sl
 800cbfe:	461a      	mov	r2, r3
 800cc00:	4620      	mov	r0, r4
 800cc02:	f000 fd39 	bl	800d678 <__lshift>
 800cc06:	4682      	mov	sl, r0
 800cc08:	9b06      	ldr	r3, [sp, #24]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	dd05      	ble.n	800cc1a <_dtoa_r+0x83a>
 800cc0e:	4631      	mov	r1, r6
 800cc10:	461a      	mov	r2, r3
 800cc12:	4620      	mov	r0, r4
 800cc14:	f000 fd30 	bl	800d678 <__lshift>
 800cc18:	4606      	mov	r6, r0
 800cc1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d072      	beq.n	800cd06 <_dtoa_r+0x926>
 800cc20:	4631      	mov	r1, r6
 800cc22:	4650      	mov	r0, sl
 800cc24:	f000 fd94 	bl	800d750 <__mcmp>
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	da6c      	bge.n	800cd06 <_dtoa_r+0x926>
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	4651      	mov	r1, sl
 800cc30:	220a      	movs	r2, #10
 800cc32:	4620      	mov	r0, r4
 800cc34:	f000 fb28 	bl	800d288 <__multadd>
 800cc38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cc3e:	4682      	mov	sl, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	f000 81b0 	beq.w	800cfa6 <_dtoa_r+0xbc6>
 800cc46:	2300      	movs	r3, #0
 800cc48:	4639      	mov	r1, r7
 800cc4a:	220a      	movs	r2, #10
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	f000 fb1b 	bl	800d288 <__multadd>
 800cc52:	9b01      	ldr	r3, [sp, #4]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	4607      	mov	r7, r0
 800cc58:	f300 8096 	bgt.w	800cd88 <_dtoa_r+0x9a8>
 800cc5c:	9b07      	ldr	r3, [sp, #28]
 800cc5e:	2b02      	cmp	r3, #2
 800cc60:	dc59      	bgt.n	800cd16 <_dtoa_r+0x936>
 800cc62:	e091      	b.n	800cd88 <_dtoa_r+0x9a8>
 800cc64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cc6a:	e758      	b.n	800cb1e <_dtoa_r+0x73e>
 800cc6c:	9b04      	ldr	r3, [sp, #16]
 800cc6e:	1e5e      	subs	r6, r3, #1
 800cc70:	9b08      	ldr	r3, [sp, #32]
 800cc72:	42b3      	cmp	r3, r6
 800cc74:	bfbf      	itttt	lt
 800cc76:	9b08      	ldrlt	r3, [sp, #32]
 800cc78:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cc7a:	9608      	strlt	r6, [sp, #32]
 800cc7c:	1af3      	sublt	r3, r6, r3
 800cc7e:	bfb4      	ite	lt
 800cc80:	18d2      	addlt	r2, r2, r3
 800cc82:	1b9e      	subge	r6, r3, r6
 800cc84:	9b04      	ldr	r3, [sp, #16]
 800cc86:	bfbc      	itt	lt
 800cc88:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cc8a:	2600      	movlt	r6, #0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	bfb7      	itett	lt
 800cc90:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cc94:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cc98:	1a9d      	sublt	r5, r3, r2
 800cc9a:	2300      	movlt	r3, #0
 800cc9c:	e741      	b.n	800cb22 <_dtoa_r+0x742>
 800cc9e:	9e08      	ldr	r6, [sp, #32]
 800cca0:	9d05      	ldr	r5, [sp, #20]
 800cca2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cca4:	e748      	b.n	800cb38 <_dtoa_r+0x758>
 800cca6:	9a08      	ldr	r2, [sp, #32]
 800cca8:	e770      	b.n	800cb8c <_dtoa_r+0x7ac>
 800ccaa:	9b07      	ldr	r3, [sp, #28]
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	dc19      	bgt.n	800cce4 <_dtoa_r+0x904>
 800ccb0:	9b02      	ldr	r3, [sp, #8]
 800ccb2:	b9bb      	cbnz	r3, 800cce4 <_dtoa_r+0x904>
 800ccb4:	9b03      	ldr	r3, [sp, #12]
 800ccb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ccba:	b99b      	cbnz	r3, 800cce4 <_dtoa_r+0x904>
 800ccbc:	9b03      	ldr	r3, [sp, #12]
 800ccbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ccc2:	0d1b      	lsrs	r3, r3, #20
 800ccc4:	051b      	lsls	r3, r3, #20
 800ccc6:	b183      	cbz	r3, 800ccea <_dtoa_r+0x90a>
 800ccc8:	9b05      	ldr	r3, [sp, #20]
 800ccca:	3301      	adds	r3, #1
 800cccc:	9305      	str	r3, [sp, #20]
 800ccce:	9b06      	ldr	r3, [sp, #24]
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	9306      	str	r3, [sp, #24]
 800ccd4:	f04f 0801 	mov.w	r8, #1
 800ccd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	f47f af6f 	bne.w	800cbbe <_dtoa_r+0x7de>
 800cce0:	2001      	movs	r0, #1
 800cce2:	e774      	b.n	800cbce <_dtoa_r+0x7ee>
 800cce4:	f04f 0800 	mov.w	r8, #0
 800cce8:	e7f6      	b.n	800ccd8 <_dtoa_r+0x8f8>
 800ccea:	4698      	mov	r8, r3
 800ccec:	e7f4      	b.n	800ccd8 <_dtoa_r+0x8f8>
 800ccee:	d082      	beq.n	800cbf6 <_dtoa_r+0x816>
 800ccf0:	9a05      	ldr	r2, [sp, #20]
 800ccf2:	331c      	adds	r3, #28
 800ccf4:	441a      	add	r2, r3
 800ccf6:	9205      	str	r2, [sp, #20]
 800ccf8:	9a06      	ldr	r2, [sp, #24]
 800ccfa:	441a      	add	r2, r3
 800ccfc:	441d      	add	r5, r3
 800ccfe:	9206      	str	r2, [sp, #24]
 800cd00:	e779      	b.n	800cbf6 <_dtoa_r+0x816>
 800cd02:	4603      	mov	r3, r0
 800cd04:	e7f4      	b.n	800ccf0 <_dtoa_r+0x910>
 800cd06:	9b04      	ldr	r3, [sp, #16]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	dc37      	bgt.n	800cd7c <_dtoa_r+0x99c>
 800cd0c:	9b07      	ldr	r3, [sp, #28]
 800cd0e:	2b02      	cmp	r3, #2
 800cd10:	dd34      	ble.n	800cd7c <_dtoa_r+0x99c>
 800cd12:	9b04      	ldr	r3, [sp, #16]
 800cd14:	9301      	str	r3, [sp, #4]
 800cd16:	9b01      	ldr	r3, [sp, #4]
 800cd18:	b963      	cbnz	r3, 800cd34 <_dtoa_r+0x954>
 800cd1a:	4631      	mov	r1, r6
 800cd1c:	2205      	movs	r2, #5
 800cd1e:	4620      	mov	r0, r4
 800cd20:	f000 fab2 	bl	800d288 <__multadd>
 800cd24:	4601      	mov	r1, r0
 800cd26:	4606      	mov	r6, r0
 800cd28:	4650      	mov	r0, sl
 800cd2a:	f000 fd11 	bl	800d750 <__mcmp>
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	f73f adbb 	bgt.w	800c8aa <_dtoa_r+0x4ca>
 800cd34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd36:	9d00      	ldr	r5, [sp, #0]
 800cd38:	ea6f 0b03 	mvn.w	fp, r3
 800cd3c:	f04f 0800 	mov.w	r8, #0
 800cd40:	4631      	mov	r1, r6
 800cd42:	4620      	mov	r0, r4
 800cd44:	f000 fa7e 	bl	800d244 <_Bfree>
 800cd48:	2f00      	cmp	r7, #0
 800cd4a:	f43f aeab 	beq.w	800caa4 <_dtoa_r+0x6c4>
 800cd4e:	f1b8 0f00 	cmp.w	r8, #0
 800cd52:	d005      	beq.n	800cd60 <_dtoa_r+0x980>
 800cd54:	45b8      	cmp	r8, r7
 800cd56:	d003      	beq.n	800cd60 <_dtoa_r+0x980>
 800cd58:	4641      	mov	r1, r8
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f000 fa72 	bl	800d244 <_Bfree>
 800cd60:	4639      	mov	r1, r7
 800cd62:	4620      	mov	r0, r4
 800cd64:	f000 fa6e 	bl	800d244 <_Bfree>
 800cd68:	e69c      	b.n	800caa4 <_dtoa_r+0x6c4>
 800cd6a:	2600      	movs	r6, #0
 800cd6c:	4637      	mov	r7, r6
 800cd6e:	e7e1      	b.n	800cd34 <_dtoa_r+0x954>
 800cd70:	46bb      	mov	fp, r7
 800cd72:	4637      	mov	r7, r6
 800cd74:	e599      	b.n	800c8aa <_dtoa_r+0x4ca>
 800cd76:	bf00      	nop
 800cd78:	40240000 	.word	0x40240000
 800cd7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	f000 80c8 	beq.w	800cf14 <_dtoa_r+0xb34>
 800cd84:	9b04      	ldr	r3, [sp, #16]
 800cd86:	9301      	str	r3, [sp, #4]
 800cd88:	2d00      	cmp	r5, #0
 800cd8a:	dd05      	ble.n	800cd98 <_dtoa_r+0x9b8>
 800cd8c:	4639      	mov	r1, r7
 800cd8e:	462a      	mov	r2, r5
 800cd90:	4620      	mov	r0, r4
 800cd92:	f000 fc71 	bl	800d678 <__lshift>
 800cd96:	4607      	mov	r7, r0
 800cd98:	f1b8 0f00 	cmp.w	r8, #0
 800cd9c:	d05b      	beq.n	800ce56 <_dtoa_r+0xa76>
 800cd9e:	6879      	ldr	r1, [r7, #4]
 800cda0:	4620      	mov	r0, r4
 800cda2:	f000 fa0f 	bl	800d1c4 <_Balloc>
 800cda6:	4605      	mov	r5, r0
 800cda8:	b928      	cbnz	r0, 800cdb6 <_dtoa_r+0x9d6>
 800cdaa:	4b83      	ldr	r3, [pc, #524]	; (800cfb8 <_dtoa_r+0xbd8>)
 800cdac:	4602      	mov	r2, r0
 800cdae:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cdb2:	f7ff bb2e 	b.w	800c412 <_dtoa_r+0x32>
 800cdb6:	693a      	ldr	r2, [r7, #16]
 800cdb8:	3202      	adds	r2, #2
 800cdba:	0092      	lsls	r2, r2, #2
 800cdbc:	f107 010c 	add.w	r1, r7, #12
 800cdc0:	300c      	adds	r0, #12
 800cdc2:	f7ff fa6e 	bl	800c2a2 <memcpy>
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	4629      	mov	r1, r5
 800cdca:	4620      	mov	r0, r4
 800cdcc:	f000 fc54 	bl	800d678 <__lshift>
 800cdd0:	9b00      	ldr	r3, [sp, #0]
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	9304      	str	r3, [sp, #16]
 800cdd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdda:	4413      	add	r3, r2
 800cddc:	9308      	str	r3, [sp, #32]
 800cdde:	9b02      	ldr	r3, [sp, #8]
 800cde0:	f003 0301 	and.w	r3, r3, #1
 800cde4:	46b8      	mov	r8, r7
 800cde6:	9306      	str	r3, [sp, #24]
 800cde8:	4607      	mov	r7, r0
 800cdea:	9b04      	ldr	r3, [sp, #16]
 800cdec:	4631      	mov	r1, r6
 800cdee:	3b01      	subs	r3, #1
 800cdf0:	4650      	mov	r0, sl
 800cdf2:	9301      	str	r3, [sp, #4]
 800cdf4:	f7ff fa6a 	bl	800c2cc <quorem>
 800cdf8:	4641      	mov	r1, r8
 800cdfa:	9002      	str	r0, [sp, #8]
 800cdfc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ce00:	4650      	mov	r0, sl
 800ce02:	f000 fca5 	bl	800d750 <__mcmp>
 800ce06:	463a      	mov	r2, r7
 800ce08:	9005      	str	r0, [sp, #20]
 800ce0a:	4631      	mov	r1, r6
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	f000 fcbb 	bl	800d788 <__mdiff>
 800ce12:	68c2      	ldr	r2, [r0, #12]
 800ce14:	4605      	mov	r5, r0
 800ce16:	bb02      	cbnz	r2, 800ce5a <_dtoa_r+0xa7a>
 800ce18:	4601      	mov	r1, r0
 800ce1a:	4650      	mov	r0, sl
 800ce1c:	f000 fc98 	bl	800d750 <__mcmp>
 800ce20:	4602      	mov	r2, r0
 800ce22:	4629      	mov	r1, r5
 800ce24:	4620      	mov	r0, r4
 800ce26:	9209      	str	r2, [sp, #36]	; 0x24
 800ce28:	f000 fa0c 	bl	800d244 <_Bfree>
 800ce2c:	9b07      	ldr	r3, [sp, #28]
 800ce2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce30:	9d04      	ldr	r5, [sp, #16]
 800ce32:	ea43 0102 	orr.w	r1, r3, r2
 800ce36:	9b06      	ldr	r3, [sp, #24]
 800ce38:	4319      	orrs	r1, r3
 800ce3a:	d110      	bne.n	800ce5e <_dtoa_r+0xa7e>
 800ce3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ce40:	d029      	beq.n	800ce96 <_dtoa_r+0xab6>
 800ce42:	9b05      	ldr	r3, [sp, #20]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	dd02      	ble.n	800ce4e <_dtoa_r+0xa6e>
 800ce48:	9b02      	ldr	r3, [sp, #8]
 800ce4a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ce4e:	9b01      	ldr	r3, [sp, #4]
 800ce50:	f883 9000 	strb.w	r9, [r3]
 800ce54:	e774      	b.n	800cd40 <_dtoa_r+0x960>
 800ce56:	4638      	mov	r0, r7
 800ce58:	e7ba      	b.n	800cdd0 <_dtoa_r+0x9f0>
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	e7e1      	b.n	800ce22 <_dtoa_r+0xa42>
 800ce5e:	9b05      	ldr	r3, [sp, #20]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	db04      	blt.n	800ce6e <_dtoa_r+0xa8e>
 800ce64:	9907      	ldr	r1, [sp, #28]
 800ce66:	430b      	orrs	r3, r1
 800ce68:	9906      	ldr	r1, [sp, #24]
 800ce6a:	430b      	orrs	r3, r1
 800ce6c:	d120      	bne.n	800ceb0 <_dtoa_r+0xad0>
 800ce6e:	2a00      	cmp	r2, #0
 800ce70:	dded      	ble.n	800ce4e <_dtoa_r+0xa6e>
 800ce72:	4651      	mov	r1, sl
 800ce74:	2201      	movs	r2, #1
 800ce76:	4620      	mov	r0, r4
 800ce78:	f000 fbfe 	bl	800d678 <__lshift>
 800ce7c:	4631      	mov	r1, r6
 800ce7e:	4682      	mov	sl, r0
 800ce80:	f000 fc66 	bl	800d750 <__mcmp>
 800ce84:	2800      	cmp	r0, #0
 800ce86:	dc03      	bgt.n	800ce90 <_dtoa_r+0xab0>
 800ce88:	d1e1      	bne.n	800ce4e <_dtoa_r+0xa6e>
 800ce8a:	f019 0f01 	tst.w	r9, #1
 800ce8e:	d0de      	beq.n	800ce4e <_dtoa_r+0xa6e>
 800ce90:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ce94:	d1d8      	bne.n	800ce48 <_dtoa_r+0xa68>
 800ce96:	9a01      	ldr	r2, [sp, #4]
 800ce98:	2339      	movs	r3, #57	; 0x39
 800ce9a:	7013      	strb	r3, [r2, #0]
 800ce9c:	462b      	mov	r3, r5
 800ce9e:	461d      	mov	r5, r3
 800cea0:	3b01      	subs	r3, #1
 800cea2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cea6:	2a39      	cmp	r2, #57	; 0x39
 800cea8:	d06c      	beq.n	800cf84 <_dtoa_r+0xba4>
 800ceaa:	3201      	adds	r2, #1
 800ceac:	701a      	strb	r2, [r3, #0]
 800ceae:	e747      	b.n	800cd40 <_dtoa_r+0x960>
 800ceb0:	2a00      	cmp	r2, #0
 800ceb2:	dd07      	ble.n	800cec4 <_dtoa_r+0xae4>
 800ceb4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ceb8:	d0ed      	beq.n	800ce96 <_dtoa_r+0xab6>
 800ceba:	9a01      	ldr	r2, [sp, #4]
 800cebc:	f109 0301 	add.w	r3, r9, #1
 800cec0:	7013      	strb	r3, [r2, #0]
 800cec2:	e73d      	b.n	800cd40 <_dtoa_r+0x960>
 800cec4:	9b04      	ldr	r3, [sp, #16]
 800cec6:	9a08      	ldr	r2, [sp, #32]
 800cec8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cecc:	4293      	cmp	r3, r2
 800cece:	d043      	beq.n	800cf58 <_dtoa_r+0xb78>
 800ced0:	4651      	mov	r1, sl
 800ced2:	2300      	movs	r3, #0
 800ced4:	220a      	movs	r2, #10
 800ced6:	4620      	mov	r0, r4
 800ced8:	f000 f9d6 	bl	800d288 <__multadd>
 800cedc:	45b8      	cmp	r8, r7
 800cede:	4682      	mov	sl, r0
 800cee0:	f04f 0300 	mov.w	r3, #0
 800cee4:	f04f 020a 	mov.w	r2, #10
 800cee8:	4641      	mov	r1, r8
 800ceea:	4620      	mov	r0, r4
 800ceec:	d107      	bne.n	800cefe <_dtoa_r+0xb1e>
 800ceee:	f000 f9cb 	bl	800d288 <__multadd>
 800cef2:	4680      	mov	r8, r0
 800cef4:	4607      	mov	r7, r0
 800cef6:	9b04      	ldr	r3, [sp, #16]
 800cef8:	3301      	adds	r3, #1
 800cefa:	9304      	str	r3, [sp, #16]
 800cefc:	e775      	b.n	800cdea <_dtoa_r+0xa0a>
 800cefe:	f000 f9c3 	bl	800d288 <__multadd>
 800cf02:	4639      	mov	r1, r7
 800cf04:	4680      	mov	r8, r0
 800cf06:	2300      	movs	r3, #0
 800cf08:	220a      	movs	r2, #10
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	f000 f9bc 	bl	800d288 <__multadd>
 800cf10:	4607      	mov	r7, r0
 800cf12:	e7f0      	b.n	800cef6 <_dtoa_r+0xb16>
 800cf14:	9b04      	ldr	r3, [sp, #16]
 800cf16:	9301      	str	r3, [sp, #4]
 800cf18:	9d00      	ldr	r5, [sp, #0]
 800cf1a:	4631      	mov	r1, r6
 800cf1c:	4650      	mov	r0, sl
 800cf1e:	f7ff f9d5 	bl	800c2cc <quorem>
 800cf22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cf26:	9b00      	ldr	r3, [sp, #0]
 800cf28:	f805 9b01 	strb.w	r9, [r5], #1
 800cf2c:	1aea      	subs	r2, r5, r3
 800cf2e:	9b01      	ldr	r3, [sp, #4]
 800cf30:	4293      	cmp	r3, r2
 800cf32:	dd07      	ble.n	800cf44 <_dtoa_r+0xb64>
 800cf34:	4651      	mov	r1, sl
 800cf36:	2300      	movs	r3, #0
 800cf38:	220a      	movs	r2, #10
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	f000 f9a4 	bl	800d288 <__multadd>
 800cf40:	4682      	mov	sl, r0
 800cf42:	e7ea      	b.n	800cf1a <_dtoa_r+0xb3a>
 800cf44:	9b01      	ldr	r3, [sp, #4]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	bfc8      	it	gt
 800cf4a:	461d      	movgt	r5, r3
 800cf4c:	9b00      	ldr	r3, [sp, #0]
 800cf4e:	bfd8      	it	le
 800cf50:	2501      	movle	r5, #1
 800cf52:	441d      	add	r5, r3
 800cf54:	f04f 0800 	mov.w	r8, #0
 800cf58:	4651      	mov	r1, sl
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	f000 fb8b 	bl	800d678 <__lshift>
 800cf62:	4631      	mov	r1, r6
 800cf64:	4682      	mov	sl, r0
 800cf66:	f000 fbf3 	bl	800d750 <__mcmp>
 800cf6a:	2800      	cmp	r0, #0
 800cf6c:	dc96      	bgt.n	800ce9c <_dtoa_r+0xabc>
 800cf6e:	d102      	bne.n	800cf76 <_dtoa_r+0xb96>
 800cf70:	f019 0f01 	tst.w	r9, #1
 800cf74:	d192      	bne.n	800ce9c <_dtoa_r+0xabc>
 800cf76:	462b      	mov	r3, r5
 800cf78:	461d      	mov	r5, r3
 800cf7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf7e:	2a30      	cmp	r2, #48	; 0x30
 800cf80:	d0fa      	beq.n	800cf78 <_dtoa_r+0xb98>
 800cf82:	e6dd      	b.n	800cd40 <_dtoa_r+0x960>
 800cf84:	9a00      	ldr	r2, [sp, #0]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d189      	bne.n	800ce9e <_dtoa_r+0xabe>
 800cf8a:	f10b 0b01 	add.w	fp, fp, #1
 800cf8e:	2331      	movs	r3, #49	; 0x31
 800cf90:	e796      	b.n	800cec0 <_dtoa_r+0xae0>
 800cf92:	4b0a      	ldr	r3, [pc, #40]	; (800cfbc <_dtoa_r+0xbdc>)
 800cf94:	f7ff ba99 	b.w	800c4ca <_dtoa_r+0xea>
 800cf98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	f47f aa6d 	bne.w	800c47a <_dtoa_r+0x9a>
 800cfa0:	4b07      	ldr	r3, [pc, #28]	; (800cfc0 <_dtoa_r+0xbe0>)
 800cfa2:	f7ff ba92 	b.w	800c4ca <_dtoa_r+0xea>
 800cfa6:	9b01      	ldr	r3, [sp, #4]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	dcb5      	bgt.n	800cf18 <_dtoa_r+0xb38>
 800cfac:	9b07      	ldr	r3, [sp, #28]
 800cfae:	2b02      	cmp	r3, #2
 800cfb0:	f73f aeb1 	bgt.w	800cd16 <_dtoa_r+0x936>
 800cfb4:	e7b0      	b.n	800cf18 <_dtoa_r+0xb38>
 800cfb6:	bf00      	nop
 800cfb8:	080111c6 	.word	0x080111c6
 800cfbc:	08011121 	.word	0x08011121
 800cfc0:	0801114a 	.word	0x0801114a

0800cfc4 <_free_r>:
 800cfc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfc6:	2900      	cmp	r1, #0
 800cfc8:	d044      	beq.n	800d054 <_free_r+0x90>
 800cfca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfce:	9001      	str	r0, [sp, #4]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	f1a1 0404 	sub.w	r4, r1, #4
 800cfd6:	bfb8      	it	lt
 800cfd8:	18e4      	addlt	r4, r4, r3
 800cfda:	f000 f8e7 	bl	800d1ac <__malloc_lock>
 800cfde:	4a1e      	ldr	r2, [pc, #120]	; (800d058 <_free_r+0x94>)
 800cfe0:	9801      	ldr	r0, [sp, #4]
 800cfe2:	6813      	ldr	r3, [r2, #0]
 800cfe4:	b933      	cbnz	r3, 800cff4 <_free_r+0x30>
 800cfe6:	6063      	str	r3, [r4, #4]
 800cfe8:	6014      	str	r4, [r2, #0]
 800cfea:	b003      	add	sp, #12
 800cfec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cff0:	f000 b8e2 	b.w	800d1b8 <__malloc_unlock>
 800cff4:	42a3      	cmp	r3, r4
 800cff6:	d908      	bls.n	800d00a <_free_r+0x46>
 800cff8:	6825      	ldr	r5, [r4, #0]
 800cffa:	1961      	adds	r1, r4, r5
 800cffc:	428b      	cmp	r3, r1
 800cffe:	bf01      	itttt	eq
 800d000:	6819      	ldreq	r1, [r3, #0]
 800d002:	685b      	ldreq	r3, [r3, #4]
 800d004:	1949      	addeq	r1, r1, r5
 800d006:	6021      	streq	r1, [r4, #0]
 800d008:	e7ed      	b.n	800cfe6 <_free_r+0x22>
 800d00a:	461a      	mov	r2, r3
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	b10b      	cbz	r3, 800d014 <_free_r+0x50>
 800d010:	42a3      	cmp	r3, r4
 800d012:	d9fa      	bls.n	800d00a <_free_r+0x46>
 800d014:	6811      	ldr	r1, [r2, #0]
 800d016:	1855      	adds	r5, r2, r1
 800d018:	42a5      	cmp	r5, r4
 800d01a:	d10b      	bne.n	800d034 <_free_r+0x70>
 800d01c:	6824      	ldr	r4, [r4, #0]
 800d01e:	4421      	add	r1, r4
 800d020:	1854      	adds	r4, r2, r1
 800d022:	42a3      	cmp	r3, r4
 800d024:	6011      	str	r1, [r2, #0]
 800d026:	d1e0      	bne.n	800cfea <_free_r+0x26>
 800d028:	681c      	ldr	r4, [r3, #0]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	6053      	str	r3, [r2, #4]
 800d02e:	440c      	add	r4, r1
 800d030:	6014      	str	r4, [r2, #0]
 800d032:	e7da      	b.n	800cfea <_free_r+0x26>
 800d034:	d902      	bls.n	800d03c <_free_r+0x78>
 800d036:	230c      	movs	r3, #12
 800d038:	6003      	str	r3, [r0, #0]
 800d03a:	e7d6      	b.n	800cfea <_free_r+0x26>
 800d03c:	6825      	ldr	r5, [r4, #0]
 800d03e:	1961      	adds	r1, r4, r5
 800d040:	428b      	cmp	r3, r1
 800d042:	bf04      	itt	eq
 800d044:	6819      	ldreq	r1, [r3, #0]
 800d046:	685b      	ldreq	r3, [r3, #4]
 800d048:	6063      	str	r3, [r4, #4]
 800d04a:	bf04      	itt	eq
 800d04c:	1949      	addeq	r1, r1, r5
 800d04e:	6021      	streq	r1, [r4, #0]
 800d050:	6054      	str	r4, [r2, #4]
 800d052:	e7ca      	b.n	800cfea <_free_r+0x26>
 800d054:	b003      	add	sp, #12
 800d056:	bd30      	pop	{r4, r5, pc}
 800d058:	20005b2c 	.word	0x20005b2c

0800d05c <malloc>:
 800d05c:	4b02      	ldr	r3, [pc, #8]	; (800d068 <malloc+0xc>)
 800d05e:	4601      	mov	r1, r0
 800d060:	6818      	ldr	r0, [r3, #0]
 800d062:	f000 b823 	b.w	800d0ac <_malloc_r>
 800d066:	bf00      	nop
 800d068:	20000120 	.word	0x20000120

0800d06c <sbrk_aligned>:
 800d06c:	b570      	push	{r4, r5, r6, lr}
 800d06e:	4e0e      	ldr	r6, [pc, #56]	; (800d0a8 <sbrk_aligned+0x3c>)
 800d070:	460c      	mov	r4, r1
 800d072:	6831      	ldr	r1, [r6, #0]
 800d074:	4605      	mov	r5, r0
 800d076:	b911      	cbnz	r1, 800d07e <sbrk_aligned+0x12>
 800d078:	f001 fe1a 	bl	800ecb0 <_sbrk_r>
 800d07c:	6030      	str	r0, [r6, #0]
 800d07e:	4621      	mov	r1, r4
 800d080:	4628      	mov	r0, r5
 800d082:	f001 fe15 	bl	800ecb0 <_sbrk_r>
 800d086:	1c43      	adds	r3, r0, #1
 800d088:	d00a      	beq.n	800d0a0 <sbrk_aligned+0x34>
 800d08a:	1cc4      	adds	r4, r0, #3
 800d08c:	f024 0403 	bic.w	r4, r4, #3
 800d090:	42a0      	cmp	r0, r4
 800d092:	d007      	beq.n	800d0a4 <sbrk_aligned+0x38>
 800d094:	1a21      	subs	r1, r4, r0
 800d096:	4628      	mov	r0, r5
 800d098:	f001 fe0a 	bl	800ecb0 <_sbrk_r>
 800d09c:	3001      	adds	r0, #1
 800d09e:	d101      	bne.n	800d0a4 <sbrk_aligned+0x38>
 800d0a0:	f04f 34ff 	mov.w	r4, #4294967295
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	bd70      	pop	{r4, r5, r6, pc}
 800d0a8:	20005b30 	.word	0x20005b30

0800d0ac <_malloc_r>:
 800d0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0b0:	1ccd      	adds	r5, r1, #3
 800d0b2:	f025 0503 	bic.w	r5, r5, #3
 800d0b6:	3508      	adds	r5, #8
 800d0b8:	2d0c      	cmp	r5, #12
 800d0ba:	bf38      	it	cc
 800d0bc:	250c      	movcc	r5, #12
 800d0be:	2d00      	cmp	r5, #0
 800d0c0:	4607      	mov	r7, r0
 800d0c2:	db01      	blt.n	800d0c8 <_malloc_r+0x1c>
 800d0c4:	42a9      	cmp	r1, r5
 800d0c6:	d905      	bls.n	800d0d4 <_malloc_r+0x28>
 800d0c8:	230c      	movs	r3, #12
 800d0ca:	603b      	str	r3, [r7, #0]
 800d0cc:	2600      	movs	r6, #0
 800d0ce:	4630      	mov	r0, r6
 800d0d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d1a8 <_malloc_r+0xfc>
 800d0d8:	f000 f868 	bl	800d1ac <__malloc_lock>
 800d0dc:	f8d8 3000 	ldr.w	r3, [r8]
 800d0e0:	461c      	mov	r4, r3
 800d0e2:	bb5c      	cbnz	r4, 800d13c <_malloc_r+0x90>
 800d0e4:	4629      	mov	r1, r5
 800d0e6:	4638      	mov	r0, r7
 800d0e8:	f7ff ffc0 	bl	800d06c <sbrk_aligned>
 800d0ec:	1c43      	adds	r3, r0, #1
 800d0ee:	4604      	mov	r4, r0
 800d0f0:	d155      	bne.n	800d19e <_malloc_r+0xf2>
 800d0f2:	f8d8 4000 	ldr.w	r4, [r8]
 800d0f6:	4626      	mov	r6, r4
 800d0f8:	2e00      	cmp	r6, #0
 800d0fa:	d145      	bne.n	800d188 <_malloc_r+0xdc>
 800d0fc:	2c00      	cmp	r4, #0
 800d0fe:	d048      	beq.n	800d192 <_malloc_r+0xe6>
 800d100:	6823      	ldr	r3, [r4, #0]
 800d102:	4631      	mov	r1, r6
 800d104:	4638      	mov	r0, r7
 800d106:	eb04 0903 	add.w	r9, r4, r3
 800d10a:	f001 fdd1 	bl	800ecb0 <_sbrk_r>
 800d10e:	4581      	cmp	r9, r0
 800d110:	d13f      	bne.n	800d192 <_malloc_r+0xe6>
 800d112:	6821      	ldr	r1, [r4, #0]
 800d114:	1a6d      	subs	r5, r5, r1
 800d116:	4629      	mov	r1, r5
 800d118:	4638      	mov	r0, r7
 800d11a:	f7ff ffa7 	bl	800d06c <sbrk_aligned>
 800d11e:	3001      	adds	r0, #1
 800d120:	d037      	beq.n	800d192 <_malloc_r+0xe6>
 800d122:	6823      	ldr	r3, [r4, #0]
 800d124:	442b      	add	r3, r5
 800d126:	6023      	str	r3, [r4, #0]
 800d128:	f8d8 3000 	ldr.w	r3, [r8]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d038      	beq.n	800d1a2 <_malloc_r+0xf6>
 800d130:	685a      	ldr	r2, [r3, #4]
 800d132:	42a2      	cmp	r2, r4
 800d134:	d12b      	bne.n	800d18e <_malloc_r+0xe2>
 800d136:	2200      	movs	r2, #0
 800d138:	605a      	str	r2, [r3, #4]
 800d13a:	e00f      	b.n	800d15c <_malloc_r+0xb0>
 800d13c:	6822      	ldr	r2, [r4, #0]
 800d13e:	1b52      	subs	r2, r2, r5
 800d140:	d41f      	bmi.n	800d182 <_malloc_r+0xd6>
 800d142:	2a0b      	cmp	r2, #11
 800d144:	d917      	bls.n	800d176 <_malloc_r+0xca>
 800d146:	1961      	adds	r1, r4, r5
 800d148:	42a3      	cmp	r3, r4
 800d14a:	6025      	str	r5, [r4, #0]
 800d14c:	bf18      	it	ne
 800d14e:	6059      	strne	r1, [r3, #4]
 800d150:	6863      	ldr	r3, [r4, #4]
 800d152:	bf08      	it	eq
 800d154:	f8c8 1000 	streq.w	r1, [r8]
 800d158:	5162      	str	r2, [r4, r5]
 800d15a:	604b      	str	r3, [r1, #4]
 800d15c:	4638      	mov	r0, r7
 800d15e:	f104 060b 	add.w	r6, r4, #11
 800d162:	f000 f829 	bl	800d1b8 <__malloc_unlock>
 800d166:	f026 0607 	bic.w	r6, r6, #7
 800d16a:	1d23      	adds	r3, r4, #4
 800d16c:	1af2      	subs	r2, r6, r3
 800d16e:	d0ae      	beq.n	800d0ce <_malloc_r+0x22>
 800d170:	1b9b      	subs	r3, r3, r6
 800d172:	50a3      	str	r3, [r4, r2]
 800d174:	e7ab      	b.n	800d0ce <_malloc_r+0x22>
 800d176:	42a3      	cmp	r3, r4
 800d178:	6862      	ldr	r2, [r4, #4]
 800d17a:	d1dd      	bne.n	800d138 <_malloc_r+0x8c>
 800d17c:	f8c8 2000 	str.w	r2, [r8]
 800d180:	e7ec      	b.n	800d15c <_malloc_r+0xb0>
 800d182:	4623      	mov	r3, r4
 800d184:	6864      	ldr	r4, [r4, #4]
 800d186:	e7ac      	b.n	800d0e2 <_malloc_r+0x36>
 800d188:	4634      	mov	r4, r6
 800d18a:	6876      	ldr	r6, [r6, #4]
 800d18c:	e7b4      	b.n	800d0f8 <_malloc_r+0x4c>
 800d18e:	4613      	mov	r3, r2
 800d190:	e7cc      	b.n	800d12c <_malloc_r+0x80>
 800d192:	230c      	movs	r3, #12
 800d194:	603b      	str	r3, [r7, #0]
 800d196:	4638      	mov	r0, r7
 800d198:	f000 f80e 	bl	800d1b8 <__malloc_unlock>
 800d19c:	e797      	b.n	800d0ce <_malloc_r+0x22>
 800d19e:	6025      	str	r5, [r4, #0]
 800d1a0:	e7dc      	b.n	800d15c <_malloc_r+0xb0>
 800d1a2:	605b      	str	r3, [r3, #4]
 800d1a4:	deff      	udf	#255	; 0xff
 800d1a6:	bf00      	nop
 800d1a8:	20005b2c 	.word	0x20005b2c

0800d1ac <__malloc_lock>:
 800d1ac:	4801      	ldr	r0, [pc, #4]	; (800d1b4 <__malloc_lock+0x8>)
 800d1ae:	f7ff b876 	b.w	800c29e <__retarget_lock_acquire_recursive>
 800d1b2:	bf00      	nop
 800d1b4:	20005b28 	.word	0x20005b28

0800d1b8 <__malloc_unlock>:
 800d1b8:	4801      	ldr	r0, [pc, #4]	; (800d1c0 <__malloc_unlock+0x8>)
 800d1ba:	f7ff b871 	b.w	800c2a0 <__retarget_lock_release_recursive>
 800d1be:	bf00      	nop
 800d1c0:	20005b28 	.word	0x20005b28

0800d1c4 <_Balloc>:
 800d1c4:	b570      	push	{r4, r5, r6, lr}
 800d1c6:	69c6      	ldr	r6, [r0, #28]
 800d1c8:	4604      	mov	r4, r0
 800d1ca:	460d      	mov	r5, r1
 800d1cc:	b976      	cbnz	r6, 800d1ec <_Balloc+0x28>
 800d1ce:	2010      	movs	r0, #16
 800d1d0:	f7ff ff44 	bl	800d05c <malloc>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	61e0      	str	r0, [r4, #28]
 800d1d8:	b920      	cbnz	r0, 800d1e4 <_Balloc+0x20>
 800d1da:	4b18      	ldr	r3, [pc, #96]	; (800d23c <_Balloc+0x78>)
 800d1dc:	4818      	ldr	r0, [pc, #96]	; (800d240 <_Balloc+0x7c>)
 800d1de:	216b      	movs	r1, #107	; 0x6b
 800d1e0:	f001 fd7e 	bl	800ece0 <__assert_func>
 800d1e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1e8:	6006      	str	r6, [r0, #0]
 800d1ea:	60c6      	str	r6, [r0, #12]
 800d1ec:	69e6      	ldr	r6, [r4, #28]
 800d1ee:	68f3      	ldr	r3, [r6, #12]
 800d1f0:	b183      	cbz	r3, 800d214 <_Balloc+0x50>
 800d1f2:	69e3      	ldr	r3, [r4, #28]
 800d1f4:	68db      	ldr	r3, [r3, #12]
 800d1f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d1fa:	b9b8      	cbnz	r0, 800d22c <_Balloc+0x68>
 800d1fc:	2101      	movs	r1, #1
 800d1fe:	fa01 f605 	lsl.w	r6, r1, r5
 800d202:	1d72      	adds	r2, r6, #5
 800d204:	0092      	lsls	r2, r2, #2
 800d206:	4620      	mov	r0, r4
 800d208:	f001 fd88 	bl	800ed1c <_calloc_r>
 800d20c:	b160      	cbz	r0, 800d228 <_Balloc+0x64>
 800d20e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d212:	e00e      	b.n	800d232 <_Balloc+0x6e>
 800d214:	2221      	movs	r2, #33	; 0x21
 800d216:	2104      	movs	r1, #4
 800d218:	4620      	mov	r0, r4
 800d21a:	f001 fd7f 	bl	800ed1c <_calloc_r>
 800d21e:	69e3      	ldr	r3, [r4, #28]
 800d220:	60f0      	str	r0, [r6, #12]
 800d222:	68db      	ldr	r3, [r3, #12]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d1e4      	bne.n	800d1f2 <_Balloc+0x2e>
 800d228:	2000      	movs	r0, #0
 800d22a:	bd70      	pop	{r4, r5, r6, pc}
 800d22c:	6802      	ldr	r2, [r0, #0]
 800d22e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d232:	2300      	movs	r3, #0
 800d234:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d238:	e7f7      	b.n	800d22a <_Balloc+0x66>
 800d23a:	bf00      	nop
 800d23c:	08011157 	.word	0x08011157
 800d240:	080111d7 	.word	0x080111d7

0800d244 <_Bfree>:
 800d244:	b570      	push	{r4, r5, r6, lr}
 800d246:	69c6      	ldr	r6, [r0, #28]
 800d248:	4605      	mov	r5, r0
 800d24a:	460c      	mov	r4, r1
 800d24c:	b976      	cbnz	r6, 800d26c <_Bfree+0x28>
 800d24e:	2010      	movs	r0, #16
 800d250:	f7ff ff04 	bl	800d05c <malloc>
 800d254:	4602      	mov	r2, r0
 800d256:	61e8      	str	r0, [r5, #28]
 800d258:	b920      	cbnz	r0, 800d264 <_Bfree+0x20>
 800d25a:	4b09      	ldr	r3, [pc, #36]	; (800d280 <_Bfree+0x3c>)
 800d25c:	4809      	ldr	r0, [pc, #36]	; (800d284 <_Bfree+0x40>)
 800d25e:	218f      	movs	r1, #143	; 0x8f
 800d260:	f001 fd3e 	bl	800ece0 <__assert_func>
 800d264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d268:	6006      	str	r6, [r0, #0]
 800d26a:	60c6      	str	r6, [r0, #12]
 800d26c:	b13c      	cbz	r4, 800d27e <_Bfree+0x3a>
 800d26e:	69eb      	ldr	r3, [r5, #28]
 800d270:	6862      	ldr	r2, [r4, #4]
 800d272:	68db      	ldr	r3, [r3, #12]
 800d274:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d278:	6021      	str	r1, [r4, #0]
 800d27a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d27e:	bd70      	pop	{r4, r5, r6, pc}
 800d280:	08011157 	.word	0x08011157
 800d284:	080111d7 	.word	0x080111d7

0800d288 <__multadd>:
 800d288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d28c:	690d      	ldr	r5, [r1, #16]
 800d28e:	4607      	mov	r7, r0
 800d290:	460c      	mov	r4, r1
 800d292:	461e      	mov	r6, r3
 800d294:	f101 0c14 	add.w	ip, r1, #20
 800d298:	2000      	movs	r0, #0
 800d29a:	f8dc 3000 	ldr.w	r3, [ip]
 800d29e:	b299      	uxth	r1, r3
 800d2a0:	fb02 6101 	mla	r1, r2, r1, r6
 800d2a4:	0c1e      	lsrs	r6, r3, #16
 800d2a6:	0c0b      	lsrs	r3, r1, #16
 800d2a8:	fb02 3306 	mla	r3, r2, r6, r3
 800d2ac:	b289      	uxth	r1, r1
 800d2ae:	3001      	adds	r0, #1
 800d2b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d2b4:	4285      	cmp	r5, r0
 800d2b6:	f84c 1b04 	str.w	r1, [ip], #4
 800d2ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d2be:	dcec      	bgt.n	800d29a <__multadd+0x12>
 800d2c0:	b30e      	cbz	r6, 800d306 <__multadd+0x7e>
 800d2c2:	68a3      	ldr	r3, [r4, #8]
 800d2c4:	42ab      	cmp	r3, r5
 800d2c6:	dc19      	bgt.n	800d2fc <__multadd+0x74>
 800d2c8:	6861      	ldr	r1, [r4, #4]
 800d2ca:	4638      	mov	r0, r7
 800d2cc:	3101      	adds	r1, #1
 800d2ce:	f7ff ff79 	bl	800d1c4 <_Balloc>
 800d2d2:	4680      	mov	r8, r0
 800d2d4:	b928      	cbnz	r0, 800d2e2 <__multadd+0x5a>
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	4b0c      	ldr	r3, [pc, #48]	; (800d30c <__multadd+0x84>)
 800d2da:	480d      	ldr	r0, [pc, #52]	; (800d310 <__multadd+0x88>)
 800d2dc:	21ba      	movs	r1, #186	; 0xba
 800d2de:	f001 fcff 	bl	800ece0 <__assert_func>
 800d2e2:	6922      	ldr	r2, [r4, #16]
 800d2e4:	3202      	adds	r2, #2
 800d2e6:	f104 010c 	add.w	r1, r4, #12
 800d2ea:	0092      	lsls	r2, r2, #2
 800d2ec:	300c      	adds	r0, #12
 800d2ee:	f7fe ffd8 	bl	800c2a2 <memcpy>
 800d2f2:	4621      	mov	r1, r4
 800d2f4:	4638      	mov	r0, r7
 800d2f6:	f7ff ffa5 	bl	800d244 <_Bfree>
 800d2fa:	4644      	mov	r4, r8
 800d2fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d300:	3501      	adds	r5, #1
 800d302:	615e      	str	r6, [r3, #20]
 800d304:	6125      	str	r5, [r4, #16]
 800d306:	4620      	mov	r0, r4
 800d308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d30c:	080111c6 	.word	0x080111c6
 800d310:	080111d7 	.word	0x080111d7

0800d314 <__s2b>:
 800d314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d318:	460c      	mov	r4, r1
 800d31a:	4615      	mov	r5, r2
 800d31c:	461f      	mov	r7, r3
 800d31e:	2209      	movs	r2, #9
 800d320:	3308      	adds	r3, #8
 800d322:	4606      	mov	r6, r0
 800d324:	fb93 f3f2 	sdiv	r3, r3, r2
 800d328:	2100      	movs	r1, #0
 800d32a:	2201      	movs	r2, #1
 800d32c:	429a      	cmp	r2, r3
 800d32e:	db09      	blt.n	800d344 <__s2b+0x30>
 800d330:	4630      	mov	r0, r6
 800d332:	f7ff ff47 	bl	800d1c4 <_Balloc>
 800d336:	b940      	cbnz	r0, 800d34a <__s2b+0x36>
 800d338:	4602      	mov	r2, r0
 800d33a:	4b19      	ldr	r3, [pc, #100]	; (800d3a0 <__s2b+0x8c>)
 800d33c:	4819      	ldr	r0, [pc, #100]	; (800d3a4 <__s2b+0x90>)
 800d33e:	21d3      	movs	r1, #211	; 0xd3
 800d340:	f001 fcce 	bl	800ece0 <__assert_func>
 800d344:	0052      	lsls	r2, r2, #1
 800d346:	3101      	adds	r1, #1
 800d348:	e7f0      	b.n	800d32c <__s2b+0x18>
 800d34a:	9b08      	ldr	r3, [sp, #32]
 800d34c:	6143      	str	r3, [r0, #20]
 800d34e:	2d09      	cmp	r5, #9
 800d350:	f04f 0301 	mov.w	r3, #1
 800d354:	6103      	str	r3, [r0, #16]
 800d356:	dd16      	ble.n	800d386 <__s2b+0x72>
 800d358:	f104 0909 	add.w	r9, r4, #9
 800d35c:	46c8      	mov	r8, r9
 800d35e:	442c      	add	r4, r5
 800d360:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d364:	4601      	mov	r1, r0
 800d366:	3b30      	subs	r3, #48	; 0x30
 800d368:	220a      	movs	r2, #10
 800d36a:	4630      	mov	r0, r6
 800d36c:	f7ff ff8c 	bl	800d288 <__multadd>
 800d370:	45a0      	cmp	r8, r4
 800d372:	d1f5      	bne.n	800d360 <__s2b+0x4c>
 800d374:	f1a5 0408 	sub.w	r4, r5, #8
 800d378:	444c      	add	r4, r9
 800d37a:	1b2d      	subs	r5, r5, r4
 800d37c:	1963      	adds	r3, r4, r5
 800d37e:	42bb      	cmp	r3, r7
 800d380:	db04      	blt.n	800d38c <__s2b+0x78>
 800d382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d386:	340a      	adds	r4, #10
 800d388:	2509      	movs	r5, #9
 800d38a:	e7f6      	b.n	800d37a <__s2b+0x66>
 800d38c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d390:	4601      	mov	r1, r0
 800d392:	3b30      	subs	r3, #48	; 0x30
 800d394:	220a      	movs	r2, #10
 800d396:	4630      	mov	r0, r6
 800d398:	f7ff ff76 	bl	800d288 <__multadd>
 800d39c:	e7ee      	b.n	800d37c <__s2b+0x68>
 800d39e:	bf00      	nop
 800d3a0:	080111c6 	.word	0x080111c6
 800d3a4:	080111d7 	.word	0x080111d7

0800d3a8 <__hi0bits>:
 800d3a8:	0c03      	lsrs	r3, r0, #16
 800d3aa:	041b      	lsls	r3, r3, #16
 800d3ac:	b9d3      	cbnz	r3, 800d3e4 <__hi0bits+0x3c>
 800d3ae:	0400      	lsls	r0, r0, #16
 800d3b0:	2310      	movs	r3, #16
 800d3b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d3b6:	bf04      	itt	eq
 800d3b8:	0200      	lsleq	r0, r0, #8
 800d3ba:	3308      	addeq	r3, #8
 800d3bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d3c0:	bf04      	itt	eq
 800d3c2:	0100      	lsleq	r0, r0, #4
 800d3c4:	3304      	addeq	r3, #4
 800d3c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d3ca:	bf04      	itt	eq
 800d3cc:	0080      	lsleq	r0, r0, #2
 800d3ce:	3302      	addeq	r3, #2
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	db05      	blt.n	800d3e0 <__hi0bits+0x38>
 800d3d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d3d8:	f103 0301 	add.w	r3, r3, #1
 800d3dc:	bf08      	it	eq
 800d3de:	2320      	moveq	r3, #32
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	4770      	bx	lr
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	e7e4      	b.n	800d3b2 <__hi0bits+0xa>

0800d3e8 <__lo0bits>:
 800d3e8:	6803      	ldr	r3, [r0, #0]
 800d3ea:	f013 0207 	ands.w	r2, r3, #7
 800d3ee:	d00c      	beq.n	800d40a <__lo0bits+0x22>
 800d3f0:	07d9      	lsls	r1, r3, #31
 800d3f2:	d422      	bmi.n	800d43a <__lo0bits+0x52>
 800d3f4:	079a      	lsls	r2, r3, #30
 800d3f6:	bf49      	itett	mi
 800d3f8:	085b      	lsrmi	r3, r3, #1
 800d3fa:	089b      	lsrpl	r3, r3, #2
 800d3fc:	6003      	strmi	r3, [r0, #0]
 800d3fe:	2201      	movmi	r2, #1
 800d400:	bf5c      	itt	pl
 800d402:	6003      	strpl	r3, [r0, #0]
 800d404:	2202      	movpl	r2, #2
 800d406:	4610      	mov	r0, r2
 800d408:	4770      	bx	lr
 800d40a:	b299      	uxth	r1, r3
 800d40c:	b909      	cbnz	r1, 800d412 <__lo0bits+0x2a>
 800d40e:	0c1b      	lsrs	r3, r3, #16
 800d410:	2210      	movs	r2, #16
 800d412:	b2d9      	uxtb	r1, r3
 800d414:	b909      	cbnz	r1, 800d41a <__lo0bits+0x32>
 800d416:	3208      	adds	r2, #8
 800d418:	0a1b      	lsrs	r3, r3, #8
 800d41a:	0719      	lsls	r1, r3, #28
 800d41c:	bf04      	itt	eq
 800d41e:	091b      	lsreq	r3, r3, #4
 800d420:	3204      	addeq	r2, #4
 800d422:	0799      	lsls	r1, r3, #30
 800d424:	bf04      	itt	eq
 800d426:	089b      	lsreq	r3, r3, #2
 800d428:	3202      	addeq	r2, #2
 800d42a:	07d9      	lsls	r1, r3, #31
 800d42c:	d403      	bmi.n	800d436 <__lo0bits+0x4e>
 800d42e:	085b      	lsrs	r3, r3, #1
 800d430:	f102 0201 	add.w	r2, r2, #1
 800d434:	d003      	beq.n	800d43e <__lo0bits+0x56>
 800d436:	6003      	str	r3, [r0, #0]
 800d438:	e7e5      	b.n	800d406 <__lo0bits+0x1e>
 800d43a:	2200      	movs	r2, #0
 800d43c:	e7e3      	b.n	800d406 <__lo0bits+0x1e>
 800d43e:	2220      	movs	r2, #32
 800d440:	e7e1      	b.n	800d406 <__lo0bits+0x1e>
	...

0800d444 <__i2b>:
 800d444:	b510      	push	{r4, lr}
 800d446:	460c      	mov	r4, r1
 800d448:	2101      	movs	r1, #1
 800d44a:	f7ff febb 	bl	800d1c4 <_Balloc>
 800d44e:	4602      	mov	r2, r0
 800d450:	b928      	cbnz	r0, 800d45e <__i2b+0x1a>
 800d452:	4b05      	ldr	r3, [pc, #20]	; (800d468 <__i2b+0x24>)
 800d454:	4805      	ldr	r0, [pc, #20]	; (800d46c <__i2b+0x28>)
 800d456:	f240 1145 	movw	r1, #325	; 0x145
 800d45a:	f001 fc41 	bl	800ece0 <__assert_func>
 800d45e:	2301      	movs	r3, #1
 800d460:	6144      	str	r4, [r0, #20]
 800d462:	6103      	str	r3, [r0, #16]
 800d464:	bd10      	pop	{r4, pc}
 800d466:	bf00      	nop
 800d468:	080111c6 	.word	0x080111c6
 800d46c:	080111d7 	.word	0x080111d7

0800d470 <__multiply>:
 800d470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d474:	4691      	mov	r9, r2
 800d476:	690a      	ldr	r2, [r1, #16]
 800d478:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d47c:	429a      	cmp	r2, r3
 800d47e:	bfb8      	it	lt
 800d480:	460b      	movlt	r3, r1
 800d482:	460c      	mov	r4, r1
 800d484:	bfbc      	itt	lt
 800d486:	464c      	movlt	r4, r9
 800d488:	4699      	movlt	r9, r3
 800d48a:	6927      	ldr	r7, [r4, #16]
 800d48c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d490:	68a3      	ldr	r3, [r4, #8]
 800d492:	6861      	ldr	r1, [r4, #4]
 800d494:	eb07 060a 	add.w	r6, r7, sl
 800d498:	42b3      	cmp	r3, r6
 800d49a:	b085      	sub	sp, #20
 800d49c:	bfb8      	it	lt
 800d49e:	3101      	addlt	r1, #1
 800d4a0:	f7ff fe90 	bl	800d1c4 <_Balloc>
 800d4a4:	b930      	cbnz	r0, 800d4b4 <__multiply+0x44>
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	4b44      	ldr	r3, [pc, #272]	; (800d5bc <__multiply+0x14c>)
 800d4aa:	4845      	ldr	r0, [pc, #276]	; (800d5c0 <__multiply+0x150>)
 800d4ac:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d4b0:	f001 fc16 	bl	800ece0 <__assert_func>
 800d4b4:	f100 0514 	add.w	r5, r0, #20
 800d4b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d4bc:	462b      	mov	r3, r5
 800d4be:	2200      	movs	r2, #0
 800d4c0:	4543      	cmp	r3, r8
 800d4c2:	d321      	bcc.n	800d508 <__multiply+0x98>
 800d4c4:	f104 0314 	add.w	r3, r4, #20
 800d4c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d4cc:	f109 0314 	add.w	r3, r9, #20
 800d4d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d4d4:	9202      	str	r2, [sp, #8]
 800d4d6:	1b3a      	subs	r2, r7, r4
 800d4d8:	3a15      	subs	r2, #21
 800d4da:	f022 0203 	bic.w	r2, r2, #3
 800d4de:	3204      	adds	r2, #4
 800d4e0:	f104 0115 	add.w	r1, r4, #21
 800d4e4:	428f      	cmp	r7, r1
 800d4e6:	bf38      	it	cc
 800d4e8:	2204      	movcc	r2, #4
 800d4ea:	9201      	str	r2, [sp, #4]
 800d4ec:	9a02      	ldr	r2, [sp, #8]
 800d4ee:	9303      	str	r3, [sp, #12]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d80c      	bhi.n	800d50e <__multiply+0x9e>
 800d4f4:	2e00      	cmp	r6, #0
 800d4f6:	dd03      	ble.n	800d500 <__multiply+0x90>
 800d4f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d05b      	beq.n	800d5b8 <__multiply+0x148>
 800d500:	6106      	str	r6, [r0, #16]
 800d502:	b005      	add	sp, #20
 800d504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d508:	f843 2b04 	str.w	r2, [r3], #4
 800d50c:	e7d8      	b.n	800d4c0 <__multiply+0x50>
 800d50e:	f8b3 a000 	ldrh.w	sl, [r3]
 800d512:	f1ba 0f00 	cmp.w	sl, #0
 800d516:	d024      	beq.n	800d562 <__multiply+0xf2>
 800d518:	f104 0e14 	add.w	lr, r4, #20
 800d51c:	46a9      	mov	r9, r5
 800d51e:	f04f 0c00 	mov.w	ip, #0
 800d522:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d526:	f8d9 1000 	ldr.w	r1, [r9]
 800d52a:	fa1f fb82 	uxth.w	fp, r2
 800d52e:	b289      	uxth	r1, r1
 800d530:	fb0a 110b 	mla	r1, sl, fp, r1
 800d534:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d538:	f8d9 2000 	ldr.w	r2, [r9]
 800d53c:	4461      	add	r1, ip
 800d53e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d542:	fb0a c20b 	mla	r2, sl, fp, ip
 800d546:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d54a:	b289      	uxth	r1, r1
 800d54c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d550:	4577      	cmp	r7, lr
 800d552:	f849 1b04 	str.w	r1, [r9], #4
 800d556:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d55a:	d8e2      	bhi.n	800d522 <__multiply+0xb2>
 800d55c:	9a01      	ldr	r2, [sp, #4]
 800d55e:	f845 c002 	str.w	ip, [r5, r2]
 800d562:	9a03      	ldr	r2, [sp, #12]
 800d564:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d568:	3304      	adds	r3, #4
 800d56a:	f1b9 0f00 	cmp.w	r9, #0
 800d56e:	d021      	beq.n	800d5b4 <__multiply+0x144>
 800d570:	6829      	ldr	r1, [r5, #0]
 800d572:	f104 0c14 	add.w	ip, r4, #20
 800d576:	46ae      	mov	lr, r5
 800d578:	f04f 0a00 	mov.w	sl, #0
 800d57c:	f8bc b000 	ldrh.w	fp, [ip]
 800d580:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d584:	fb09 220b 	mla	r2, r9, fp, r2
 800d588:	4452      	add	r2, sl
 800d58a:	b289      	uxth	r1, r1
 800d58c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d590:	f84e 1b04 	str.w	r1, [lr], #4
 800d594:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d598:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d59c:	f8be 1000 	ldrh.w	r1, [lr]
 800d5a0:	fb09 110a 	mla	r1, r9, sl, r1
 800d5a4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d5a8:	4567      	cmp	r7, ip
 800d5aa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d5ae:	d8e5      	bhi.n	800d57c <__multiply+0x10c>
 800d5b0:	9a01      	ldr	r2, [sp, #4]
 800d5b2:	50a9      	str	r1, [r5, r2]
 800d5b4:	3504      	adds	r5, #4
 800d5b6:	e799      	b.n	800d4ec <__multiply+0x7c>
 800d5b8:	3e01      	subs	r6, #1
 800d5ba:	e79b      	b.n	800d4f4 <__multiply+0x84>
 800d5bc:	080111c6 	.word	0x080111c6
 800d5c0:	080111d7 	.word	0x080111d7

0800d5c4 <__pow5mult>:
 800d5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5c8:	4615      	mov	r5, r2
 800d5ca:	f012 0203 	ands.w	r2, r2, #3
 800d5ce:	4606      	mov	r6, r0
 800d5d0:	460f      	mov	r7, r1
 800d5d2:	d007      	beq.n	800d5e4 <__pow5mult+0x20>
 800d5d4:	4c25      	ldr	r4, [pc, #148]	; (800d66c <__pow5mult+0xa8>)
 800d5d6:	3a01      	subs	r2, #1
 800d5d8:	2300      	movs	r3, #0
 800d5da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d5de:	f7ff fe53 	bl	800d288 <__multadd>
 800d5e2:	4607      	mov	r7, r0
 800d5e4:	10ad      	asrs	r5, r5, #2
 800d5e6:	d03d      	beq.n	800d664 <__pow5mult+0xa0>
 800d5e8:	69f4      	ldr	r4, [r6, #28]
 800d5ea:	b97c      	cbnz	r4, 800d60c <__pow5mult+0x48>
 800d5ec:	2010      	movs	r0, #16
 800d5ee:	f7ff fd35 	bl	800d05c <malloc>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	61f0      	str	r0, [r6, #28]
 800d5f6:	b928      	cbnz	r0, 800d604 <__pow5mult+0x40>
 800d5f8:	4b1d      	ldr	r3, [pc, #116]	; (800d670 <__pow5mult+0xac>)
 800d5fa:	481e      	ldr	r0, [pc, #120]	; (800d674 <__pow5mult+0xb0>)
 800d5fc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d600:	f001 fb6e 	bl	800ece0 <__assert_func>
 800d604:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d608:	6004      	str	r4, [r0, #0]
 800d60a:	60c4      	str	r4, [r0, #12]
 800d60c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d610:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d614:	b94c      	cbnz	r4, 800d62a <__pow5mult+0x66>
 800d616:	f240 2171 	movw	r1, #625	; 0x271
 800d61a:	4630      	mov	r0, r6
 800d61c:	f7ff ff12 	bl	800d444 <__i2b>
 800d620:	2300      	movs	r3, #0
 800d622:	f8c8 0008 	str.w	r0, [r8, #8]
 800d626:	4604      	mov	r4, r0
 800d628:	6003      	str	r3, [r0, #0]
 800d62a:	f04f 0900 	mov.w	r9, #0
 800d62e:	07eb      	lsls	r3, r5, #31
 800d630:	d50a      	bpl.n	800d648 <__pow5mult+0x84>
 800d632:	4639      	mov	r1, r7
 800d634:	4622      	mov	r2, r4
 800d636:	4630      	mov	r0, r6
 800d638:	f7ff ff1a 	bl	800d470 <__multiply>
 800d63c:	4639      	mov	r1, r7
 800d63e:	4680      	mov	r8, r0
 800d640:	4630      	mov	r0, r6
 800d642:	f7ff fdff 	bl	800d244 <_Bfree>
 800d646:	4647      	mov	r7, r8
 800d648:	106d      	asrs	r5, r5, #1
 800d64a:	d00b      	beq.n	800d664 <__pow5mult+0xa0>
 800d64c:	6820      	ldr	r0, [r4, #0]
 800d64e:	b938      	cbnz	r0, 800d660 <__pow5mult+0x9c>
 800d650:	4622      	mov	r2, r4
 800d652:	4621      	mov	r1, r4
 800d654:	4630      	mov	r0, r6
 800d656:	f7ff ff0b 	bl	800d470 <__multiply>
 800d65a:	6020      	str	r0, [r4, #0]
 800d65c:	f8c0 9000 	str.w	r9, [r0]
 800d660:	4604      	mov	r4, r0
 800d662:	e7e4      	b.n	800d62e <__pow5mult+0x6a>
 800d664:	4638      	mov	r0, r7
 800d666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d66a:	bf00      	nop
 800d66c:	08011320 	.word	0x08011320
 800d670:	08011157 	.word	0x08011157
 800d674:	080111d7 	.word	0x080111d7

0800d678 <__lshift>:
 800d678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d67c:	460c      	mov	r4, r1
 800d67e:	6849      	ldr	r1, [r1, #4]
 800d680:	6923      	ldr	r3, [r4, #16]
 800d682:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d686:	68a3      	ldr	r3, [r4, #8]
 800d688:	4607      	mov	r7, r0
 800d68a:	4691      	mov	r9, r2
 800d68c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d690:	f108 0601 	add.w	r6, r8, #1
 800d694:	42b3      	cmp	r3, r6
 800d696:	db0b      	blt.n	800d6b0 <__lshift+0x38>
 800d698:	4638      	mov	r0, r7
 800d69a:	f7ff fd93 	bl	800d1c4 <_Balloc>
 800d69e:	4605      	mov	r5, r0
 800d6a0:	b948      	cbnz	r0, 800d6b6 <__lshift+0x3e>
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	4b28      	ldr	r3, [pc, #160]	; (800d748 <__lshift+0xd0>)
 800d6a6:	4829      	ldr	r0, [pc, #164]	; (800d74c <__lshift+0xd4>)
 800d6a8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d6ac:	f001 fb18 	bl	800ece0 <__assert_func>
 800d6b0:	3101      	adds	r1, #1
 800d6b2:	005b      	lsls	r3, r3, #1
 800d6b4:	e7ee      	b.n	800d694 <__lshift+0x1c>
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	f100 0114 	add.w	r1, r0, #20
 800d6bc:	f100 0210 	add.w	r2, r0, #16
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	4553      	cmp	r3, sl
 800d6c4:	db33      	blt.n	800d72e <__lshift+0xb6>
 800d6c6:	6920      	ldr	r0, [r4, #16]
 800d6c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d6cc:	f104 0314 	add.w	r3, r4, #20
 800d6d0:	f019 091f 	ands.w	r9, r9, #31
 800d6d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d6d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d6dc:	d02b      	beq.n	800d736 <__lshift+0xbe>
 800d6de:	f1c9 0e20 	rsb	lr, r9, #32
 800d6e2:	468a      	mov	sl, r1
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	6818      	ldr	r0, [r3, #0]
 800d6e8:	fa00 f009 	lsl.w	r0, r0, r9
 800d6ec:	4310      	orrs	r0, r2
 800d6ee:	f84a 0b04 	str.w	r0, [sl], #4
 800d6f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6f6:	459c      	cmp	ip, r3
 800d6f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d6fc:	d8f3      	bhi.n	800d6e6 <__lshift+0x6e>
 800d6fe:	ebac 0304 	sub.w	r3, ip, r4
 800d702:	3b15      	subs	r3, #21
 800d704:	f023 0303 	bic.w	r3, r3, #3
 800d708:	3304      	adds	r3, #4
 800d70a:	f104 0015 	add.w	r0, r4, #21
 800d70e:	4584      	cmp	ip, r0
 800d710:	bf38      	it	cc
 800d712:	2304      	movcc	r3, #4
 800d714:	50ca      	str	r2, [r1, r3]
 800d716:	b10a      	cbz	r2, 800d71c <__lshift+0xa4>
 800d718:	f108 0602 	add.w	r6, r8, #2
 800d71c:	3e01      	subs	r6, #1
 800d71e:	4638      	mov	r0, r7
 800d720:	612e      	str	r6, [r5, #16]
 800d722:	4621      	mov	r1, r4
 800d724:	f7ff fd8e 	bl	800d244 <_Bfree>
 800d728:	4628      	mov	r0, r5
 800d72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d72e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d732:	3301      	adds	r3, #1
 800d734:	e7c5      	b.n	800d6c2 <__lshift+0x4a>
 800d736:	3904      	subs	r1, #4
 800d738:	f853 2b04 	ldr.w	r2, [r3], #4
 800d73c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d740:	459c      	cmp	ip, r3
 800d742:	d8f9      	bhi.n	800d738 <__lshift+0xc0>
 800d744:	e7ea      	b.n	800d71c <__lshift+0xa4>
 800d746:	bf00      	nop
 800d748:	080111c6 	.word	0x080111c6
 800d74c:	080111d7 	.word	0x080111d7

0800d750 <__mcmp>:
 800d750:	b530      	push	{r4, r5, lr}
 800d752:	6902      	ldr	r2, [r0, #16]
 800d754:	690c      	ldr	r4, [r1, #16]
 800d756:	1b12      	subs	r2, r2, r4
 800d758:	d10e      	bne.n	800d778 <__mcmp+0x28>
 800d75a:	f100 0314 	add.w	r3, r0, #20
 800d75e:	3114      	adds	r1, #20
 800d760:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d764:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d768:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d76c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d770:	42a5      	cmp	r5, r4
 800d772:	d003      	beq.n	800d77c <__mcmp+0x2c>
 800d774:	d305      	bcc.n	800d782 <__mcmp+0x32>
 800d776:	2201      	movs	r2, #1
 800d778:	4610      	mov	r0, r2
 800d77a:	bd30      	pop	{r4, r5, pc}
 800d77c:	4283      	cmp	r3, r0
 800d77e:	d3f3      	bcc.n	800d768 <__mcmp+0x18>
 800d780:	e7fa      	b.n	800d778 <__mcmp+0x28>
 800d782:	f04f 32ff 	mov.w	r2, #4294967295
 800d786:	e7f7      	b.n	800d778 <__mcmp+0x28>

0800d788 <__mdiff>:
 800d788:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d78c:	460c      	mov	r4, r1
 800d78e:	4606      	mov	r6, r0
 800d790:	4611      	mov	r1, r2
 800d792:	4620      	mov	r0, r4
 800d794:	4690      	mov	r8, r2
 800d796:	f7ff ffdb 	bl	800d750 <__mcmp>
 800d79a:	1e05      	subs	r5, r0, #0
 800d79c:	d110      	bne.n	800d7c0 <__mdiff+0x38>
 800d79e:	4629      	mov	r1, r5
 800d7a0:	4630      	mov	r0, r6
 800d7a2:	f7ff fd0f 	bl	800d1c4 <_Balloc>
 800d7a6:	b930      	cbnz	r0, 800d7b6 <__mdiff+0x2e>
 800d7a8:	4b3a      	ldr	r3, [pc, #232]	; (800d894 <__mdiff+0x10c>)
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	f240 2137 	movw	r1, #567	; 0x237
 800d7b0:	4839      	ldr	r0, [pc, #228]	; (800d898 <__mdiff+0x110>)
 800d7b2:	f001 fa95 	bl	800ece0 <__assert_func>
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d7bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7c0:	bfa4      	itt	ge
 800d7c2:	4643      	movge	r3, r8
 800d7c4:	46a0      	movge	r8, r4
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d7cc:	bfa6      	itte	ge
 800d7ce:	461c      	movge	r4, r3
 800d7d0:	2500      	movge	r5, #0
 800d7d2:	2501      	movlt	r5, #1
 800d7d4:	f7ff fcf6 	bl	800d1c4 <_Balloc>
 800d7d8:	b920      	cbnz	r0, 800d7e4 <__mdiff+0x5c>
 800d7da:	4b2e      	ldr	r3, [pc, #184]	; (800d894 <__mdiff+0x10c>)
 800d7dc:	4602      	mov	r2, r0
 800d7de:	f240 2145 	movw	r1, #581	; 0x245
 800d7e2:	e7e5      	b.n	800d7b0 <__mdiff+0x28>
 800d7e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d7e8:	6926      	ldr	r6, [r4, #16]
 800d7ea:	60c5      	str	r5, [r0, #12]
 800d7ec:	f104 0914 	add.w	r9, r4, #20
 800d7f0:	f108 0514 	add.w	r5, r8, #20
 800d7f4:	f100 0e14 	add.w	lr, r0, #20
 800d7f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d7fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d800:	f108 0210 	add.w	r2, r8, #16
 800d804:	46f2      	mov	sl, lr
 800d806:	2100      	movs	r1, #0
 800d808:	f859 3b04 	ldr.w	r3, [r9], #4
 800d80c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d810:	fa11 f88b 	uxtah	r8, r1, fp
 800d814:	b299      	uxth	r1, r3
 800d816:	0c1b      	lsrs	r3, r3, #16
 800d818:	eba8 0801 	sub.w	r8, r8, r1
 800d81c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d820:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d824:	fa1f f888 	uxth.w	r8, r8
 800d828:	1419      	asrs	r1, r3, #16
 800d82a:	454e      	cmp	r6, r9
 800d82c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d830:	f84a 3b04 	str.w	r3, [sl], #4
 800d834:	d8e8      	bhi.n	800d808 <__mdiff+0x80>
 800d836:	1b33      	subs	r3, r6, r4
 800d838:	3b15      	subs	r3, #21
 800d83a:	f023 0303 	bic.w	r3, r3, #3
 800d83e:	3304      	adds	r3, #4
 800d840:	3415      	adds	r4, #21
 800d842:	42a6      	cmp	r6, r4
 800d844:	bf38      	it	cc
 800d846:	2304      	movcc	r3, #4
 800d848:	441d      	add	r5, r3
 800d84a:	4473      	add	r3, lr
 800d84c:	469e      	mov	lr, r3
 800d84e:	462e      	mov	r6, r5
 800d850:	4566      	cmp	r6, ip
 800d852:	d30e      	bcc.n	800d872 <__mdiff+0xea>
 800d854:	f10c 0203 	add.w	r2, ip, #3
 800d858:	1b52      	subs	r2, r2, r5
 800d85a:	f022 0203 	bic.w	r2, r2, #3
 800d85e:	3d03      	subs	r5, #3
 800d860:	45ac      	cmp	ip, r5
 800d862:	bf38      	it	cc
 800d864:	2200      	movcc	r2, #0
 800d866:	4413      	add	r3, r2
 800d868:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d86c:	b17a      	cbz	r2, 800d88e <__mdiff+0x106>
 800d86e:	6107      	str	r7, [r0, #16]
 800d870:	e7a4      	b.n	800d7bc <__mdiff+0x34>
 800d872:	f856 8b04 	ldr.w	r8, [r6], #4
 800d876:	fa11 f288 	uxtah	r2, r1, r8
 800d87a:	1414      	asrs	r4, r2, #16
 800d87c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d880:	b292      	uxth	r2, r2
 800d882:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d886:	f84e 2b04 	str.w	r2, [lr], #4
 800d88a:	1421      	asrs	r1, r4, #16
 800d88c:	e7e0      	b.n	800d850 <__mdiff+0xc8>
 800d88e:	3f01      	subs	r7, #1
 800d890:	e7ea      	b.n	800d868 <__mdiff+0xe0>
 800d892:	bf00      	nop
 800d894:	080111c6 	.word	0x080111c6
 800d898:	080111d7 	.word	0x080111d7

0800d89c <__ulp>:
 800d89c:	b082      	sub	sp, #8
 800d89e:	ed8d 0b00 	vstr	d0, [sp]
 800d8a2:	9a01      	ldr	r2, [sp, #4]
 800d8a4:	4b0f      	ldr	r3, [pc, #60]	; (800d8e4 <__ulp+0x48>)
 800d8a6:	4013      	ands	r3, r2
 800d8a8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	dc08      	bgt.n	800d8c2 <__ulp+0x26>
 800d8b0:	425b      	negs	r3, r3
 800d8b2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d8b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d8ba:	da04      	bge.n	800d8c6 <__ulp+0x2a>
 800d8bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d8c0:	4113      	asrs	r3, r2
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	e008      	b.n	800d8d8 <__ulp+0x3c>
 800d8c6:	f1a2 0314 	sub.w	r3, r2, #20
 800d8ca:	2b1e      	cmp	r3, #30
 800d8cc:	bfda      	itte	le
 800d8ce:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d8d2:	40da      	lsrle	r2, r3
 800d8d4:	2201      	movgt	r2, #1
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	4619      	mov	r1, r3
 800d8da:	4610      	mov	r0, r2
 800d8dc:	ec41 0b10 	vmov	d0, r0, r1
 800d8e0:	b002      	add	sp, #8
 800d8e2:	4770      	bx	lr
 800d8e4:	7ff00000 	.word	0x7ff00000

0800d8e8 <__b2d>:
 800d8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ec:	6906      	ldr	r6, [r0, #16]
 800d8ee:	f100 0814 	add.w	r8, r0, #20
 800d8f2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d8f6:	1f37      	subs	r7, r6, #4
 800d8f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d8fc:	4610      	mov	r0, r2
 800d8fe:	f7ff fd53 	bl	800d3a8 <__hi0bits>
 800d902:	f1c0 0320 	rsb	r3, r0, #32
 800d906:	280a      	cmp	r0, #10
 800d908:	600b      	str	r3, [r1, #0]
 800d90a:	491b      	ldr	r1, [pc, #108]	; (800d978 <__b2d+0x90>)
 800d90c:	dc15      	bgt.n	800d93a <__b2d+0x52>
 800d90e:	f1c0 0c0b 	rsb	ip, r0, #11
 800d912:	fa22 f30c 	lsr.w	r3, r2, ip
 800d916:	45b8      	cmp	r8, r7
 800d918:	ea43 0501 	orr.w	r5, r3, r1
 800d91c:	bf34      	ite	cc
 800d91e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d922:	2300      	movcs	r3, #0
 800d924:	3015      	adds	r0, #21
 800d926:	fa02 f000 	lsl.w	r0, r2, r0
 800d92a:	fa23 f30c 	lsr.w	r3, r3, ip
 800d92e:	4303      	orrs	r3, r0
 800d930:	461c      	mov	r4, r3
 800d932:	ec45 4b10 	vmov	d0, r4, r5
 800d936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d93a:	45b8      	cmp	r8, r7
 800d93c:	bf3a      	itte	cc
 800d93e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d942:	f1a6 0708 	subcc.w	r7, r6, #8
 800d946:	2300      	movcs	r3, #0
 800d948:	380b      	subs	r0, #11
 800d94a:	d012      	beq.n	800d972 <__b2d+0x8a>
 800d94c:	f1c0 0120 	rsb	r1, r0, #32
 800d950:	fa23 f401 	lsr.w	r4, r3, r1
 800d954:	4082      	lsls	r2, r0
 800d956:	4322      	orrs	r2, r4
 800d958:	4547      	cmp	r7, r8
 800d95a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800d95e:	bf8c      	ite	hi
 800d960:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d964:	2200      	movls	r2, #0
 800d966:	4083      	lsls	r3, r0
 800d968:	40ca      	lsrs	r2, r1
 800d96a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d96e:	4313      	orrs	r3, r2
 800d970:	e7de      	b.n	800d930 <__b2d+0x48>
 800d972:	ea42 0501 	orr.w	r5, r2, r1
 800d976:	e7db      	b.n	800d930 <__b2d+0x48>
 800d978:	3ff00000 	.word	0x3ff00000

0800d97c <__d2b>:
 800d97c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d980:	460f      	mov	r7, r1
 800d982:	2101      	movs	r1, #1
 800d984:	ec59 8b10 	vmov	r8, r9, d0
 800d988:	4616      	mov	r6, r2
 800d98a:	f7ff fc1b 	bl	800d1c4 <_Balloc>
 800d98e:	4604      	mov	r4, r0
 800d990:	b930      	cbnz	r0, 800d9a0 <__d2b+0x24>
 800d992:	4602      	mov	r2, r0
 800d994:	4b24      	ldr	r3, [pc, #144]	; (800da28 <__d2b+0xac>)
 800d996:	4825      	ldr	r0, [pc, #148]	; (800da2c <__d2b+0xb0>)
 800d998:	f240 310f 	movw	r1, #783	; 0x30f
 800d99c:	f001 f9a0 	bl	800ece0 <__assert_func>
 800d9a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d9a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d9a8:	bb2d      	cbnz	r5, 800d9f6 <__d2b+0x7a>
 800d9aa:	9301      	str	r3, [sp, #4]
 800d9ac:	f1b8 0300 	subs.w	r3, r8, #0
 800d9b0:	d026      	beq.n	800da00 <__d2b+0x84>
 800d9b2:	4668      	mov	r0, sp
 800d9b4:	9300      	str	r3, [sp, #0]
 800d9b6:	f7ff fd17 	bl	800d3e8 <__lo0bits>
 800d9ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d9be:	b1e8      	cbz	r0, 800d9fc <__d2b+0x80>
 800d9c0:	f1c0 0320 	rsb	r3, r0, #32
 800d9c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d9c8:	430b      	orrs	r3, r1
 800d9ca:	40c2      	lsrs	r2, r0
 800d9cc:	6163      	str	r3, [r4, #20]
 800d9ce:	9201      	str	r2, [sp, #4]
 800d9d0:	9b01      	ldr	r3, [sp, #4]
 800d9d2:	61a3      	str	r3, [r4, #24]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	bf14      	ite	ne
 800d9d8:	2202      	movne	r2, #2
 800d9da:	2201      	moveq	r2, #1
 800d9dc:	6122      	str	r2, [r4, #16]
 800d9de:	b1bd      	cbz	r5, 800da10 <__d2b+0x94>
 800d9e0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d9e4:	4405      	add	r5, r0
 800d9e6:	603d      	str	r5, [r7, #0]
 800d9e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d9ec:	6030      	str	r0, [r6, #0]
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	b003      	add	sp, #12
 800d9f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9fa:	e7d6      	b.n	800d9aa <__d2b+0x2e>
 800d9fc:	6161      	str	r1, [r4, #20]
 800d9fe:	e7e7      	b.n	800d9d0 <__d2b+0x54>
 800da00:	a801      	add	r0, sp, #4
 800da02:	f7ff fcf1 	bl	800d3e8 <__lo0bits>
 800da06:	9b01      	ldr	r3, [sp, #4]
 800da08:	6163      	str	r3, [r4, #20]
 800da0a:	3020      	adds	r0, #32
 800da0c:	2201      	movs	r2, #1
 800da0e:	e7e5      	b.n	800d9dc <__d2b+0x60>
 800da10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800da14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800da18:	6038      	str	r0, [r7, #0]
 800da1a:	6918      	ldr	r0, [r3, #16]
 800da1c:	f7ff fcc4 	bl	800d3a8 <__hi0bits>
 800da20:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800da24:	e7e2      	b.n	800d9ec <__d2b+0x70>
 800da26:	bf00      	nop
 800da28:	080111c6 	.word	0x080111c6
 800da2c:	080111d7 	.word	0x080111d7

0800da30 <__ratio>:
 800da30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da34:	4688      	mov	r8, r1
 800da36:	4669      	mov	r1, sp
 800da38:	4681      	mov	r9, r0
 800da3a:	f7ff ff55 	bl	800d8e8 <__b2d>
 800da3e:	a901      	add	r1, sp, #4
 800da40:	4640      	mov	r0, r8
 800da42:	ec55 4b10 	vmov	r4, r5, d0
 800da46:	f7ff ff4f 	bl	800d8e8 <__b2d>
 800da4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800da4e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800da52:	eba3 0c02 	sub.w	ip, r3, r2
 800da56:	e9dd 3200 	ldrd	r3, r2, [sp]
 800da5a:	1a9b      	subs	r3, r3, r2
 800da5c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800da60:	ec51 0b10 	vmov	r0, r1, d0
 800da64:	2b00      	cmp	r3, #0
 800da66:	bfd6      	itet	le
 800da68:	460a      	movle	r2, r1
 800da6a:	462a      	movgt	r2, r5
 800da6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800da70:	468b      	mov	fp, r1
 800da72:	462f      	mov	r7, r5
 800da74:	bfd4      	ite	le
 800da76:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800da7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800da7e:	4620      	mov	r0, r4
 800da80:	ee10 2a10 	vmov	r2, s0
 800da84:	465b      	mov	r3, fp
 800da86:	4639      	mov	r1, r7
 800da88:	f7f2 fee0 	bl	800084c <__aeabi_ddiv>
 800da8c:	ec41 0b10 	vmov	d0, r0, r1
 800da90:	b003      	add	sp, #12
 800da92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800da96 <__copybits>:
 800da96:	3901      	subs	r1, #1
 800da98:	b570      	push	{r4, r5, r6, lr}
 800da9a:	1149      	asrs	r1, r1, #5
 800da9c:	6914      	ldr	r4, [r2, #16]
 800da9e:	3101      	adds	r1, #1
 800daa0:	f102 0314 	add.w	r3, r2, #20
 800daa4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800daa8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800daac:	1f05      	subs	r5, r0, #4
 800daae:	42a3      	cmp	r3, r4
 800dab0:	d30c      	bcc.n	800dacc <__copybits+0x36>
 800dab2:	1aa3      	subs	r3, r4, r2
 800dab4:	3b11      	subs	r3, #17
 800dab6:	f023 0303 	bic.w	r3, r3, #3
 800daba:	3211      	adds	r2, #17
 800dabc:	42a2      	cmp	r2, r4
 800dabe:	bf88      	it	hi
 800dac0:	2300      	movhi	r3, #0
 800dac2:	4418      	add	r0, r3
 800dac4:	2300      	movs	r3, #0
 800dac6:	4288      	cmp	r0, r1
 800dac8:	d305      	bcc.n	800dad6 <__copybits+0x40>
 800daca:	bd70      	pop	{r4, r5, r6, pc}
 800dacc:	f853 6b04 	ldr.w	r6, [r3], #4
 800dad0:	f845 6f04 	str.w	r6, [r5, #4]!
 800dad4:	e7eb      	b.n	800daae <__copybits+0x18>
 800dad6:	f840 3b04 	str.w	r3, [r0], #4
 800dada:	e7f4      	b.n	800dac6 <__copybits+0x30>

0800dadc <__any_on>:
 800dadc:	f100 0214 	add.w	r2, r0, #20
 800dae0:	6900      	ldr	r0, [r0, #16]
 800dae2:	114b      	asrs	r3, r1, #5
 800dae4:	4298      	cmp	r0, r3
 800dae6:	b510      	push	{r4, lr}
 800dae8:	db11      	blt.n	800db0e <__any_on+0x32>
 800daea:	dd0a      	ble.n	800db02 <__any_on+0x26>
 800daec:	f011 011f 	ands.w	r1, r1, #31
 800daf0:	d007      	beq.n	800db02 <__any_on+0x26>
 800daf2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800daf6:	fa24 f001 	lsr.w	r0, r4, r1
 800dafa:	fa00 f101 	lsl.w	r1, r0, r1
 800dafe:	428c      	cmp	r4, r1
 800db00:	d10b      	bne.n	800db1a <__any_on+0x3e>
 800db02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800db06:	4293      	cmp	r3, r2
 800db08:	d803      	bhi.n	800db12 <__any_on+0x36>
 800db0a:	2000      	movs	r0, #0
 800db0c:	bd10      	pop	{r4, pc}
 800db0e:	4603      	mov	r3, r0
 800db10:	e7f7      	b.n	800db02 <__any_on+0x26>
 800db12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800db16:	2900      	cmp	r1, #0
 800db18:	d0f5      	beq.n	800db06 <__any_on+0x2a>
 800db1a:	2001      	movs	r0, #1
 800db1c:	e7f6      	b.n	800db0c <__any_on+0x30>

0800db1e <sulp>:
 800db1e:	b570      	push	{r4, r5, r6, lr}
 800db20:	4604      	mov	r4, r0
 800db22:	460d      	mov	r5, r1
 800db24:	ec45 4b10 	vmov	d0, r4, r5
 800db28:	4616      	mov	r6, r2
 800db2a:	f7ff feb7 	bl	800d89c <__ulp>
 800db2e:	ec51 0b10 	vmov	r0, r1, d0
 800db32:	b17e      	cbz	r6, 800db54 <sulp+0x36>
 800db34:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800db38:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	dd09      	ble.n	800db54 <sulp+0x36>
 800db40:	051b      	lsls	r3, r3, #20
 800db42:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800db46:	2400      	movs	r4, #0
 800db48:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800db4c:	4622      	mov	r2, r4
 800db4e:	462b      	mov	r3, r5
 800db50:	f7f2 fd52 	bl	80005f8 <__aeabi_dmul>
 800db54:	bd70      	pop	{r4, r5, r6, pc}
	...

0800db58 <_strtod_l>:
 800db58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db5c:	ed2d 8b02 	vpush	{d8}
 800db60:	b09b      	sub	sp, #108	; 0x6c
 800db62:	4604      	mov	r4, r0
 800db64:	9213      	str	r2, [sp, #76]	; 0x4c
 800db66:	2200      	movs	r2, #0
 800db68:	9216      	str	r2, [sp, #88]	; 0x58
 800db6a:	460d      	mov	r5, r1
 800db6c:	f04f 0800 	mov.w	r8, #0
 800db70:	f04f 0900 	mov.w	r9, #0
 800db74:	460a      	mov	r2, r1
 800db76:	9215      	str	r2, [sp, #84]	; 0x54
 800db78:	7811      	ldrb	r1, [r2, #0]
 800db7a:	292b      	cmp	r1, #43	; 0x2b
 800db7c:	d04c      	beq.n	800dc18 <_strtod_l+0xc0>
 800db7e:	d83a      	bhi.n	800dbf6 <_strtod_l+0x9e>
 800db80:	290d      	cmp	r1, #13
 800db82:	d834      	bhi.n	800dbee <_strtod_l+0x96>
 800db84:	2908      	cmp	r1, #8
 800db86:	d834      	bhi.n	800dbf2 <_strtod_l+0x9a>
 800db88:	2900      	cmp	r1, #0
 800db8a:	d03d      	beq.n	800dc08 <_strtod_l+0xb0>
 800db8c:	2200      	movs	r2, #0
 800db8e:	920a      	str	r2, [sp, #40]	; 0x28
 800db90:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800db92:	7832      	ldrb	r2, [r6, #0]
 800db94:	2a30      	cmp	r2, #48	; 0x30
 800db96:	f040 80b4 	bne.w	800dd02 <_strtod_l+0x1aa>
 800db9a:	7872      	ldrb	r2, [r6, #1]
 800db9c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800dba0:	2a58      	cmp	r2, #88	; 0x58
 800dba2:	d170      	bne.n	800dc86 <_strtod_l+0x12e>
 800dba4:	9302      	str	r3, [sp, #8]
 800dba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dba8:	9301      	str	r3, [sp, #4]
 800dbaa:	ab16      	add	r3, sp, #88	; 0x58
 800dbac:	9300      	str	r3, [sp, #0]
 800dbae:	4a8e      	ldr	r2, [pc, #568]	; (800dde8 <_strtod_l+0x290>)
 800dbb0:	ab17      	add	r3, sp, #92	; 0x5c
 800dbb2:	a915      	add	r1, sp, #84	; 0x54
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	f001 f92f 	bl	800ee18 <__gethex>
 800dbba:	f010 070f 	ands.w	r7, r0, #15
 800dbbe:	4605      	mov	r5, r0
 800dbc0:	d005      	beq.n	800dbce <_strtod_l+0x76>
 800dbc2:	2f06      	cmp	r7, #6
 800dbc4:	d12a      	bne.n	800dc1c <_strtod_l+0xc4>
 800dbc6:	3601      	adds	r6, #1
 800dbc8:	2300      	movs	r3, #0
 800dbca:	9615      	str	r6, [sp, #84]	; 0x54
 800dbcc:	930a      	str	r3, [sp, #40]	; 0x28
 800dbce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	f040 857f 	bne.w	800e6d4 <_strtod_l+0xb7c>
 800dbd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbd8:	b1db      	cbz	r3, 800dc12 <_strtod_l+0xba>
 800dbda:	4642      	mov	r2, r8
 800dbdc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dbe0:	ec43 2b10 	vmov	d0, r2, r3
 800dbe4:	b01b      	add	sp, #108	; 0x6c
 800dbe6:	ecbd 8b02 	vpop	{d8}
 800dbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbee:	2920      	cmp	r1, #32
 800dbf0:	d1cc      	bne.n	800db8c <_strtod_l+0x34>
 800dbf2:	3201      	adds	r2, #1
 800dbf4:	e7bf      	b.n	800db76 <_strtod_l+0x1e>
 800dbf6:	292d      	cmp	r1, #45	; 0x2d
 800dbf8:	d1c8      	bne.n	800db8c <_strtod_l+0x34>
 800dbfa:	2101      	movs	r1, #1
 800dbfc:	910a      	str	r1, [sp, #40]	; 0x28
 800dbfe:	1c51      	adds	r1, r2, #1
 800dc00:	9115      	str	r1, [sp, #84]	; 0x54
 800dc02:	7852      	ldrb	r2, [r2, #1]
 800dc04:	2a00      	cmp	r2, #0
 800dc06:	d1c3      	bne.n	800db90 <_strtod_l+0x38>
 800dc08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dc0a:	9515      	str	r5, [sp, #84]	; 0x54
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	f040 855f 	bne.w	800e6d0 <_strtod_l+0xb78>
 800dc12:	4642      	mov	r2, r8
 800dc14:	464b      	mov	r3, r9
 800dc16:	e7e3      	b.n	800dbe0 <_strtod_l+0x88>
 800dc18:	2100      	movs	r1, #0
 800dc1a:	e7ef      	b.n	800dbfc <_strtod_l+0xa4>
 800dc1c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dc1e:	b13a      	cbz	r2, 800dc30 <_strtod_l+0xd8>
 800dc20:	2135      	movs	r1, #53	; 0x35
 800dc22:	a818      	add	r0, sp, #96	; 0x60
 800dc24:	f7ff ff37 	bl	800da96 <__copybits>
 800dc28:	9916      	ldr	r1, [sp, #88]	; 0x58
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	f7ff fb0a 	bl	800d244 <_Bfree>
 800dc30:	3f01      	subs	r7, #1
 800dc32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc34:	2f04      	cmp	r7, #4
 800dc36:	d806      	bhi.n	800dc46 <_strtod_l+0xee>
 800dc38:	e8df f007 	tbb	[pc, r7]
 800dc3c:	201d0314 	.word	0x201d0314
 800dc40:	14          	.byte	0x14
 800dc41:	00          	.byte	0x00
 800dc42:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800dc46:	05e9      	lsls	r1, r5, #23
 800dc48:	bf48      	it	mi
 800dc4a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800dc4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dc52:	0d1b      	lsrs	r3, r3, #20
 800dc54:	051b      	lsls	r3, r3, #20
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d1b9      	bne.n	800dbce <_strtod_l+0x76>
 800dc5a:	f7fe faf5 	bl	800c248 <__errno>
 800dc5e:	2322      	movs	r3, #34	; 0x22
 800dc60:	6003      	str	r3, [r0, #0]
 800dc62:	e7b4      	b.n	800dbce <_strtod_l+0x76>
 800dc64:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800dc68:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dc6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800dc70:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800dc74:	e7e7      	b.n	800dc46 <_strtod_l+0xee>
 800dc76:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ddf0 <_strtod_l+0x298>
 800dc7a:	e7e4      	b.n	800dc46 <_strtod_l+0xee>
 800dc7c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800dc80:	f04f 38ff 	mov.w	r8, #4294967295
 800dc84:	e7df      	b.n	800dc46 <_strtod_l+0xee>
 800dc86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc88:	1c5a      	adds	r2, r3, #1
 800dc8a:	9215      	str	r2, [sp, #84]	; 0x54
 800dc8c:	785b      	ldrb	r3, [r3, #1]
 800dc8e:	2b30      	cmp	r3, #48	; 0x30
 800dc90:	d0f9      	beq.n	800dc86 <_strtod_l+0x12e>
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d09b      	beq.n	800dbce <_strtod_l+0x76>
 800dc96:	2301      	movs	r3, #1
 800dc98:	f04f 0a00 	mov.w	sl, #0
 800dc9c:	9304      	str	r3, [sp, #16]
 800dc9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dca0:	930b      	str	r3, [sp, #44]	; 0x2c
 800dca2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800dca6:	46d3      	mov	fp, sl
 800dca8:	220a      	movs	r2, #10
 800dcaa:	9815      	ldr	r0, [sp, #84]	; 0x54
 800dcac:	7806      	ldrb	r6, [r0, #0]
 800dcae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800dcb2:	b2d9      	uxtb	r1, r3
 800dcb4:	2909      	cmp	r1, #9
 800dcb6:	d926      	bls.n	800dd06 <_strtod_l+0x1ae>
 800dcb8:	494c      	ldr	r1, [pc, #304]	; (800ddec <_strtod_l+0x294>)
 800dcba:	2201      	movs	r2, #1
 800dcbc:	f000 ffe6 	bl	800ec8c <strncmp>
 800dcc0:	2800      	cmp	r0, #0
 800dcc2:	d030      	beq.n	800dd26 <_strtod_l+0x1ce>
 800dcc4:	2000      	movs	r0, #0
 800dcc6:	4632      	mov	r2, r6
 800dcc8:	9005      	str	r0, [sp, #20]
 800dcca:	465e      	mov	r6, fp
 800dccc:	4603      	mov	r3, r0
 800dcce:	2a65      	cmp	r2, #101	; 0x65
 800dcd0:	d001      	beq.n	800dcd6 <_strtod_l+0x17e>
 800dcd2:	2a45      	cmp	r2, #69	; 0x45
 800dcd4:	d113      	bne.n	800dcfe <_strtod_l+0x1a6>
 800dcd6:	b91e      	cbnz	r6, 800dce0 <_strtod_l+0x188>
 800dcd8:	9a04      	ldr	r2, [sp, #16]
 800dcda:	4302      	orrs	r2, r0
 800dcdc:	d094      	beq.n	800dc08 <_strtod_l+0xb0>
 800dcde:	2600      	movs	r6, #0
 800dce0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800dce2:	1c6a      	adds	r2, r5, #1
 800dce4:	9215      	str	r2, [sp, #84]	; 0x54
 800dce6:	786a      	ldrb	r2, [r5, #1]
 800dce8:	2a2b      	cmp	r2, #43	; 0x2b
 800dcea:	d074      	beq.n	800ddd6 <_strtod_l+0x27e>
 800dcec:	2a2d      	cmp	r2, #45	; 0x2d
 800dcee:	d078      	beq.n	800dde2 <_strtod_l+0x28a>
 800dcf0:	f04f 0c00 	mov.w	ip, #0
 800dcf4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800dcf8:	2909      	cmp	r1, #9
 800dcfa:	d97f      	bls.n	800ddfc <_strtod_l+0x2a4>
 800dcfc:	9515      	str	r5, [sp, #84]	; 0x54
 800dcfe:	2700      	movs	r7, #0
 800dd00:	e09e      	b.n	800de40 <_strtod_l+0x2e8>
 800dd02:	2300      	movs	r3, #0
 800dd04:	e7c8      	b.n	800dc98 <_strtod_l+0x140>
 800dd06:	f1bb 0f08 	cmp.w	fp, #8
 800dd0a:	bfd8      	it	le
 800dd0c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800dd0e:	f100 0001 	add.w	r0, r0, #1
 800dd12:	bfda      	itte	le
 800dd14:	fb02 3301 	mlale	r3, r2, r1, r3
 800dd18:	9309      	strle	r3, [sp, #36]	; 0x24
 800dd1a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800dd1e:	f10b 0b01 	add.w	fp, fp, #1
 800dd22:	9015      	str	r0, [sp, #84]	; 0x54
 800dd24:	e7c1      	b.n	800dcaa <_strtod_l+0x152>
 800dd26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd28:	1c5a      	adds	r2, r3, #1
 800dd2a:	9215      	str	r2, [sp, #84]	; 0x54
 800dd2c:	785a      	ldrb	r2, [r3, #1]
 800dd2e:	f1bb 0f00 	cmp.w	fp, #0
 800dd32:	d037      	beq.n	800dda4 <_strtod_l+0x24c>
 800dd34:	9005      	str	r0, [sp, #20]
 800dd36:	465e      	mov	r6, fp
 800dd38:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800dd3c:	2b09      	cmp	r3, #9
 800dd3e:	d912      	bls.n	800dd66 <_strtod_l+0x20e>
 800dd40:	2301      	movs	r3, #1
 800dd42:	e7c4      	b.n	800dcce <_strtod_l+0x176>
 800dd44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd46:	1c5a      	adds	r2, r3, #1
 800dd48:	9215      	str	r2, [sp, #84]	; 0x54
 800dd4a:	785a      	ldrb	r2, [r3, #1]
 800dd4c:	3001      	adds	r0, #1
 800dd4e:	2a30      	cmp	r2, #48	; 0x30
 800dd50:	d0f8      	beq.n	800dd44 <_strtod_l+0x1ec>
 800dd52:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800dd56:	2b08      	cmp	r3, #8
 800dd58:	f200 84c1 	bhi.w	800e6de <_strtod_l+0xb86>
 800dd5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd5e:	9005      	str	r0, [sp, #20]
 800dd60:	2000      	movs	r0, #0
 800dd62:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd64:	4606      	mov	r6, r0
 800dd66:	3a30      	subs	r2, #48	; 0x30
 800dd68:	f100 0301 	add.w	r3, r0, #1
 800dd6c:	d014      	beq.n	800dd98 <_strtod_l+0x240>
 800dd6e:	9905      	ldr	r1, [sp, #20]
 800dd70:	4419      	add	r1, r3
 800dd72:	9105      	str	r1, [sp, #20]
 800dd74:	4633      	mov	r3, r6
 800dd76:	eb00 0c06 	add.w	ip, r0, r6
 800dd7a:	210a      	movs	r1, #10
 800dd7c:	4563      	cmp	r3, ip
 800dd7e:	d113      	bne.n	800dda8 <_strtod_l+0x250>
 800dd80:	1833      	adds	r3, r6, r0
 800dd82:	2b08      	cmp	r3, #8
 800dd84:	f106 0601 	add.w	r6, r6, #1
 800dd88:	4406      	add	r6, r0
 800dd8a:	dc1a      	bgt.n	800ddc2 <_strtod_l+0x26a>
 800dd8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd8e:	230a      	movs	r3, #10
 800dd90:	fb03 2301 	mla	r3, r3, r1, r2
 800dd94:	9309      	str	r3, [sp, #36]	; 0x24
 800dd96:	2300      	movs	r3, #0
 800dd98:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dd9a:	1c51      	adds	r1, r2, #1
 800dd9c:	9115      	str	r1, [sp, #84]	; 0x54
 800dd9e:	7852      	ldrb	r2, [r2, #1]
 800dda0:	4618      	mov	r0, r3
 800dda2:	e7c9      	b.n	800dd38 <_strtod_l+0x1e0>
 800dda4:	4658      	mov	r0, fp
 800dda6:	e7d2      	b.n	800dd4e <_strtod_l+0x1f6>
 800dda8:	2b08      	cmp	r3, #8
 800ddaa:	f103 0301 	add.w	r3, r3, #1
 800ddae:	dc03      	bgt.n	800ddb8 <_strtod_l+0x260>
 800ddb0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ddb2:	434f      	muls	r7, r1
 800ddb4:	9709      	str	r7, [sp, #36]	; 0x24
 800ddb6:	e7e1      	b.n	800dd7c <_strtod_l+0x224>
 800ddb8:	2b10      	cmp	r3, #16
 800ddba:	bfd8      	it	le
 800ddbc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800ddc0:	e7dc      	b.n	800dd7c <_strtod_l+0x224>
 800ddc2:	2e10      	cmp	r6, #16
 800ddc4:	bfdc      	itt	le
 800ddc6:	230a      	movle	r3, #10
 800ddc8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800ddcc:	e7e3      	b.n	800dd96 <_strtod_l+0x23e>
 800ddce:	2300      	movs	r3, #0
 800ddd0:	9305      	str	r3, [sp, #20]
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	e780      	b.n	800dcd8 <_strtod_l+0x180>
 800ddd6:	f04f 0c00 	mov.w	ip, #0
 800ddda:	1caa      	adds	r2, r5, #2
 800dddc:	9215      	str	r2, [sp, #84]	; 0x54
 800ddde:	78aa      	ldrb	r2, [r5, #2]
 800dde0:	e788      	b.n	800dcf4 <_strtod_l+0x19c>
 800dde2:	f04f 0c01 	mov.w	ip, #1
 800dde6:	e7f8      	b.n	800ddda <_strtod_l+0x282>
 800dde8:	08011330 	.word	0x08011330
 800ddec:	0801132c 	.word	0x0801132c
 800ddf0:	7ff00000 	.word	0x7ff00000
 800ddf4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ddf6:	1c51      	adds	r1, r2, #1
 800ddf8:	9115      	str	r1, [sp, #84]	; 0x54
 800ddfa:	7852      	ldrb	r2, [r2, #1]
 800ddfc:	2a30      	cmp	r2, #48	; 0x30
 800ddfe:	d0f9      	beq.n	800ddf4 <_strtod_l+0x29c>
 800de00:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800de04:	2908      	cmp	r1, #8
 800de06:	f63f af7a 	bhi.w	800dcfe <_strtod_l+0x1a6>
 800de0a:	3a30      	subs	r2, #48	; 0x30
 800de0c:	9208      	str	r2, [sp, #32]
 800de0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800de10:	920c      	str	r2, [sp, #48]	; 0x30
 800de12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800de14:	1c57      	adds	r7, r2, #1
 800de16:	9715      	str	r7, [sp, #84]	; 0x54
 800de18:	7852      	ldrb	r2, [r2, #1]
 800de1a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800de1e:	f1be 0f09 	cmp.w	lr, #9
 800de22:	d938      	bls.n	800de96 <_strtod_l+0x33e>
 800de24:	990c      	ldr	r1, [sp, #48]	; 0x30
 800de26:	1a7f      	subs	r7, r7, r1
 800de28:	2f08      	cmp	r7, #8
 800de2a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800de2e:	dc03      	bgt.n	800de38 <_strtod_l+0x2e0>
 800de30:	9908      	ldr	r1, [sp, #32]
 800de32:	428f      	cmp	r7, r1
 800de34:	bfa8      	it	ge
 800de36:	460f      	movge	r7, r1
 800de38:	f1bc 0f00 	cmp.w	ip, #0
 800de3c:	d000      	beq.n	800de40 <_strtod_l+0x2e8>
 800de3e:	427f      	negs	r7, r7
 800de40:	2e00      	cmp	r6, #0
 800de42:	d14f      	bne.n	800dee4 <_strtod_l+0x38c>
 800de44:	9904      	ldr	r1, [sp, #16]
 800de46:	4301      	orrs	r1, r0
 800de48:	f47f aec1 	bne.w	800dbce <_strtod_l+0x76>
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	f47f aedb 	bne.w	800dc08 <_strtod_l+0xb0>
 800de52:	2a69      	cmp	r2, #105	; 0x69
 800de54:	d029      	beq.n	800deaa <_strtod_l+0x352>
 800de56:	dc26      	bgt.n	800dea6 <_strtod_l+0x34e>
 800de58:	2a49      	cmp	r2, #73	; 0x49
 800de5a:	d026      	beq.n	800deaa <_strtod_l+0x352>
 800de5c:	2a4e      	cmp	r2, #78	; 0x4e
 800de5e:	f47f aed3 	bne.w	800dc08 <_strtod_l+0xb0>
 800de62:	499b      	ldr	r1, [pc, #620]	; (800e0d0 <_strtod_l+0x578>)
 800de64:	a815      	add	r0, sp, #84	; 0x54
 800de66:	f001 fa17 	bl	800f298 <__match>
 800de6a:	2800      	cmp	r0, #0
 800de6c:	f43f aecc 	beq.w	800dc08 <_strtod_l+0xb0>
 800de70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	2b28      	cmp	r3, #40	; 0x28
 800de76:	d12f      	bne.n	800ded8 <_strtod_l+0x380>
 800de78:	4996      	ldr	r1, [pc, #600]	; (800e0d4 <_strtod_l+0x57c>)
 800de7a:	aa18      	add	r2, sp, #96	; 0x60
 800de7c:	a815      	add	r0, sp, #84	; 0x54
 800de7e:	f001 fa1f 	bl	800f2c0 <__hexnan>
 800de82:	2805      	cmp	r0, #5
 800de84:	d128      	bne.n	800ded8 <_strtod_l+0x380>
 800de86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800de8c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800de90:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800de94:	e69b      	b.n	800dbce <_strtod_l+0x76>
 800de96:	9f08      	ldr	r7, [sp, #32]
 800de98:	210a      	movs	r1, #10
 800de9a:	fb01 2107 	mla	r1, r1, r7, r2
 800de9e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800dea2:	9208      	str	r2, [sp, #32]
 800dea4:	e7b5      	b.n	800de12 <_strtod_l+0x2ba>
 800dea6:	2a6e      	cmp	r2, #110	; 0x6e
 800dea8:	e7d9      	b.n	800de5e <_strtod_l+0x306>
 800deaa:	498b      	ldr	r1, [pc, #556]	; (800e0d8 <_strtod_l+0x580>)
 800deac:	a815      	add	r0, sp, #84	; 0x54
 800deae:	f001 f9f3 	bl	800f298 <__match>
 800deb2:	2800      	cmp	r0, #0
 800deb4:	f43f aea8 	beq.w	800dc08 <_strtod_l+0xb0>
 800deb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800deba:	4988      	ldr	r1, [pc, #544]	; (800e0dc <_strtod_l+0x584>)
 800debc:	3b01      	subs	r3, #1
 800debe:	a815      	add	r0, sp, #84	; 0x54
 800dec0:	9315      	str	r3, [sp, #84]	; 0x54
 800dec2:	f001 f9e9 	bl	800f298 <__match>
 800dec6:	b910      	cbnz	r0, 800dece <_strtod_l+0x376>
 800dec8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800deca:	3301      	adds	r3, #1
 800decc:	9315      	str	r3, [sp, #84]	; 0x54
 800dece:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800e0ec <_strtod_l+0x594>
 800ded2:	f04f 0800 	mov.w	r8, #0
 800ded6:	e67a      	b.n	800dbce <_strtod_l+0x76>
 800ded8:	4881      	ldr	r0, [pc, #516]	; (800e0e0 <_strtod_l+0x588>)
 800deda:	f000 fef9 	bl	800ecd0 <nan>
 800dede:	ec59 8b10 	vmov	r8, r9, d0
 800dee2:	e674      	b.n	800dbce <_strtod_l+0x76>
 800dee4:	9b05      	ldr	r3, [sp, #20]
 800dee6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dee8:	1afb      	subs	r3, r7, r3
 800deea:	f1bb 0f00 	cmp.w	fp, #0
 800deee:	bf08      	it	eq
 800def0:	46b3      	moveq	fp, r6
 800def2:	2e10      	cmp	r6, #16
 800def4:	9308      	str	r3, [sp, #32]
 800def6:	4635      	mov	r5, r6
 800def8:	bfa8      	it	ge
 800defa:	2510      	movge	r5, #16
 800defc:	f7f2 fb02 	bl	8000504 <__aeabi_ui2d>
 800df00:	2e09      	cmp	r6, #9
 800df02:	4680      	mov	r8, r0
 800df04:	4689      	mov	r9, r1
 800df06:	dd13      	ble.n	800df30 <_strtod_l+0x3d8>
 800df08:	4b76      	ldr	r3, [pc, #472]	; (800e0e4 <_strtod_l+0x58c>)
 800df0a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800df0e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800df12:	f7f2 fb71 	bl	80005f8 <__aeabi_dmul>
 800df16:	4680      	mov	r8, r0
 800df18:	4650      	mov	r0, sl
 800df1a:	4689      	mov	r9, r1
 800df1c:	f7f2 faf2 	bl	8000504 <__aeabi_ui2d>
 800df20:	4602      	mov	r2, r0
 800df22:	460b      	mov	r3, r1
 800df24:	4640      	mov	r0, r8
 800df26:	4649      	mov	r1, r9
 800df28:	f7f2 f9b0 	bl	800028c <__adddf3>
 800df2c:	4680      	mov	r8, r0
 800df2e:	4689      	mov	r9, r1
 800df30:	2e0f      	cmp	r6, #15
 800df32:	dc38      	bgt.n	800dfa6 <_strtod_l+0x44e>
 800df34:	9b08      	ldr	r3, [sp, #32]
 800df36:	2b00      	cmp	r3, #0
 800df38:	f43f ae49 	beq.w	800dbce <_strtod_l+0x76>
 800df3c:	dd24      	ble.n	800df88 <_strtod_l+0x430>
 800df3e:	2b16      	cmp	r3, #22
 800df40:	dc0b      	bgt.n	800df5a <_strtod_l+0x402>
 800df42:	4968      	ldr	r1, [pc, #416]	; (800e0e4 <_strtod_l+0x58c>)
 800df44:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800df48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df4c:	4642      	mov	r2, r8
 800df4e:	464b      	mov	r3, r9
 800df50:	f7f2 fb52 	bl	80005f8 <__aeabi_dmul>
 800df54:	4680      	mov	r8, r0
 800df56:	4689      	mov	r9, r1
 800df58:	e639      	b.n	800dbce <_strtod_l+0x76>
 800df5a:	9a08      	ldr	r2, [sp, #32]
 800df5c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800df60:	4293      	cmp	r3, r2
 800df62:	db20      	blt.n	800dfa6 <_strtod_l+0x44e>
 800df64:	4c5f      	ldr	r4, [pc, #380]	; (800e0e4 <_strtod_l+0x58c>)
 800df66:	f1c6 060f 	rsb	r6, r6, #15
 800df6a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800df6e:	4642      	mov	r2, r8
 800df70:	464b      	mov	r3, r9
 800df72:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df76:	f7f2 fb3f 	bl	80005f8 <__aeabi_dmul>
 800df7a:	9b08      	ldr	r3, [sp, #32]
 800df7c:	1b9e      	subs	r6, r3, r6
 800df7e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800df82:	e9d4 2300 	ldrd	r2, r3, [r4]
 800df86:	e7e3      	b.n	800df50 <_strtod_l+0x3f8>
 800df88:	9b08      	ldr	r3, [sp, #32]
 800df8a:	3316      	adds	r3, #22
 800df8c:	db0b      	blt.n	800dfa6 <_strtod_l+0x44e>
 800df8e:	9b05      	ldr	r3, [sp, #20]
 800df90:	1bdf      	subs	r7, r3, r7
 800df92:	4b54      	ldr	r3, [pc, #336]	; (800e0e4 <_strtod_l+0x58c>)
 800df94:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800df98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df9c:	4640      	mov	r0, r8
 800df9e:	4649      	mov	r1, r9
 800dfa0:	f7f2 fc54 	bl	800084c <__aeabi_ddiv>
 800dfa4:	e7d6      	b.n	800df54 <_strtod_l+0x3fc>
 800dfa6:	9b08      	ldr	r3, [sp, #32]
 800dfa8:	1b75      	subs	r5, r6, r5
 800dfaa:	441d      	add	r5, r3
 800dfac:	2d00      	cmp	r5, #0
 800dfae:	dd70      	ble.n	800e092 <_strtod_l+0x53a>
 800dfb0:	f015 030f 	ands.w	r3, r5, #15
 800dfb4:	d00a      	beq.n	800dfcc <_strtod_l+0x474>
 800dfb6:	494b      	ldr	r1, [pc, #300]	; (800e0e4 <_strtod_l+0x58c>)
 800dfb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dfbc:	4642      	mov	r2, r8
 800dfbe:	464b      	mov	r3, r9
 800dfc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfc4:	f7f2 fb18 	bl	80005f8 <__aeabi_dmul>
 800dfc8:	4680      	mov	r8, r0
 800dfca:	4689      	mov	r9, r1
 800dfcc:	f035 050f 	bics.w	r5, r5, #15
 800dfd0:	d04d      	beq.n	800e06e <_strtod_l+0x516>
 800dfd2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800dfd6:	dd22      	ble.n	800e01e <_strtod_l+0x4c6>
 800dfd8:	2500      	movs	r5, #0
 800dfda:	46ab      	mov	fp, r5
 800dfdc:	9509      	str	r5, [sp, #36]	; 0x24
 800dfde:	9505      	str	r5, [sp, #20]
 800dfe0:	2322      	movs	r3, #34	; 0x22
 800dfe2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800e0ec <_strtod_l+0x594>
 800dfe6:	6023      	str	r3, [r4, #0]
 800dfe8:	f04f 0800 	mov.w	r8, #0
 800dfec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	f43f aded 	beq.w	800dbce <_strtod_l+0x76>
 800dff4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800dff6:	4620      	mov	r0, r4
 800dff8:	f7ff f924 	bl	800d244 <_Bfree>
 800dffc:	9905      	ldr	r1, [sp, #20]
 800dffe:	4620      	mov	r0, r4
 800e000:	f7ff f920 	bl	800d244 <_Bfree>
 800e004:	4659      	mov	r1, fp
 800e006:	4620      	mov	r0, r4
 800e008:	f7ff f91c 	bl	800d244 <_Bfree>
 800e00c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e00e:	4620      	mov	r0, r4
 800e010:	f7ff f918 	bl	800d244 <_Bfree>
 800e014:	4629      	mov	r1, r5
 800e016:	4620      	mov	r0, r4
 800e018:	f7ff f914 	bl	800d244 <_Bfree>
 800e01c:	e5d7      	b.n	800dbce <_strtod_l+0x76>
 800e01e:	4b32      	ldr	r3, [pc, #200]	; (800e0e8 <_strtod_l+0x590>)
 800e020:	9304      	str	r3, [sp, #16]
 800e022:	2300      	movs	r3, #0
 800e024:	112d      	asrs	r5, r5, #4
 800e026:	4640      	mov	r0, r8
 800e028:	4649      	mov	r1, r9
 800e02a:	469a      	mov	sl, r3
 800e02c:	2d01      	cmp	r5, #1
 800e02e:	dc21      	bgt.n	800e074 <_strtod_l+0x51c>
 800e030:	b10b      	cbz	r3, 800e036 <_strtod_l+0x4de>
 800e032:	4680      	mov	r8, r0
 800e034:	4689      	mov	r9, r1
 800e036:	492c      	ldr	r1, [pc, #176]	; (800e0e8 <_strtod_l+0x590>)
 800e038:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e03c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e040:	4642      	mov	r2, r8
 800e042:	464b      	mov	r3, r9
 800e044:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e048:	f7f2 fad6 	bl	80005f8 <__aeabi_dmul>
 800e04c:	4b27      	ldr	r3, [pc, #156]	; (800e0ec <_strtod_l+0x594>)
 800e04e:	460a      	mov	r2, r1
 800e050:	400b      	ands	r3, r1
 800e052:	4927      	ldr	r1, [pc, #156]	; (800e0f0 <_strtod_l+0x598>)
 800e054:	428b      	cmp	r3, r1
 800e056:	4680      	mov	r8, r0
 800e058:	d8be      	bhi.n	800dfd8 <_strtod_l+0x480>
 800e05a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e05e:	428b      	cmp	r3, r1
 800e060:	bf86      	itte	hi
 800e062:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800e0f4 <_strtod_l+0x59c>
 800e066:	f04f 38ff 	movhi.w	r8, #4294967295
 800e06a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800e06e:	2300      	movs	r3, #0
 800e070:	9304      	str	r3, [sp, #16]
 800e072:	e07b      	b.n	800e16c <_strtod_l+0x614>
 800e074:	07ea      	lsls	r2, r5, #31
 800e076:	d505      	bpl.n	800e084 <_strtod_l+0x52c>
 800e078:	9b04      	ldr	r3, [sp, #16]
 800e07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07e:	f7f2 fabb 	bl	80005f8 <__aeabi_dmul>
 800e082:	2301      	movs	r3, #1
 800e084:	9a04      	ldr	r2, [sp, #16]
 800e086:	3208      	adds	r2, #8
 800e088:	f10a 0a01 	add.w	sl, sl, #1
 800e08c:	106d      	asrs	r5, r5, #1
 800e08e:	9204      	str	r2, [sp, #16]
 800e090:	e7cc      	b.n	800e02c <_strtod_l+0x4d4>
 800e092:	d0ec      	beq.n	800e06e <_strtod_l+0x516>
 800e094:	426d      	negs	r5, r5
 800e096:	f015 020f 	ands.w	r2, r5, #15
 800e09a:	d00a      	beq.n	800e0b2 <_strtod_l+0x55a>
 800e09c:	4b11      	ldr	r3, [pc, #68]	; (800e0e4 <_strtod_l+0x58c>)
 800e09e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e0a2:	4640      	mov	r0, r8
 800e0a4:	4649      	mov	r1, r9
 800e0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0aa:	f7f2 fbcf 	bl	800084c <__aeabi_ddiv>
 800e0ae:	4680      	mov	r8, r0
 800e0b0:	4689      	mov	r9, r1
 800e0b2:	112d      	asrs	r5, r5, #4
 800e0b4:	d0db      	beq.n	800e06e <_strtod_l+0x516>
 800e0b6:	2d1f      	cmp	r5, #31
 800e0b8:	dd1e      	ble.n	800e0f8 <_strtod_l+0x5a0>
 800e0ba:	2500      	movs	r5, #0
 800e0bc:	46ab      	mov	fp, r5
 800e0be:	9509      	str	r5, [sp, #36]	; 0x24
 800e0c0:	9505      	str	r5, [sp, #20]
 800e0c2:	2322      	movs	r3, #34	; 0x22
 800e0c4:	f04f 0800 	mov.w	r8, #0
 800e0c8:	f04f 0900 	mov.w	r9, #0
 800e0cc:	6023      	str	r3, [r4, #0]
 800e0ce:	e78d      	b.n	800dfec <_strtod_l+0x494>
 800e0d0:	0801111e 	.word	0x0801111e
 800e0d4:	08011344 	.word	0x08011344
 800e0d8:	08011116 	.word	0x08011116
 800e0dc:	0801114d 	.word	0x0801114d
 800e0e0:	080113d4 	.word	0x080113d4
 800e0e4:	08011258 	.word	0x08011258
 800e0e8:	08011230 	.word	0x08011230
 800e0ec:	7ff00000 	.word	0x7ff00000
 800e0f0:	7ca00000 	.word	0x7ca00000
 800e0f4:	7fefffff 	.word	0x7fefffff
 800e0f8:	f015 0310 	ands.w	r3, r5, #16
 800e0fc:	bf18      	it	ne
 800e0fe:	236a      	movne	r3, #106	; 0x6a
 800e100:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800e4a4 <_strtod_l+0x94c>
 800e104:	9304      	str	r3, [sp, #16]
 800e106:	4640      	mov	r0, r8
 800e108:	4649      	mov	r1, r9
 800e10a:	2300      	movs	r3, #0
 800e10c:	07ea      	lsls	r2, r5, #31
 800e10e:	d504      	bpl.n	800e11a <_strtod_l+0x5c2>
 800e110:	e9da 2300 	ldrd	r2, r3, [sl]
 800e114:	f7f2 fa70 	bl	80005f8 <__aeabi_dmul>
 800e118:	2301      	movs	r3, #1
 800e11a:	106d      	asrs	r5, r5, #1
 800e11c:	f10a 0a08 	add.w	sl, sl, #8
 800e120:	d1f4      	bne.n	800e10c <_strtod_l+0x5b4>
 800e122:	b10b      	cbz	r3, 800e128 <_strtod_l+0x5d0>
 800e124:	4680      	mov	r8, r0
 800e126:	4689      	mov	r9, r1
 800e128:	9b04      	ldr	r3, [sp, #16]
 800e12a:	b1bb      	cbz	r3, 800e15c <_strtod_l+0x604>
 800e12c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e130:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e134:	2b00      	cmp	r3, #0
 800e136:	4649      	mov	r1, r9
 800e138:	dd10      	ble.n	800e15c <_strtod_l+0x604>
 800e13a:	2b1f      	cmp	r3, #31
 800e13c:	f340 811e 	ble.w	800e37c <_strtod_l+0x824>
 800e140:	2b34      	cmp	r3, #52	; 0x34
 800e142:	bfde      	ittt	le
 800e144:	f04f 33ff 	movle.w	r3, #4294967295
 800e148:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e14c:	4093      	lslle	r3, r2
 800e14e:	f04f 0800 	mov.w	r8, #0
 800e152:	bfcc      	ite	gt
 800e154:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e158:	ea03 0901 	andle.w	r9, r3, r1
 800e15c:	2200      	movs	r2, #0
 800e15e:	2300      	movs	r3, #0
 800e160:	4640      	mov	r0, r8
 800e162:	4649      	mov	r1, r9
 800e164:	f7f2 fcb0 	bl	8000ac8 <__aeabi_dcmpeq>
 800e168:	2800      	cmp	r0, #0
 800e16a:	d1a6      	bne.n	800e0ba <_strtod_l+0x562>
 800e16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e16e:	9300      	str	r3, [sp, #0]
 800e170:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e172:	4633      	mov	r3, r6
 800e174:	465a      	mov	r2, fp
 800e176:	4620      	mov	r0, r4
 800e178:	f7ff f8cc 	bl	800d314 <__s2b>
 800e17c:	9009      	str	r0, [sp, #36]	; 0x24
 800e17e:	2800      	cmp	r0, #0
 800e180:	f43f af2a 	beq.w	800dfd8 <_strtod_l+0x480>
 800e184:	9a08      	ldr	r2, [sp, #32]
 800e186:	9b05      	ldr	r3, [sp, #20]
 800e188:	2a00      	cmp	r2, #0
 800e18a:	eba3 0307 	sub.w	r3, r3, r7
 800e18e:	bfa8      	it	ge
 800e190:	2300      	movge	r3, #0
 800e192:	930c      	str	r3, [sp, #48]	; 0x30
 800e194:	2500      	movs	r5, #0
 800e196:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e19a:	9312      	str	r3, [sp, #72]	; 0x48
 800e19c:	46ab      	mov	fp, r5
 800e19e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	6859      	ldr	r1, [r3, #4]
 800e1a4:	f7ff f80e 	bl	800d1c4 <_Balloc>
 800e1a8:	9005      	str	r0, [sp, #20]
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	f43f af18 	beq.w	800dfe0 <_strtod_l+0x488>
 800e1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1b2:	691a      	ldr	r2, [r3, #16]
 800e1b4:	3202      	adds	r2, #2
 800e1b6:	f103 010c 	add.w	r1, r3, #12
 800e1ba:	0092      	lsls	r2, r2, #2
 800e1bc:	300c      	adds	r0, #12
 800e1be:	f7fe f870 	bl	800c2a2 <memcpy>
 800e1c2:	ec49 8b10 	vmov	d0, r8, r9
 800e1c6:	aa18      	add	r2, sp, #96	; 0x60
 800e1c8:	a917      	add	r1, sp, #92	; 0x5c
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	f7ff fbd6 	bl	800d97c <__d2b>
 800e1d0:	ec49 8b18 	vmov	d8, r8, r9
 800e1d4:	9016      	str	r0, [sp, #88]	; 0x58
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	f43f af02 	beq.w	800dfe0 <_strtod_l+0x488>
 800e1dc:	2101      	movs	r1, #1
 800e1de:	4620      	mov	r0, r4
 800e1e0:	f7ff f930 	bl	800d444 <__i2b>
 800e1e4:	4683      	mov	fp, r0
 800e1e6:	2800      	cmp	r0, #0
 800e1e8:	f43f aefa 	beq.w	800dfe0 <_strtod_l+0x488>
 800e1ec:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e1ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e1f0:	2e00      	cmp	r6, #0
 800e1f2:	bfab      	itete	ge
 800e1f4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800e1f6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800e1f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e1fa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800e1fe:	bfac      	ite	ge
 800e200:	eb06 0a03 	addge.w	sl, r6, r3
 800e204:	1b9f      	sublt	r7, r3, r6
 800e206:	9b04      	ldr	r3, [sp, #16]
 800e208:	1af6      	subs	r6, r6, r3
 800e20a:	4416      	add	r6, r2
 800e20c:	4ba0      	ldr	r3, [pc, #640]	; (800e490 <_strtod_l+0x938>)
 800e20e:	3e01      	subs	r6, #1
 800e210:	429e      	cmp	r6, r3
 800e212:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e216:	f280 80c4 	bge.w	800e3a2 <_strtod_l+0x84a>
 800e21a:	1b9b      	subs	r3, r3, r6
 800e21c:	2b1f      	cmp	r3, #31
 800e21e:	eba2 0203 	sub.w	r2, r2, r3
 800e222:	f04f 0101 	mov.w	r1, #1
 800e226:	f300 80b0 	bgt.w	800e38a <_strtod_l+0x832>
 800e22a:	fa01 f303 	lsl.w	r3, r1, r3
 800e22e:	930e      	str	r3, [sp, #56]	; 0x38
 800e230:	2300      	movs	r3, #0
 800e232:	930d      	str	r3, [sp, #52]	; 0x34
 800e234:	eb0a 0602 	add.w	r6, sl, r2
 800e238:	9b04      	ldr	r3, [sp, #16]
 800e23a:	45b2      	cmp	sl, r6
 800e23c:	4417      	add	r7, r2
 800e23e:	441f      	add	r7, r3
 800e240:	4653      	mov	r3, sl
 800e242:	bfa8      	it	ge
 800e244:	4633      	movge	r3, r6
 800e246:	42bb      	cmp	r3, r7
 800e248:	bfa8      	it	ge
 800e24a:	463b      	movge	r3, r7
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	bfc2      	ittt	gt
 800e250:	1af6      	subgt	r6, r6, r3
 800e252:	1aff      	subgt	r7, r7, r3
 800e254:	ebaa 0a03 	subgt.w	sl, sl, r3
 800e258:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	dd17      	ble.n	800e28e <_strtod_l+0x736>
 800e25e:	4659      	mov	r1, fp
 800e260:	461a      	mov	r2, r3
 800e262:	4620      	mov	r0, r4
 800e264:	f7ff f9ae 	bl	800d5c4 <__pow5mult>
 800e268:	4683      	mov	fp, r0
 800e26a:	2800      	cmp	r0, #0
 800e26c:	f43f aeb8 	beq.w	800dfe0 <_strtod_l+0x488>
 800e270:	4601      	mov	r1, r0
 800e272:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e274:	4620      	mov	r0, r4
 800e276:	f7ff f8fb 	bl	800d470 <__multiply>
 800e27a:	900b      	str	r0, [sp, #44]	; 0x2c
 800e27c:	2800      	cmp	r0, #0
 800e27e:	f43f aeaf 	beq.w	800dfe0 <_strtod_l+0x488>
 800e282:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e284:	4620      	mov	r0, r4
 800e286:	f7fe ffdd 	bl	800d244 <_Bfree>
 800e28a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e28c:	9316      	str	r3, [sp, #88]	; 0x58
 800e28e:	2e00      	cmp	r6, #0
 800e290:	f300 808c 	bgt.w	800e3ac <_strtod_l+0x854>
 800e294:	9b08      	ldr	r3, [sp, #32]
 800e296:	2b00      	cmp	r3, #0
 800e298:	dd08      	ble.n	800e2ac <_strtod_l+0x754>
 800e29a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e29c:	9905      	ldr	r1, [sp, #20]
 800e29e:	4620      	mov	r0, r4
 800e2a0:	f7ff f990 	bl	800d5c4 <__pow5mult>
 800e2a4:	9005      	str	r0, [sp, #20]
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	f43f ae9a 	beq.w	800dfe0 <_strtod_l+0x488>
 800e2ac:	2f00      	cmp	r7, #0
 800e2ae:	dd08      	ble.n	800e2c2 <_strtod_l+0x76a>
 800e2b0:	9905      	ldr	r1, [sp, #20]
 800e2b2:	463a      	mov	r2, r7
 800e2b4:	4620      	mov	r0, r4
 800e2b6:	f7ff f9df 	bl	800d678 <__lshift>
 800e2ba:	9005      	str	r0, [sp, #20]
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	f43f ae8f 	beq.w	800dfe0 <_strtod_l+0x488>
 800e2c2:	f1ba 0f00 	cmp.w	sl, #0
 800e2c6:	dd08      	ble.n	800e2da <_strtod_l+0x782>
 800e2c8:	4659      	mov	r1, fp
 800e2ca:	4652      	mov	r2, sl
 800e2cc:	4620      	mov	r0, r4
 800e2ce:	f7ff f9d3 	bl	800d678 <__lshift>
 800e2d2:	4683      	mov	fp, r0
 800e2d4:	2800      	cmp	r0, #0
 800e2d6:	f43f ae83 	beq.w	800dfe0 <_strtod_l+0x488>
 800e2da:	9a05      	ldr	r2, [sp, #20]
 800e2dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e2de:	4620      	mov	r0, r4
 800e2e0:	f7ff fa52 	bl	800d788 <__mdiff>
 800e2e4:	4605      	mov	r5, r0
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	f43f ae7a 	beq.w	800dfe0 <_strtod_l+0x488>
 800e2ec:	68c3      	ldr	r3, [r0, #12]
 800e2ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	60c3      	str	r3, [r0, #12]
 800e2f4:	4659      	mov	r1, fp
 800e2f6:	f7ff fa2b 	bl	800d750 <__mcmp>
 800e2fa:	2800      	cmp	r0, #0
 800e2fc:	da60      	bge.n	800e3c0 <_strtod_l+0x868>
 800e2fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e300:	ea53 0308 	orrs.w	r3, r3, r8
 800e304:	f040 8084 	bne.w	800e410 <_strtod_l+0x8b8>
 800e308:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d17f      	bne.n	800e410 <_strtod_l+0x8b8>
 800e310:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e314:	0d1b      	lsrs	r3, r3, #20
 800e316:	051b      	lsls	r3, r3, #20
 800e318:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e31c:	d978      	bls.n	800e410 <_strtod_l+0x8b8>
 800e31e:	696b      	ldr	r3, [r5, #20]
 800e320:	b913      	cbnz	r3, 800e328 <_strtod_l+0x7d0>
 800e322:	692b      	ldr	r3, [r5, #16]
 800e324:	2b01      	cmp	r3, #1
 800e326:	dd73      	ble.n	800e410 <_strtod_l+0x8b8>
 800e328:	4629      	mov	r1, r5
 800e32a:	2201      	movs	r2, #1
 800e32c:	4620      	mov	r0, r4
 800e32e:	f7ff f9a3 	bl	800d678 <__lshift>
 800e332:	4659      	mov	r1, fp
 800e334:	4605      	mov	r5, r0
 800e336:	f7ff fa0b 	bl	800d750 <__mcmp>
 800e33a:	2800      	cmp	r0, #0
 800e33c:	dd68      	ble.n	800e410 <_strtod_l+0x8b8>
 800e33e:	9904      	ldr	r1, [sp, #16]
 800e340:	4a54      	ldr	r2, [pc, #336]	; (800e494 <_strtod_l+0x93c>)
 800e342:	464b      	mov	r3, r9
 800e344:	2900      	cmp	r1, #0
 800e346:	f000 8084 	beq.w	800e452 <_strtod_l+0x8fa>
 800e34a:	ea02 0109 	and.w	r1, r2, r9
 800e34e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e352:	dc7e      	bgt.n	800e452 <_strtod_l+0x8fa>
 800e354:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e358:	f77f aeb3 	ble.w	800e0c2 <_strtod_l+0x56a>
 800e35c:	4b4e      	ldr	r3, [pc, #312]	; (800e498 <_strtod_l+0x940>)
 800e35e:	4640      	mov	r0, r8
 800e360:	4649      	mov	r1, r9
 800e362:	2200      	movs	r2, #0
 800e364:	f7f2 f948 	bl	80005f8 <__aeabi_dmul>
 800e368:	4b4a      	ldr	r3, [pc, #296]	; (800e494 <_strtod_l+0x93c>)
 800e36a:	400b      	ands	r3, r1
 800e36c:	4680      	mov	r8, r0
 800e36e:	4689      	mov	r9, r1
 800e370:	2b00      	cmp	r3, #0
 800e372:	f47f ae3f 	bne.w	800dff4 <_strtod_l+0x49c>
 800e376:	2322      	movs	r3, #34	; 0x22
 800e378:	6023      	str	r3, [r4, #0]
 800e37a:	e63b      	b.n	800dff4 <_strtod_l+0x49c>
 800e37c:	f04f 32ff 	mov.w	r2, #4294967295
 800e380:	fa02 f303 	lsl.w	r3, r2, r3
 800e384:	ea03 0808 	and.w	r8, r3, r8
 800e388:	e6e8      	b.n	800e15c <_strtod_l+0x604>
 800e38a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800e38e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800e392:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800e396:	36e2      	adds	r6, #226	; 0xe2
 800e398:	fa01 f306 	lsl.w	r3, r1, r6
 800e39c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800e3a0:	e748      	b.n	800e234 <_strtod_l+0x6dc>
 800e3a2:	2100      	movs	r1, #0
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800e3aa:	e743      	b.n	800e234 <_strtod_l+0x6dc>
 800e3ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e3ae:	4632      	mov	r2, r6
 800e3b0:	4620      	mov	r0, r4
 800e3b2:	f7ff f961 	bl	800d678 <__lshift>
 800e3b6:	9016      	str	r0, [sp, #88]	; 0x58
 800e3b8:	2800      	cmp	r0, #0
 800e3ba:	f47f af6b 	bne.w	800e294 <_strtod_l+0x73c>
 800e3be:	e60f      	b.n	800dfe0 <_strtod_l+0x488>
 800e3c0:	46ca      	mov	sl, r9
 800e3c2:	d171      	bne.n	800e4a8 <_strtod_l+0x950>
 800e3c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e3c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e3ca:	b352      	cbz	r2, 800e422 <_strtod_l+0x8ca>
 800e3cc:	4a33      	ldr	r2, [pc, #204]	; (800e49c <_strtod_l+0x944>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d12a      	bne.n	800e428 <_strtod_l+0x8d0>
 800e3d2:	9b04      	ldr	r3, [sp, #16]
 800e3d4:	4641      	mov	r1, r8
 800e3d6:	b1fb      	cbz	r3, 800e418 <_strtod_l+0x8c0>
 800e3d8:	4b2e      	ldr	r3, [pc, #184]	; (800e494 <_strtod_l+0x93c>)
 800e3da:	ea09 0303 	and.w	r3, r9, r3
 800e3de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e3e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3e6:	d81a      	bhi.n	800e41e <_strtod_l+0x8c6>
 800e3e8:	0d1b      	lsrs	r3, r3, #20
 800e3ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800e3f2:	4299      	cmp	r1, r3
 800e3f4:	d118      	bne.n	800e428 <_strtod_l+0x8d0>
 800e3f6:	4b2a      	ldr	r3, [pc, #168]	; (800e4a0 <_strtod_l+0x948>)
 800e3f8:	459a      	cmp	sl, r3
 800e3fa:	d102      	bne.n	800e402 <_strtod_l+0x8aa>
 800e3fc:	3101      	adds	r1, #1
 800e3fe:	f43f adef 	beq.w	800dfe0 <_strtod_l+0x488>
 800e402:	4b24      	ldr	r3, [pc, #144]	; (800e494 <_strtod_l+0x93c>)
 800e404:	ea0a 0303 	and.w	r3, sl, r3
 800e408:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800e40c:	f04f 0800 	mov.w	r8, #0
 800e410:	9b04      	ldr	r3, [sp, #16]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d1a2      	bne.n	800e35c <_strtod_l+0x804>
 800e416:	e5ed      	b.n	800dff4 <_strtod_l+0x49c>
 800e418:	f04f 33ff 	mov.w	r3, #4294967295
 800e41c:	e7e9      	b.n	800e3f2 <_strtod_l+0x89a>
 800e41e:	4613      	mov	r3, r2
 800e420:	e7e7      	b.n	800e3f2 <_strtod_l+0x89a>
 800e422:	ea53 0308 	orrs.w	r3, r3, r8
 800e426:	d08a      	beq.n	800e33e <_strtod_l+0x7e6>
 800e428:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e42a:	b1e3      	cbz	r3, 800e466 <_strtod_l+0x90e>
 800e42c:	ea13 0f0a 	tst.w	r3, sl
 800e430:	d0ee      	beq.n	800e410 <_strtod_l+0x8b8>
 800e432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e434:	9a04      	ldr	r2, [sp, #16]
 800e436:	4640      	mov	r0, r8
 800e438:	4649      	mov	r1, r9
 800e43a:	b1c3      	cbz	r3, 800e46e <_strtod_l+0x916>
 800e43c:	f7ff fb6f 	bl	800db1e <sulp>
 800e440:	4602      	mov	r2, r0
 800e442:	460b      	mov	r3, r1
 800e444:	ec51 0b18 	vmov	r0, r1, d8
 800e448:	f7f1 ff20 	bl	800028c <__adddf3>
 800e44c:	4680      	mov	r8, r0
 800e44e:	4689      	mov	r9, r1
 800e450:	e7de      	b.n	800e410 <_strtod_l+0x8b8>
 800e452:	4013      	ands	r3, r2
 800e454:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e458:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e45c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e460:	f04f 38ff 	mov.w	r8, #4294967295
 800e464:	e7d4      	b.n	800e410 <_strtod_l+0x8b8>
 800e466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e468:	ea13 0f08 	tst.w	r3, r8
 800e46c:	e7e0      	b.n	800e430 <_strtod_l+0x8d8>
 800e46e:	f7ff fb56 	bl	800db1e <sulp>
 800e472:	4602      	mov	r2, r0
 800e474:	460b      	mov	r3, r1
 800e476:	ec51 0b18 	vmov	r0, r1, d8
 800e47a:	f7f1 ff05 	bl	8000288 <__aeabi_dsub>
 800e47e:	2200      	movs	r2, #0
 800e480:	2300      	movs	r3, #0
 800e482:	4680      	mov	r8, r0
 800e484:	4689      	mov	r9, r1
 800e486:	f7f2 fb1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e48a:	2800      	cmp	r0, #0
 800e48c:	d0c0      	beq.n	800e410 <_strtod_l+0x8b8>
 800e48e:	e618      	b.n	800e0c2 <_strtod_l+0x56a>
 800e490:	fffffc02 	.word	0xfffffc02
 800e494:	7ff00000 	.word	0x7ff00000
 800e498:	39500000 	.word	0x39500000
 800e49c:	000fffff 	.word	0x000fffff
 800e4a0:	7fefffff 	.word	0x7fefffff
 800e4a4:	08011358 	.word	0x08011358
 800e4a8:	4659      	mov	r1, fp
 800e4aa:	4628      	mov	r0, r5
 800e4ac:	f7ff fac0 	bl	800da30 <__ratio>
 800e4b0:	ec57 6b10 	vmov	r6, r7, d0
 800e4b4:	ee10 0a10 	vmov	r0, s0
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e4be:	4639      	mov	r1, r7
 800e4c0:	f7f2 fb16 	bl	8000af0 <__aeabi_dcmple>
 800e4c4:	2800      	cmp	r0, #0
 800e4c6:	d071      	beq.n	800e5ac <_strtod_l+0xa54>
 800e4c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d17c      	bne.n	800e5c8 <_strtod_l+0xa70>
 800e4ce:	f1b8 0f00 	cmp.w	r8, #0
 800e4d2:	d15a      	bne.n	800e58a <_strtod_l+0xa32>
 800e4d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d15d      	bne.n	800e598 <_strtod_l+0xa40>
 800e4dc:	4b90      	ldr	r3, [pc, #576]	; (800e720 <_strtod_l+0xbc8>)
 800e4de:	2200      	movs	r2, #0
 800e4e0:	4630      	mov	r0, r6
 800e4e2:	4639      	mov	r1, r7
 800e4e4:	f7f2 fafa 	bl	8000adc <__aeabi_dcmplt>
 800e4e8:	2800      	cmp	r0, #0
 800e4ea:	d15c      	bne.n	800e5a6 <_strtod_l+0xa4e>
 800e4ec:	4630      	mov	r0, r6
 800e4ee:	4639      	mov	r1, r7
 800e4f0:	4b8c      	ldr	r3, [pc, #560]	; (800e724 <_strtod_l+0xbcc>)
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	f7f2 f880 	bl	80005f8 <__aeabi_dmul>
 800e4f8:	4606      	mov	r6, r0
 800e4fa:	460f      	mov	r7, r1
 800e4fc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800e500:	9606      	str	r6, [sp, #24]
 800e502:	9307      	str	r3, [sp, #28]
 800e504:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e508:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e50c:	4b86      	ldr	r3, [pc, #536]	; (800e728 <_strtod_l+0xbd0>)
 800e50e:	ea0a 0303 	and.w	r3, sl, r3
 800e512:	930d      	str	r3, [sp, #52]	; 0x34
 800e514:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e516:	4b85      	ldr	r3, [pc, #532]	; (800e72c <_strtod_l+0xbd4>)
 800e518:	429a      	cmp	r2, r3
 800e51a:	f040 8090 	bne.w	800e63e <_strtod_l+0xae6>
 800e51e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800e522:	ec49 8b10 	vmov	d0, r8, r9
 800e526:	f7ff f9b9 	bl	800d89c <__ulp>
 800e52a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e52e:	ec51 0b10 	vmov	r0, r1, d0
 800e532:	f7f2 f861 	bl	80005f8 <__aeabi_dmul>
 800e536:	4642      	mov	r2, r8
 800e538:	464b      	mov	r3, r9
 800e53a:	f7f1 fea7 	bl	800028c <__adddf3>
 800e53e:	460b      	mov	r3, r1
 800e540:	4979      	ldr	r1, [pc, #484]	; (800e728 <_strtod_l+0xbd0>)
 800e542:	4a7b      	ldr	r2, [pc, #492]	; (800e730 <_strtod_l+0xbd8>)
 800e544:	4019      	ands	r1, r3
 800e546:	4291      	cmp	r1, r2
 800e548:	4680      	mov	r8, r0
 800e54a:	d944      	bls.n	800e5d6 <_strtod_l+0xa7e>
 800e54c:	ee18 2a90 	vmov	r2, s17
 800e550:	4b78      	ldr	r3, [pc, #480]	; (800e734 <_strtod_l+0xbdc>)
 800e552:	429a      	cmp	r2, r3
 800e554:	d104      	bne.n	800e560 <_strtod_l+0xa08>
 800e556:	ee18 3a10 	vmov	r3, s16
 800e55a:	3301      	adds	r3, #1
 800e55c:	f43f ad40 	beq.w	800dfe0 <_strtod_l+0x488>
 800e560:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800e734 <_strtod_l+0xbdc>
 800e564:	f04f 38ff 	mov.w	r8, #4294967295
 800e568:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e56a:	4620      	mov	r0, r4
 800e56c:	f7fe fe6a 	bl	800d244 <_Bfree>
 800e570:	9905      	ldr	r1, [sp, #20]
 800e572:	4620      	mov	r0, r4
 800e574:	f7fe fe66 	bl	800d244 <_Bfree>
 800e578:	4659      	mov	r1, fp
 800e57a:	4620      	mov	r0, r4
 800e57c:	f7fe fe62 	bl	800d244 <_Bfree>
 800e580:	4629      	mov	r1, r5
 800e582:	4620      	mov	r0, r4
 800e584:	f7fe fe5e 	bl	800d244 <_Bfree>
 800e588:	e609      	b.n	800e19e <_strtod_l+0x646>
 800e58a:	f1b8 0f01 	cmp.w	r8, #1
 800e58e:	d103      	bne.n	800e598 <_strtod_l+0xa40>
 800e590:	f1b9 0f00 	cmp.w	r9, #0
 800e594:	f43f ad95 	beq.w	800e0c2 <_strtod_l+0x56a>
 800e598:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800e6f0 <_strtod_l+0xb98>
 800e59c:	4f60      	ldr	r7, [pc, #384]	; (800e720 <_strtod_l+0xbc8>)
 800e59e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e5a2:	2600      	movs	r6, #0
 800e5a4:	e7ae      	b.n	800e504 <_strtod_l+0x9ac>
 800e5a6:	4f5f      	ldr	r7, [pc, #380]	; (800e724 <_strtod_l+0xbcc>)
 800e5a8:	2600      	movs	r6, #0
 800e5aa:	e7a7      	b.n	800e4fc <_strtod_l+0x9a4>
 800e5ac:	4b5d      	ldr	r3, [pc, #372]	; (800e724 <_strtod_l+0xbcc>)
 800e5ae:	4630      	mov	r0, r6
 800e5b0:	4639      	mov	r1, r7
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	f7f2 f820 	bl	80005f8 <__aeabi_dmul>
 800e5b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5ba:	4606      	mov	r6, r0
 800e5bc:	460f      	mov	r7, r1
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d09c      	beq.n	800e4fc <_strtod_l+0x9a4>
 800e5c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e5c6:	e79d      	b.n	800e504 <_strtod_l+0x9ac>
 800e5c8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800e6f8 <_strtod_l+0xba0>
 800e5cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e5d0:	ec57 6b17 	vmov	r6, r7, d7
 800e5d4:	e796      	b.n	800e504 <_strtod_l+0x9ac>
 800e5d6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e5da:	9b04      	ldr	r3, [sp, #16]
 800e5dc:	46ca      	mov	sl, r9
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d1c2      	bne.n	800e568 <_strtod_l+0xa10>
 800e5e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e5e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e5e8:	0d1b      	lsrs	r3, r3, #20
 800e5ea:	051b      	lsls	r3, r3, #20
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	d1bb      	bne.n	800e568 <_strtod_l+0xa10>
 800e5f0:	4630      	mov	r0, r6
 800e5f2:	4639      	mov	r1, r7
 800e5f4:	f7f2 fb60 	bl	8000cb8 <__aeabi_d2lz>
 800e5f8:	f7f1 ffd0 	bl	800059c <__aeabi_l2d>
 800e5fc:	4602      	mov	r2, r0
 800e5fe:	460b      	mov	r3, r1
 800e600:	4630      	mov	r0, r6
 800e602:	4639      	mov	r1, r7
 800e604:	f7f1 fe40 	bl	8000288 <__aeabi_dsub>
 800e608:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e60a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e60e:	ea43 0308 	orr.w	r3, r3, r8
 800e612:	4313      	orrs	r3, r2
 800e614:	4606      	mov	r6, r0
 800e616:	460f      	mov	r7, r1
 800e618:	d054      	beq.n	800e6c4 <_strtod_l+0xb6c>
 800e61a:	a339      	add	r3, pc, #228	; (adr r3, 800e700 <_strtod_l+0xba8>)
 800e61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e620:	f7f2 fa5c 	bl	8000adc <__aeabi_dcmplt>
 800e624:	2800      	cmp	r0, #0
 800e626:	f47f ace5 	bne.w	800dff4 <_strtod_l+0x49c>
 800e62a:	a337      	add	r3, pc, #220	; (adr r3, 800e708 <_strtod_l+0xbb0>)
 800e62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e630:	4630      	mov	r0, r6
 800e632:	4639      	mov	r1, r7
 800e634:	f7f2 fa70 	bl	8000b18 <__aeabi_dcmpgt>
 800e638:	2800      	cmp	r0, #0
 800e63a:	d095      	beq.n	800e568 <_strtod_l+0xa10>
 800e63c:	e4da      	b.n	800dff4 <_strtod_l+0x49c>
 800e63e:	9b04      	ldr	r3, [sp, #16]
 800e640:	b333      	cbz	r3, 800e690 <_strtod_l+0xb38>
 800e642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e644:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e648:	d822      	bhi.n	800e690 <_strtod_l+0xb38>
 800e64a:	a331      	add	r3, pc, #196	; (adr r3, 800e710 <_strtod_l+0xbb8>)
 800e64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e650:	4630      	mov	r0, r6
 800e652:	4639      	mov	r1, r7
 800e654:	f7f2 fa4c 	bl	8000af0 <__aeabi_dcmple>
 800e658:	b1a0      	cbz	r0, 800e684 <_strtod_l+0xb2c>
 800e65a:	4639      	mov	r1, r7
 800e65c:	4630      	mov	r0, r6
 800e65e:	f7f2 faa3 	bl	8000ba8 <__aeabi_d2uiz>
 800e662:	2801      	cmp	r0, #1
 800e664:	bf38      	it	cc
 800e666:	2001      	movcc	r0, #1
 800e668:	f7f1 ff4c 	bl	8000504 <__aeabi_ui2d>
 800e66c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e66e:	4606      	mov	r6, r0
 800e670:	460f      	mov	r7, r1
 800e672:	bb23      	cbnz	r3, 800e6be <_strtod_l+0xb66>
 800e674:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e678:	9010      	str	r0, [sp, #64]	; 0x40
 800e67a:	9311      	str	r3, [sp, #68]	; 0x44
 800e67c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e680:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e686:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e688:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e68c:	1a9b      	subs	r3, r3, r2
 800e68e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e690:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e694:	eeb0 0a48 	vmov.f32	s0, s16
 800e698:	eef0 0a68 	vmov.f32	s1, s17
 800e69c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e6a0:	f7ff f8fc 	bl	800d89c <__ulp>
 800e6a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e6a8:	ec53 2b10 	vmov	r2, r3, d0
 800e6ac:	f7f1 ffa4 	bl	80005f8 <__aeabi_dmul>
 800e6b0:	ec53 2b18 	vmov	r2, r3, d8
 800e6b4:	f7f1 fdea 	bl	800028c <__adddf3>
 800e6b8:	4680      	mov	r8, r0
 800e6ba:	4689      	mov	r9, r1
 800e6bc:	e78d      	b.n	800e5da <_strtod_l+0xa82>
 800e6be:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800e6c2:	e7db      	b.n	800e67c <_strtod_l+0xb24>
 800e6c4:	a314      	add	r3, pc, #80	; (adr r3, 800e718 <_strtod_l+0xbc0>)
 800e6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ca:	f7f2 fa07 	bl	8000adc <__aeabi_dcmplt>
 800e6ce:	e7b3      	b.n	800e638 <_strtod_l+0xae0>
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	930a      	str	r3, [sp, #40]	; 0x28
 800e6d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e6d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e6d8:	6013      	str	r3, [r2, #0]
 800e6da:	f7ff ba7c 	b.w	800dbd6 <_strtod_l+0x7e>
 800e6de:	2a65      	cmp	r2, #101	; 0x65
 800e6e0:	f43f ab75 	beq.w	800ddce <_strtod_l+0x276>
 800e6e4:	2a45      	cmp	r2, #69	; 0x45
 800e6e6:	f43f ab72 	beq.w	800ddce <_strtod_l+0x276>
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	f7ff bbaa 	b.w	800de44 <_strtod_l+0x2ec>
 800e6f0:	00000000 	.word	0x00000000
 800e6f4:	bff00000 	.word	0xbff00000
 800e6f8:	00000000 	.word	0x00000000
 800e6fc:	3ff00000 	.word	0x3ff00000
 800e700:	94a03595 	.word	0x94a03595
 800e704:	3fdfffff 	.word	0x3fdfffff
 800e708:	35afe535 	.word	0x35afe535
 800e70c:	3fe00000 	.word	0x3fe00000
 800e710:	ffc00000 	.word	0xffc00000
 800e714:	41dfffff 	.word	0x41dfffff
 800e718:	94a03595 	.word	0x94a03595
 800e71c:	3fcfffff 	.word	0x3fcfffff
 800e720:	3ff00000 	.word	0x3ff00000
 800e724:	3fe00000 	.word	0x3fe00000
 800e728:	7ff00000 	.word	0x7ff00000
 800e72c:	7fe00000 	.word	0x7fe00000
 800e730:	7c9fffff 	.word	0x7c9fffff
 800e734:	7fefffff 	.word	0x7fefffff

0800e738 <_strtod_r>:
 800e738:	4b01      	ldr	r3, [pc, #4]	; (800e740 <_strtod_r+0x8>)
 800e73a:	f7ff ba0d 	b.w	800db58 <_strtod_l>
 800e73e:	bf00      	nop
 800e740:	20000124 	.word	0x20000124

0800e744 <_strtol_l.constprop.0>:
 800e744:	2b01      	cmp	r3, #1
 800e746:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e74a:	d001      	beq.n	800e750 <_strtol_l.constprop.0+0xc>
 800e74c:	2b24      	cmp	r3, #36	; 0x24
 800e74e:	d906      	bls.n	800e75e <_strtol_l.constprop.0+0x1a>
 800e750:	f7fd fd7a 	bl	800c248 <__errno>
 800e754:	2316      	movs	r3, #22
 800e756:	6003      	str	r3, [r0, #0]
 800e758:	2000      	movs	r0, #0
 800e75a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e75e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e844 <_strtol_l.constprop.0+0x100>
 800e762:	460d      	mov	r5, r1
 800e764:	462e      	mov	r6, r5
 800e766:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e76a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e76e:	f017 0708 	ands.w	r7, r7, #8
 800e772:	d1f7      	bne.n	800e764 <_strtol_l.constprop.0+0x20>
 800e774:	2c2d      	cmp	r4, #45	; 0x2d
 800e776:	d132      	bne.n	800e7de <_strtol_l.constprop.0+0x9a>
 800e778:	782c      	ldrb	r4, [r5, #0]
 800e77a:	2701      	movs	r7, #1
 800e77c:	1cb5      	adds	r5, r6, #2
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d05b      	beq.n	800e83a <_strtol_l.constprop.0+0xf6>
 800e782:	2b10      	cmp	r3, #16
 800e784:	d109      	bne.n	800e79a <_strtol_l.constprop.0+0x56>
 800e786:	2c30      	cmp	r4, #48	; 0x30
 800e788:	d107      	bne.n	800e79a <_strtol_l.constprop.0+0x56>
 800e78a:	782c      	ldrb	r4, [r5, #0]
 800e78c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e790:	2c58      	cmp	r4, #88	; 0x58
 800e792:	d14d      	bne.n	800e830 <_strtol_l.constprop.0+0xec>
 800e794:	786c      	ldrb	r4, [r5, #1]
 800e796:	2310      	movs	r3, #16
 800e798:	3502      	adds	r5, #2
 800e79a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e79e:	f108 38ff 	add.w	r8, r8, #4294967295
 800e7a2:	f04f 0e00 	mov.w	lr, #0
 800e7a6:	fbb8 f9f3 	udiv	r9, r8, r3
 800e7aa:	4676      	mov	r6, lr
 800e7ac:	fb03 8a19 	mls	sl, r3, r9, r8
 800e7b0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e7b4:	f1bc 0f09 	cmp.w	ip, #9
 800e7b8:	d816      	bhi.n	800e7e8 <_strtol_l.constprop.0+0xa4>
 800e7ba:	4664      	mov	r4, ip
 800e7bc:	42a3      	cmp	r3, r4
 800e7be:	dd24      	ble.n	800e80a <_strtol_l.constprop.0+0xc6>
 800e7c0:	f1be 3fff 	cmp.w	lr, #4294967295
 800e7c4:	d008      	beq.n	800e7d8 <_strtol_l.constprop.0+0x94>
 800e7c6:	45b1      	cmp	r9, r6
 800e7c8:	d31c      	bcc.n	800e804 <_strtol_l.constprop.0+0xc0>
 800e7ca:	d101      	bne.n	800e7d0 <_strtol_l.constprop.0+0x8c>
 800e7cc:	45a2      	cmp	sl, r4
 800e7ce:	db19      	blt.n	800e804 <_strtol_l.constprop.0+0xc0>
 800e7d0:	fb06 4603 	mla	r6, r6, r3, r4
 800e7d4:	f04f 0e01 	mov.w	lr, #1
 800e7d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e7dc:	e7e8      	b.n	800e7b0 <_strtol_l.constprop.0+0x6c>
 800e7de:	2c2b      	cmp	r4, #43	; 0x2b
 800e7e0:	bf04      	itt	eq
 800e7e2:	782c      	ldrbeq	r4, [r5, #0]
 800e7e4:	1cb5      	addeq	r5, r6, #2
 800e7e6:	e7ca      	b.n	800e77e <_strtol_l.constprop.0+0x3a>
 800e7e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e7ec:	f1bc 0f19 	cmp.w	ip, #25
 800e7f0:	d801      	bhi.n	800e7f6 <_strtol_l.constprop.0+0xb2>
 800e7f2:	3c37      	subs	r4, #55	; 0x37
 800e7f4:	e7e2      	b.n	800e7bc <_strtol_l.constprop.0+0x78>
 800e7f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e7fa:	f1bc 0f19 	cmp.w	ip, #25
 800e7fe:	d804      	bhi.n	800e80a <_strtol_l.constprop.0+0xc6>
 800e800:	3c57      	subs	r4, #87	; 0x57
 800e802:	e7db      	b.n	800e7bc <_strtol_l.constprop.0+0x78>
 800e804:	f04f 3eff 	mov.w	lr, #4294967295
 800e808:	e7e6      	b.n	800e7d8 <_strtol_l.constprop.0+0x94>
 800e80a:	f1be 3fff 	cmp.w	lr, #4294967295
 800e80e:	d105      	bne.n	800e81c <_strtol_l.constprop.0+0xd8>
 800e810:	2322      	movs	r3, #34	; 0x22
 800e812:	6003      	str	r3, [r0, #0]
 800e814:	4646      	mov	r6, r8
 800e816:	b942      	cbnz	r2, 800e82a <_strtol_l.constprop.0+0xe6>
 800e818:	4630      	mov	r0, r6
 800e81a:	e79e      	b.n	800e75a <_strtol_l.constprop.0+0x16>
 800e81c:	b107      	cbz	r7, 800e820 <_strtol_l.constprop.0+0xdc>
 800e81e:	4276      	negs	r6, r6
 800e820:	2a00      	cmp	r2, #0
 800e822:	d0f9      	beq.n	800e818 <_strtol_l.constprop.0+0xd4>
 800e824:	f1be 0f00 	cmp.w	lr, #0
 800e828:	d000      	beq.n	800e82c <_strtol_l.constprop.0+0xe8>
 800e82a:	1e69      	subs	r1, r5, #1
 800e82c:	6011      	str	r1, [r2, #0]
 800e82e:	e7f3      	b.n	800e818 <_strtol_l.constprop.0+0xd4>
 800e830:	2430      	movs	r4, #48	; 0x30
 800e832:	2b00      	cmp	r3, #0
 800e834:	d1b1      	bne.n	800e79a <_strtol_l.constprop.0+0x56>
 800e836:	2308      	movs	r3, #8
 800e838:	e7af      	b.n	800e79a <_strtol_l.constprop.0+0x56>
 800e83a:	2c30      	cmp	r4, #48	; 0x30
 800e83c:	d0a5      	beq.n	800e78a <_strtol_l.constprop.0+0x46>
 800e83e:	230a      	movs	r3, #10
 800e840:	e7ab      	b.n	800e79a <_strtol_l.constprop.0+0x56>
 800e842:	bf00      	nop
 800e844:	08011011 	.word	0x08011011

0800e848 <_strtol_r>:
 800e848:	f7ff bf7c 	b.w	800e744 <_strtol_l.constprop.0>

0800e84c <__ssputs_r>:
 800e84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e850:	688e      	ldr	r6, [r1, #8]
 800e852:	461f      	mov	r7, r3
 800e854:	42be      	cmp	r6, r7
 800e856:	680b      	ldr	r3, [r1, #0]
 800e858:	4682      	mov	sl, r0
 800e85a:	460c      	mov	r4, r1
 800e85c:	4690      	mov	r8, r2
 800e85e:	d82c      	bhi.n	800e8ba <__ssputs_r+0x6e>
 800e860:	898a      	ldrh	r2, [r1, #12]
 800e862:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e866:	d026      	beq.n	800e8b6 <__ssputs_r+0x6a>
 800e868:	6965      	ldr	r5, [r4, #20]
 800e86a:	6909      	ldr	r1, [r1, #16]
 800e86c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e870:	eba3 0901 	sub.w	r9, r3, r1
 800e874:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e878:	1c7b      	adds	r3, r7, #1
 800e87a:	444b      	add	r3, r9
 800e87c:	106d      	asrs	r5, r5, #1
 800e87e:	429d      	cmp	r5, r3
 800e880:	bf38      	it	cc
 800e882:	461d      	movcc	r5, r3
 800e884:	0553      	lsls	r3, r2, #21
 800e886:	d527      	bpl.n	800e8d8 <__ssputs_r+0x8c>
 800e888:	4629      	mov	r1, r5
 800e88a:	f7fe fc0f 	bl	800d0ac <_malloc_r>
 800e88e:	4606      	mov	r6, r0
 800e890:	b360      	cbz	r0, 800e8ec <__ssputs_r+0xa0>
 800e892:	6921      	ldr	r1, [r4, #16]
 800e894:	464a      	mov	r2, r9
 800e896:	f7fd fd04 	bl	800c2a2 <memcpy>
 800e89a:	89a3      	ldrh	r3, [r4, #12]
 800e89c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e8a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8a4:	81a3      	strh	r3, [r4, #12]
 800e8a6:	6126      	str	r6, [r4, #16]
 800e8a8:	6165      	str	r5, [r4, #20]
 800e8aa:	444e      	add	r6, r9
 800e8ac:	eba5 0509 	sub.w	r5, r5, r9
 800e8b0:	6026      	str	r6, [r4, #0]
 800e8b2:	60a5      	str	r5, [r4, #8]
 800e8b4:	463e      	mov	r6, r7
 800e8b6:	42be      	cmp	r6, r7
 800e8b8:	d900      	bls.n	800e8bc <__ssputs_r+0x70>
 800e8ba:	463e      	mov	r6, r7
 800e8bc:	6820      	ldr	r0, [r4, #0]
 800e8be:	4632      	mov	r2, r6
 800e8c0:	4641      	mov	r1, r8
 800e8c2:	f000 f9c9 	bl	800ec58 <memmove>
 800e8c6:	68a3      	ldr	r3, [r4, #8]
 800e8c8:	1b9b      	subs	r3, r3, r6
 800e8ca:	60a3      	str	r3, [r4, #8]
 800e8cc:	6823      	ldr	r3, [r4, #0]
 800e8ce:	4433      	add	r3, r6
 800e8d0:	6023      	str	r3, [r4, #0]
 800e8d2:	2000      	movs	r0, #0
 800e8d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8d8:	462a      	mov	r2, r5
 800e8da:	f000 fd9e 	bl	800f41a <_realloc_r>
 800e8de:	4606      	mov	r6, r0
 800e8e0:	2800      	cmp	r0, #0
 800e8e2:	d1e0      	bne.n	800e8a6 <__ssputs_r+0x5a>
 800e8e4:	6921      	ldr	r1, [r4, #16]
 800e8e6:	4650      	mov	r0, sl
 800e8e8:	f7fe fb6c 	bl	800cfc4 <_free_r>
 800e8ec:	230c      	movs	r3, #12
 800e8ee:	f8ca 3000 	str.w	r3, [sl]
 800e8f2:	89a3      	ldrh	r3, [r4, #12]
 800e8f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8f8:	81a3      	strh	r3, [r4, #12]
 800e8fa:	f04f 30ff 	mov.w	r0, #4294967295
 800e8fe:	e7e9      	b.n	800e8d4 <__ssputs_r+0x88>

0800e900 <_svfiprintf_r>:
 800e900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e904:	4698      	mov	r8, r3
 800e906:	898b      	ldrh	r3, [r1, #12]
 800e908:	061b      	lsls	r3, r3, #24
 800e90a:	b09d      	sub	sp, #116	; 0x74
 800e90c:	4607      	mov	r7, r0
 800e90e:	460d      	mov	r5, r1
 800e910:	4614      	mov	r4, r2
 800e912:	d50e      	bpl.n	800e932 <_svfiprintf_r+0x32>
 800e914:	690b      	ldr	r3, [r1, #16]
 800e916:	b963      	cbnz	r3, 800e932 <_svfiprintf_r+0x32>
 800e918:	2140      	movs	r1, #64	; 0x40
 800e91a:	f7fe fbc7 	bl	800d0ac <_malloc_r>
 800e91e:	6028      	str	r0, [r5, #0]
 800e920:	6128      	str	r0, [r5, #16]
 800e922:	b920      	cbnz	r0, 800e92e <_svfiprintf_r+0x2e>
 800e924:	230c      	movs	r3, #12
 800e926:	603b      	str	r3, [r7, #0]
 800e928:	f04f 30ff 	mov.w	r0, #4294967295
 800e92c:	e0d0      	b.n	800ead0 <_svfiprintf_r+0x1d0>
 800e92e:	2340      	movs	r3, #64	; 0x40
 800e930:	616b      	str	r3, [r5, #20]
 800e932:	2300      	movs	r3, #0
 800e934:	9309      	str	r3, [sp, #36]	; 0x24
 800e936:	2320      	movs	r3, #32
 800e938:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e93c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e940:	2330      	movs	r3, #48	; 0x30
 800e942:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800eae8 <_svfiprintf_r+0x1e8>
 800e946:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e94a:	f04f 0901 	mov.w	r9, #1
 800e94e:	4623      	mov	r3, r4
 800e950:	469a      	mov	sl, r3
 800e952:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e956:	b10a      	cbz	r2, 800e95c <_svfiprintf_r+0x5c>
 800e958:	2a25      	cmp	r2, #37	; 0x25
 800e95a:	d1f9      	bne.n	800e950 <_svfiprintf_r+0x50>
 800e95c:	ebba 0b04 	subs.w	fp, sl, r4
 800e960:	d00b      	beq.n	800e97a <_svfiprintf_r+0x7a>
 800e962:	465b      	mov	r3, fp
 800e964:	4622      	mov	r2, r4
 800e966:	4629      	mov	r1, r5
 800e968:	4638      	mov	r0, r7
 800e96a:	f7ff ff6f 	bl	800e84c <__ssputs_r>
 800e96e:	3001      	adds	r0, #1
 800e970:	f000 80a9 	beq.w	800eac6 <_svfiprintf_r+0x1c6>
 800e974:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e976:	445a      	add	r2, fp
 800e978:	9209      	str	r2, [sp, #36]	; 0x24
 800e97a:	f89a 3000 	ldrb.w	r3, [sl]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	f000 80a1 	beq.w	800eac6 <_svfiprintf_r+0x1c6>
 800e984:	2300      	movs	r3, #0
 800e986:	f04f 32ff 	mov.w	r2, #4294967295
 800e98a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e98e:	f10a 0a01 	add.w	sl, sl, #1
 800e992:	9304      	str	r3, [sp, #16]
 800e994:	9307      	str	r3, [sp, #28]
 800e996:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e99a:	931a      	str	r3, [sp, #104]	; 0x68
 800e99c:	4654      	mov	r4, sl
 800e99e:	2205      	movs	r2, #5
 800e9a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9a4:	4850      	ldr	r0, [pc, #320]	; (800eae8 <_svfiprintf_r+0x1e8>)
 800e9a6:	f7f1 fc13 	bl	80001d0 <memchr>
 800e9aa:	9a04      	ldr	r2, [sp, #16]
 800e9ac:	b9d8      	cbnz	r0, 800e9e6 <_svfiprintf_r+0xe6>
 800e9ae:	06d0      	lsls	r0, r2, #27
 800e9b0:	bf44      	itt	mi
 800e9b2:	2320      	movmi	r3, #32
 800e9b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9b8:	0711      	lsls	r1, r2, #28
 800e9ba:	bf44      	itt	mi
 800e9bc:	232b      	movmi	r3, #43	; 0x2b
 800e9be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9c2:	f89a 3000 	ldrb.w	r3, [sl]
 800e9c6:	2b2a      	cmp	r3, #42	; 0x2a
 800e9c8:	d015      	beq.n	800e9f6 <_svfiprintf_r+0xf6>
 800e9ca:	9a07      	ldr	r2, [sp, #28]
 800e9cc:	4654      	mov	r4, sl
 800e9ce:	2000      	movs	r0, #0
 800e9d0:	f04f 0c0a 	mov.w	ip, #10
 800e9d4:	4621      	mov	r1, r4
 800e9d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9da:	3b30      	subs	r3, #48	; 0x30
 800e9dc:	2b09      	cmp	r3, #9
 800e9de:	d94d      	bls.n	800ea7c <_svfiprintf_r+0x17c>
 800e9e0:	b1b0      	cbz	r0, 800ea10 <_svfiprintf_r+0x110>
 800e9e2:	9207      	str	r2, [sp, #28]
 800e9e4:	e014      	b.n	800ea10 <_svfiprintf_r+0x110>
 800e9e6:	eba0 0308 	sub.w	r3, r0, r8
 800e9ea:	fa09 f303 	lsl.w	r3, r9, r3
 800e9ee:	4313      	orrs	r3, r2
 800e9f0:	9304      	str	r3, [sp, #16]
 800e9f2:	46a2      	mov	sl, r4
 800e9f4:	e7d2      	b.n	800e99c <_svfiprintf_r+0x9c>
 800e9f6:	9b03      	ldr	r3, [sp, #12]
 800e9f8:	1d19      	adds	r1, r3, #4
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	9103      	str	r1, [sp, #12]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	bfbb      	ittet	lt
 800ea02:	425b      	neglt	r3, r3
 800ea04:	f042 0202 	orrlt.w	r2, r2, #2
 800ea08:	9307      	strge	r3, [sp, #28]
 800ea0a:	9307      	strlt	r3, [sp, #28]
 800ea0c:	bfb8      	it	lt
 800ea0e:	9204      	strlt	r2, [sp, #16]
 800ea10:	7823      	ldrb	r3, [r4, #0]
 800ea12:	2b2e      	cmp	r3, #46	; 0x2e
 800ea14:	d10c      	bne.n	800ea30 <_svfiprintf_r+0x130>
 800ea16:	7863      	ldrb	r3, [r4, #1]
 800ea18:	2b2a      	cmp	r3, #42	; 0x2a
 800ea1a:	d134      	bne.n	800ea86 <_svfiprintf_r+0x186>
 800ea1c:	9b03      	ldr	r3, [sp, #12]
 800ea1e:	1d1a      	adds	r2, r3, #4
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	9203      	str	r2, [sp, #12]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	bfb8      	it	lt
 800ea28:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea2c:	3402      	adds	r4, #2
 800ea2e:	9305      	str	r3, [sp, #20]
 800ea30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800eaf8 <_svfiprintf_r+0x1f8>
 800ea34:	7821      	ldrb	r1, [r4, #0]
 800ea36:	2203      	movs	r2, #3
 800ea38:	4650      	mov	r0, sl
 800ea3a:	f7f1 fbc9 	bl	80001d0 <memchr>
 800ea3e:	b138      	cbz	r0, 800ea50 <_svfiprintf_r+0x150>
 800ea40:	9b04      	ldr	r3, [sp, #16]
 800ea42:	eba0 000a 	sub.w	r0, r0, sl
 800ea46:	2240      	movs	r2, #64	; 0x40
 800ea48:	4082      	lsls	r2, r0
 800ea4a:	4313      	orrs	r3, r2
 800ea4c:	3401      	adds	r4, #1
 800ea4e:	9304      	str	r3, [sp, #16]
 800ea50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea54:	4825      	ldr	r0, [pc, #148]	; (800eaec <_svfiprintf_r+0x1ec>)
 800ea56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea5a:	2206      	movs	r2, #6
 800ea5c:	f7f1 fbb8 	bl	80001d0 <memchr>
 800ea60:	2800      	cmp	r0, #0
 800ea62:	d038      	beq.n	800ead6 <_svfiprintf_r+0x1d6>
 800ea64:	4b22      	ldr	r3, [pc, #136]	; (800eaf0 <_svfiprintf_r+0x1f0>)
 800ea66:	bb1b      	cbnz	r3, 800eab0 <_svfiprintf_r+0x1b0>
 800ea68:	9b03      	ldr	r3, [sp, #12]
 800ea6a:	3307      	adds	r3, #7
 800ea6c:	f023 0307 	bic.w	r3, r3, #7
 800ea70:	3308      	adds	r3, #8
 800ea72:	9303      	str	r3, [sp, #12]
 800ea74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea76:	4433      	add	r3, r6
 800ea78:	9309      	str	r3, [sp, #36]	; 0x24
 800ea7a:	e768      	b.n	800e94e <_svfiprintf_r+0x4e>
 800ea7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea80:	460c      	mov	r4, r1
 800ea82:	2001      	movs	r0, #1
 800ea84:	e7a6      	b.n	800e9d4 <_svfiprintf_r+0xd4>
 800ea86:	2300      	movs	r3, #0
 800ea88:	3401      	adds	r4, #1
 800ea8a:	9305      	str	r3, [sp, #20]
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	f04f 0c0a 	mov.w	ip, #10
 800ea92:	4620      	mov	r0, r4
 800ea94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea98:	3a30      	subs	r2, #48	; 0x30
 800ea9a:	2a09      	cmp	r2, #9
 800ea9c:	d903      	bls.n	800eaa6 <_svfiprintf_r+0x1a6>
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d0c6      	beq.n	800ea30 <_svfiprintf_r+0x130>
 800eaa2:	9105      	str	r1, [sp, #20]
 800eaa4:	e7c4      	b.n	800ea30 <_svfiprintf_r+0x130>
 800eaa6:	fb0c 2101 	mla	r1, ip, r1, r2
 800eaaa:	4604      	mov	r4, r0
 800eaac:	2301      	movs	r3, #1
 800eaae:	e7f0      	b.n	800ea92 <_svfiprintf_r+0x192>
 800eab0:	ab03      	add	r3, sp, #12
 800eab2:	9300      	str	r3, [sp, #0]
 800eab4:	462a      	mov	r2, r5
 800eab6:	4b0f      	ldr	r3, [pc, #60]	; (800eaf4 <_svfiprintf_r+0x1f4>)
 800eab8:	a904      	add	r1, sp, #16
 800eaba:	4638      	mov	r0, r7
 800eabc:	f7fc fc76 	bl	800b3ac <_printf_float>
 800eac0:	1c42      	adds	r2, r0, #1
 800eac2:	4606      	mov	r6, r0
 800eac4:	d1d6      	bne.n	800ea74 <_svfiprintf_r+0x174>
 800eac6:	89ab      	ldrh	r3, [r5, #12]
 800eac8:	065b      	lsls	r3, r3, #25
 800eaca:	f53f af2d 	bmi.w	800e928 <_svfiprintf_r+0x28>
 800eace:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ead0:	b01d      	add	sp, #116	; 0x74
 800ead2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ead6:	ab03      	add	r3, sp, #12
 800ead8:	9300      	str	r3, [sp, #0]
 800eada:	462a      	mov	r2, r5
 800eadc:	4b05      	ldr	r3, [pc, #20]	; (800eaf4 <_svfiprintf_r+0x1f4>)
 800eade:	a904      	add	r1, sp, #16
 800eae0:	4638      	mov	r0, r7
 800eae2:	f7fc ff07 	bl	800b8f4 <_printf_i>
 800eae6:	e7eb      	b.n	800eac0 <_svfiprintf_r+0x1c0>
 800eae8:	08011380 	.word	0x08011380
 800eaec:	0801138a 	.word	0x0801138a
 800eaf0:	0800b3ad 	.word	0x0800b3ad
 800eaf4:	0800e84d 	.word	0x0800e84d
 800eaf8:	08011386 	.word	0x08011386

0800eafc <__sflush_r>:
 800eafc:	898a      	ldrh	r2, [r1, #12]
 800eafe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb02:	4605      	mov	r5, r0
 800eb04:	0710      	lsls	r0, r2, #28
 800eb06:	460c      	mov	r4, r1
 800eb08:	d458      	bmi.n	800ebbc <__sflush_r+0xc0>
 800eb0a:	684b      	ldr	r3, [r1, #4]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	dc05      	bgt.n	800eb1c <__sflush_r+0x20>
 800eb10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	dc02      	bgt.n	800eb1c <__sflush_r+0x20>
 800eb16:	2000      	movs	r0, #0
 800eb18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb1e:	2e00      	cmp	r6, #0
 800eb20:	d0f9      	beq.n	800eb16 <__sflush_r+0x1a>
 800eb22:	2300      	movs	r3, #0
 800eb24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb28:	682f      	ldr	r7, [r5, #0]
 800eb2a:	6a21      	ldr	r1, [r4, #32]
 800eb2c:	602b      	str	r3, [r5, #0]
 800eb2e:	d032      	beq.n	800eb96 <__sflush_r+0x9a>
 800eb30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb32:	89a3      	ldrh	r3, [r4, #12]
 800eb34:	075a      	lsls	r2, r3, #29
 800eb36:	d505      	bpl.n	800eb44 <__sflush_r+0x48>
 800eb38:	6863      	ldr	r3, [r4, #4]
 800eb3a:	1ac0      	subs	r0, r0, r3
 800eb3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb3e:	b10b      	cbz	r3, 800eb44 <__sflush_r+0x48>
 800eb40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb42:	1ac0      	subs	r0, r0, r3
 800eb44:	2300      	movs	r3, #0
 800eb46:	4602      	mov	r2, r0
 800eb48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb4a:	6a21      	ldr	r1, [r4, #32]
 800eb4c:	4628      	mov	r0, r5
 800eb4e:	47b0      	blx	r6
 800eb50:	1c43      	adds	r3, r0, #1
 800eb52:	89a3      	ldrh	r3, [r4, #12]
 800eb54:	d106      	bne.n	800eb64 <__sflush_r+0x68>
 800eb56:	6829      	ldr	r1, [r5, #0]
 800eb58:	291d      	cmp	r1, #29
 800eb5a:	d82b      	bhi.n	800ebb4 <__sflush_r+0xb8>
 800eb5c:	4a29      	ldr	r2, [pc, #164]	; (800ec04 <__sflush_r+0x108>)
 800eb5e:	410a      	asrs	r2, r1
 800eb60:	07d6      	lsls	r6, r2, #31
 800eb62:	d427      	bmi.n	800ebb4 <__sflush_r+0xb8>
 800eb64:	2200      	movs	r2, #0
 800eb66:	6062      	str	r2, [r4, #4]
 800eb68:	04d9      	lsls	r1, r3, #19
 800eb6a:	6922      	ldr	r2, [r4, #16]
 800eb6c:	6022      	str	r2, [r4, #0]
 800eb6e:	d504      	bpl.n	800eb7a <__sflush_r+0x7e>
 800eb70:	1c42      	adds	r2, r0, #1
 800eb72:	d101      	bne.n	800eb78 <__sflush_r+0x7c>
 800eb74:	682b      	ldr	r3, [r5, #0]
 800eb76:	b903      	cbnz	r3, 800eb7a <__sflush_r+0x7e>
 800eb78:	6560      	str	r0, [r4, #84]	; 0x54
 800eb7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb7c:	602f      	str	r7, [r5, #0]
 800eb7e:	2900      	cmp	r1, #0
 800eb80:	d0c9      	beq.n	800eb16 <__sflush_r+0x1a>
 800eb82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb86:	4299      	cmp	r1, r3
 800eb88:	d002      	beq.n	800eb90 <__sflush_r+0x94>
 800eb8a:	4628      	mov	r0, r5
 800eb8c:	f7fe fa1a 	bl	800cfc4 <_free_r>
 800eb90:	2000      	movs	r0, #0
 800eb92:	6360      	str	r0, [r4, #52]	; 0x34
 800eb94:	e7c0      	b.n	800eb18 <__sflush_r+0x1c>
 800eb96:	2301      	movs	r3, #1
 800eb98:	4628      	mov	r0, r5
 800eb9a:	47b0      	blx	r6
 800eb9c:	1c41      	adds	r1, r0, #1
 800eb9e:	d1c8      	bne.n	800eb32 <__sflush_r+0x36>
 800eba0:	682b      	ldr	r3, [r5, #0]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d0c5      	beq.n	800eb32 <__sflush_r+0x36>
 800eba6:	2b1d      	cmp	r3, #29
 800eba8:	d001      	beq.n	800ebae <__sflush_r+0xb2>
 800ebaa:	2b16      	cmp	r3, #22
 800ebac:	d101      	bne.n	800ebb2 <__sflush_r+0xb6>
 800ebae:	602f      	str	r7, [r5, #0]
 800ebb0:	e7b1      	b.n	800eb16 <__sflush_r+0x1a>
 800ebb2:	89a3      	ldrh	r3, [r4, #12]
 800ebb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebb8:	81a3      	strh	r3, [r4, #12]
 800ebba:	e7ad      	b.n	800eb18 <__sflush_r+0x1c>
 800ebbc:	690f      	ldr	r7, [r1, #16]
 800ebbe:	2f00      	cmp	r7, #0
 800ebc0:	d0a9      	beq.n	800eb16 <__sflush_r+0x1a>
 800ebc2:	0793      	lsls	r3, r2, #30
 800ebc4:	680e      	ldr	r6, [r1, #0]
 800ebc6:	bf08      	it	eq
 800ebc8:	694b      	ldreq	r3, [r1, #20]
 800ebca:	600f      	str	r7, [r1, #0]
 800ebcc:	bf18      	it	ne
 800ebce:	2300      	movne	r3, #0
 800ebd0:	eba6 0807 	sub.w	r8, r6, r7
 800ebd4:	608b      	str	r3, [r1, #8]
 800ebd6:	f1b8 0f00 	cmp.w	r8, #0
 800ebda:	dd9c      	ble.n	800eb16 <__sflush_r+0x1a>
 800ebdc:	6a21      	ldr	r1, [r4, #32]
 800ebde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ebe0:	4643      	mov	r3, r8
 800ebe2:	463a      	mov	r2, r7
 800ebe4:	4628      	mov	r0, r5
 800ebe6:	47b0      	blx	r6
 800ebe8:	2800      	cmp	r0, #0
 800ebea:	dc06      	bgt.n	800ebfa <__sflush_r+0xfe>
 800ebec:	89a3      	ldrh	r3, [r4, #12]
 800ebee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebf2:	81a3      	strh	r3, [r4, #12]
 800ebf4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebf8:	e78e      	b.n	800eb18 <__sflush_r+0x1c>
 800ebfa:	4407      	add	r7, r0
 800ebfc:	eba8 0800 	sub.w	r8, r8, r0
 800ec00:	e7e9      	b.n	800ebd6 <__sflush_r+0xda>
 800ec02:	bf00      	nop
 800ec04:	dfbffffe 	.word	0xdfbffffe

0800ec08 <_fflush_r>:
 800ec08:	b538      	push	{r3, r4, r5, lr}
 800ec0a:	690b      	ldr	r3, [r1, #16]
 800ec0c:	4605      	mov	r5, r0
 800ec0e:	460c      	mov	r4, r1
 800ec10:	b913      	cbnz	r3, 800ec18 <_fflush_r+0x10>
 800ec12:	2500      	movs	r5, #0
 800ec14:	4628      	mov	r0, r5
 800ec16:	bd38      	pop	{r3, r4, r5, pc}
 800ec18:	b118      	cbz	r0, 800ec22 <_fflush_r+0x1a>
 800ec1a:	6a03      	ldr	r3, [r0, #32]
 800ec1c:	b90b      	cbnz	r3, 800ec22 <_fflush_r+0x1a>
 800ec1e:	f7fd fa27 	bl	800c070 <__sinit>
 800ec22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d0f3      	beq.n	800ec12 <_fflush_r+0xa>
 800ec2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec2c:	07d0      	lsls	r0, r2, #31
 800ec2e:	d404      	bmi.n	800ec3a <_fflush_r+0x32>
 800ec30:	0599      	lsls	r1, r3, #22
 800ec32:	d402      	bmi.n	800ec3a <_fflush_r+0x32>
 800ec34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec36:	f7fd fb32 	bl	800c29e <__retarget_lock_acquire_recursive>
 800ec3a:	4628      	mov	r0, r5
 800ec3c:	4621      	mov	r1, r4
 800ec3e:	f7ff ff5d 	bl	800eafc <__sflush_r>
 800ec42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec44:	07da      	lsls	r2, r3, #31
 800ec46:	4605      	mov	r5, r0
 800ec48:	d4e4      	bmi.n	800ec14 <_fflush_r+0xc>
 800ec4a:	89a3      	ldrh	r3, [r4, #12]
 800ec4c:	059b      	lsls	r3, r3, #22
 800ec4e:	d4e1      	bmi.n	800ec14 <_fflush_r+0xc>
 800ec50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec52:	f7fd fb25 	bl	800c2a0 <__retarget_lock_release_recursive>
 800ec56:	e7dd      	b.n	800ec14 <_fflush_r+0xc>

0800ec58 <memmove>:
 800ec58:	4288      	cmp	r0, r1
 800ec5a:	b510      	push	{r4, lr}
 800ec5c:	eb01 0402 	add.w	r4, r1, r2
 800ec60:	d902      	bls.n	800ec68 <memmove+0x10>
 800ec62:	4284      	cmp	r4, r0
 800ec64:	4623      	mov	r3, r4
 800ec66:	d807      	bhi.n	800ec78 <memmove+0x20>
 800ec68:	1e43      	subs	r3, r0, #1
 800ec6a:	42a1      	cmp	r1, r4
 800ec6c:	d008      	beq.n	800ec80 <memmove+0x28>
 800ec6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec76:	e7f8      	b.n	800ec6a <memmove+0x12>
 800ec78:	4402      	add	r2, r0
 800ec7a:	4601      	mov	r1, r0
 800ec7c:	428a      	cmp	r2, r1
 800ec7e:	d100      	bne.n	800ec82 <memmove+0x2a>
 800ec80:	bd10      	pop	{r4, pc}
 800ec82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec8a:	e7f7      	b.n	800ec7c <memmove+0x24>

0800ec8c <strncmp>:
 800ec8c:	b510      	push	{r4, lr}
 800ec8e:	b16a      	cbz	r2, 800ecac <strncmp+0x20>
 800ec90:	3901      	subs	r1, #1
 800ec92:	1884      	adds	r4, r0, r2
 800ec94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec98:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d103      	bne.n	800eca8 <strncmp+0x1c>
 800eca0:	42a0      	cmp	r0, r4
 800eca2:	d001      	beq.n	800eca8 <strncmp+0x1c>
 800eca4:	2a00      	cmp	r2, #0
 800eca6:	d1f5      	bne.n	800ec94 <strncmp+0x8>
 800eca8:	1ad0      	subs	r0, r2, r3
 800ecaa:	bd10      	pop	{r4, pc}
 800ecac:	4610      	mov	r0, r2
 800ecae:	e7fc      	b.n	800ecaa <strncmp+0x1e>

0800ecb0 <_sbrk_r>:
 800ecb0:	b538      	push	{r3, r4, r5, lr}
 800ecb2:	4d06      	ldr	r5, [pc, #24]	; (800eccc <_sbrk_r+0x1c>)
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	4608      	mov	r0, r1
 800ecba:	602b      	str	r3, [r5, #0]
 800ecbc:	f7f4 ff80 	bl	8003bc0 <_sbrk>
 800ecc0:	1c43      	adds	r3, r0, #1
 800ecc2:	d102      	bne.n	800ecca <_sbrk_r+0x1a>
 800ecc4:	682b      	ldr	r3, [r5, #0]
 800ecc6:	b103      	cbz	r3, 800ecca <_sbrk_r+0x1a>
 800ecc8:	6023      	str	r3, [r4, #0]
 800ecca:	bd38      	pop	{r3, r4, r5, pc}
 800eccc:	20005b24 	.word	0x20005b24

0800ecd0 <nan>:
 800ecd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ecd8 <nan+0x8>
 800ecd4:	4770      	bx	lr
 800ecd6:	bf00      	nop
 800ecd8:	00000000 	.word	0x00000000
 800ecdc:	7ff80000 	.word	0x7ff80000

0800ece0 <__assert_func>:
 800ece0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ece2:	4614      	mov	r4, r2
 800ece4:	461a      	mov	r2, r3
 800ece6:	4b09      	ldr	r3, [pc, #36]	; (800ed0c <__assert_func+0x2c>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4605      	mov	r5, r0
 800ecec:	68d8      	ldr	r0, [r3, #12]
 800ecee:	b14c      	cbz	r4, 800ed04 <__assert_func+0x24>
 800ecf0:	4b07      	ldr	r3, [pc, #28]	; (800ed10 <__assert_func+0x30>)
 800ecf2:	9100      	str	r1, [sp, #0]
 800ecf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ecf8:	4906      	ldr	r1, [pc, #24]	; (800ed14 <__assert_func+0x34>)
 800ecfa:	462b      	mov	r3, r5
 800ecfc:	f000 fbca 	bl	800f494 <fiprintf>
 800ed00:	f000 fbda 	bl	800f4b8 <abort>
 800ed04:	4b04      	ldr	r3, [pc, #16]	; (800ed18 <__assert_func+0x38>)
 800ed06:	461c      	mov	r4, r3
 800ed08:	e7f3      	b.n	800ecf2 <__assert_func+0x12>
 800ed0a:	bf00      	nop
 800ed0c:	20000120 	.word	0x20000120
 800ed10:	08011399 	.word	0x08011399
 800ed14:	080113a6 	.word	0x080113a6
 800ed18:	080113d4 	.word	0x080113d4

0800ed1c <_calloc_r>:
 800ed1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed1e:	fba1 2402 	umull	r2, r4, r1, r2
 800ed22:	b94c      	cbnz	r4, 800ed38 <_calloc_r+0x1c>
 800ed24:	4611      	mov	r1, r2
 800ed26:	9201      	str	r2, [sp, #4]
 800ed28:	f7fe f9c0 	bl	800d0ac <_malloc_r>
 800ed2c:	9a01      	ldr	r2, [sp, #4]
 800ed2e:	4605      	mov	r5, r0
 800ed30:	b930      	cbnz	r0, 800ed40 <_calloc_r+0x24>
 800ed32:	4628      	mov	r0, r5
 800ed34:	b003      	add	sp, #12
 800ed36:	bd30      	pop	{r4, r5, pc}
 800ed38:	220c      	movs	r2, #12
 800ed3a:	6002      	str	r2, [r0, #0]
 800ed3c:	2500      	movs	r5, #0
 800ed3e:	e7f8      	b.n	800ed32 <_calloc_r+0x16>
 800ed40:	4621      	mov	r1, r4
 800ed42:	f7fd fa2e 	bl	800c1a2 <memset>
 800ed46:	e7f4      	b.n	800ed32 <_calloc_r+0x16>

0800ed48 <rshift>:
 800ed48:	6903      	ldr	r3, [r0, #16]
 800ed4a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ed4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed52:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ed56:	f100 0414 	add.w	r4, r0, #20
 800ed5a:	dd45      	ble.n	800ede8 <rshift+0xa0>
 800ed5c:	f011 011f 	ands.w	r1, r1, #31
 800ed60:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ed64:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ed68:	d10c      	bne.n	800ed84 <rshift+0x3c>
 800ed6a:	f100 0710 	add.w	r7, r0, #16
 800ed6e:	4629      	mov	r1, r5
 800ed70:	42b1      	cmp	r1, r6
 800ed72:	d334      	bcc.n	800edde <rshift+0x96>
 800ed74:	1a9b      	subs	r3, r3, r2
 800ed76:	009b      	lsls	r3, r3, #2
 800ed78:	1eea      	subs	r2, r5, #3
 800ed7a:	4296      	cmp	r6, r2
 800ed7c:	bf38      	it	cc
 800ed7e:	2300      	movcc	r3, #0
 800ed80:	4423      	add	r3, r4
 800ed82:	e015      	b.n	800edb0 <rshift+0x68>
 800ed84:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ed88:	f1c1 0820 	rsb	r8, r1, #32
 800ed8c:	40cf      	lsrs	r7, r1
 800ed8e:	f105 0e04 	add.w	lr, r5, #4
 800ed92:	46a1      	mov	r9, r4
 800ed94:	4576      	cmp	r6, lr
 800ed96:	46f4      	mov	ip, lr
 800ed98:	d815      	bhi.n	800edc6 <rshift+0x7e>
 800ed9a:	1a9a      	subs	r2, r3, r2
 800ed9c:	0092      	lsls	r2, r2, #2
 800ed9e:	3a04      	subs	r2, #4
 800eda0:	3501      	adds	r5, #1
 800eda2:	42ae      	cmp	r6, r5
 800eda4:	bf38      	it	cc
 800eda6:	2200      	movcc	r2, #0
 800eda8:	18a3      	adds	r3, r4, r2
 800edaa:	50a7      	str	r7, [r4, r2]
 800edac:	b107      	cbz	r7, 800edb0 <rshift+0x68>
 800edae:	3304      	adds	r3, #4
 800edb0:	1b1a      	subs	r2, r3, r4
 800edb2:	42a3      	cmp	r3, r4
 800edb4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800edb8:	bf08      	it	eq
 800edba:	2300      	moveq	r3, #0
 800edbc:	6102      	str	r2, [r0, #16]
 800edbe:	bf08      	it	eq
 800edc0:	6143      	streq	r3, [r0, #20]
 800edc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edc6:	f8dc c000 	ldr.w	ip, [ip]
 800edca:	fa0c fc08 	lsl.w	ip, ip, r8
 800edce:	ea4c 0707 	orr.w	r7, ip, r7
 800edd2:	f849 7b04 	str.w	r7, [r9], #4
 800edd6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800edda:	40cf      	lsrs	r7, r1
 800eddc:	e7da      	b.n	800ed94 <rshift+0x4c>
 800edde:	f851 cb04 	ldr.w	ip, [r1], #4
 800ede2:	f847 cf04 	str.w	ip, [r7, #4]!
 800ede6:	e7c3      	b.n	800ed70 <rshift+0x28>
 800ede8:	4623      	mov	r3, r4
 800edea:	e7e1      	b.n	800edb0 <rshift+0x68>

0800edec <__hexdig_fun>:
 800edec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800edf0:	2b09      	cmp	r3, #9
 800edf2:	d802      	bhi.n	800edfa <__hexdig_fun+0xe>
 800edf4:	3820      	subs	r0, #32
 800edf6:	b2c0      	uxtb	r0, r0
 800edf8:	4770      	bx	lr
 800edfa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800edfe:	2b05      	cmp	r3, #5
 800ee00:	d801      	bhi.n	800ee06 <__hexdig_fun+0x1a>
 800ee02:	3847      	subs	r0, #71	; 0x47
 800ee04:	e7f7      	b.n	800edf6 <__hexdig_fun+0xa>
 800ee06:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ee0a:	2b05      	cmp	r3, #5
 800ee0c:	d801      	bhi.n	800ee12 <__hexdig_fun+0x26>
 800ee0e:	3827      	subs	r0, #39	; 0x27
 800ee10:	e7f1      	b.n	800edf6 <__hexdig_fun+0xa>
 800ee12:	2000      	movs	r0, #0
 800ee14:	4770      	bx	lr
	...

0800ee18 <__gethex>:
 800ee18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee1c:	4617      	mov	r7, r2
 800ee1e:	680a      	ldr	r2, [r1, #0]
 800ee20:	b085      	sub	sp, #20
 800ee22:	f102 0b02 	add.w	fp, r2, #2
 800ee26:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ee2a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ee2e:	4681      	mov	r9, r0
 800ee30:	468a      	mov	sl, r1
 800ee32:	9302      	str	r3, [sp, #8]
 800ee34:	32fe      	adds	r2, #254	; 0xfe
 800ee36:	eb02 030b 	add.w	r3, r2, fp
 800ee3a:	46d8      	mov	r8, fp
 800ee3c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ee40:	9301      	str	r3, [sp, #4]
 800ee42:	2830      	cmp	r0, #48	; 0x30
 800ee44:	d0f7      	beq.n	800ee36 <__gethex+0x1e>
 800ee46:	f7ff ffd1 	bl	800edec <__hexdig_fun>
 800ee4a:	4604      	mov	r4, r0
 800ee4c:	2800      	cmp	r0, #0
 800ee4e:	d138      	bne.n	800eec2 <__gethex+0xaa>
 800ee50:	49a7      	ldr	r1, [pc, #668]	; (800f0f0 <__gethex+0x2d8>)
 800ee52:	2201      	movs	r2, #1
 800ee54:	4640      	mov	r0, r8
 800ee56:	f7ff ff19 	bl	800ec8c <strncmp>
 800ee5a:	4606      	mov	r6, r0
 800ee5c:	2800      	cmp	r0, #0
 800ee5e:	d169      	bne.n	800ef34 <__gethex+0x11c>
 800ee60:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ee64:	465d      	mov	r5, fp
 800ee66:	f7ff ffc1 	bl	800edec <__hexdig_fun>
 800ee6a:	2800      	cmp	r0, #0
 800ee6c:	d064      	beq.n	800ef38 <__gethex+0x120>
 800ee6e:	465a      	mov	r2, fp
 800ee70:	7810      	ldrb	r0, [r2, #0]
 800ee72:	2830      	cmp	r0, #48	; 0x30
 800ee74:	4690      	mov	r8, r2
 800ee76:	f102 0201 	add.w	r2, r2, #1
 800ee7a:	d0f9      	beq.n	800ee70 <__gethex+0x58>
 800ee7c:	f7ff ffb6 	bl	800edec <__hexdig_fun>
 800ee80:	2301      	movs	r3, #1
 800ee82:	fab0 f480 	clz	r4, r0
 800ee86:	0964      	lsrs	r4, r4, #5
 800ee88:	465e      	mov	r6, fp
 800ee8a:	9301      	str	r3, [sp, #4]
 800ee8c:	4642      	mov	r2, r8
 800ee8e:	4615      	mov	r5, r2
 800ee90:	3201      	adds	r2, #1
 800ee92:	7828      	ldrb	r0, [r5, #0]
 800ee94:	f7ff ffaa 	bl	800edec <__hexdig_fun>
 800ee98:	2800      	cmp	r0, #0
 800ee9a:	d1f8      	bne.n	800ee8e <__gethex+0x76>
 800ee9c:	4994      	ldr	r1, [pc, #592]	; (800f0f0 <__gethex+0x2d8>)
 800ee9e:	2201      	movs	r2, #1
 800eea0:	4628      	mov	r0, r5
 800eea2:	f7ff fef3 	bl	800ec8c <strncmp>
 800eea6:	b978      	cbnz	r0, 800eec8 <__gethex+0xb0>
 800eea8:	b946      	cbnz	r6, 800eebc <__gethex+0xa4>
 800eeaa:	1c6e      	adds	r6, r5, #1
 800eeac:	4632      	mov	r2, r6
 800eeae:	4615      	mov	r5, r2
 800eeb0:	3201      	adds	r2, #1
 800eeb2:	7828      	ldrb	r0, [r5, #0]
 800eeb4:	f7ff ff9a 	bl	800edec <__hexdig_fun>
 800eeb8:	2800      	cmp	r0, #0
 800eeba:	d1f8      	bne.n	800eeae <__gethex+0x96>
 800eebc:	1b73      	subs	r3, r6, r5
 800eebe:	009e      	lsls	r6, r3, #2
 800eec0:	e004      	b.n	800eecc <__gethex+0xb4>
 800eec2:	2400      	movs	r4, #0
 800eec4:	4626      	mov	r6, r4
 800eec6:	e7e1      	b.n	800ee8c <__gethex+0x74>
 800eec8:	2e00      	cmp	r6, #0
 800eeca:	d1f7      	bne.n	800eebc <__gethex+0xa4>
 800eecc:	782b      	ldrb	r3, [r5, #0]
 800eece:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800eed2:	2b50      	cmp	r3, #80	; 0x50
 800eed4:	d13d      	bne.n	800ef52 <__gethex+0x13a>
 800eed6:	786b      	ldrb	r3, [r5, #1]
 800eed8:	2b2b      	cmp	r3, #43	; 0x2b
 800eeda:	d02f      	beq.n	800ef3c <__gethex+0x124>
 800eedc:	2b2d      	cmp	r3, #45	; 0x2d
 800eede:	d031      	beq.n	800ef44 <__gethex+0x12c>
 800eee0:	1c69      	adds	r1, r5, #1
 800eee2:	f04f 0b00 	mov.w	fp, #0
 800eee6:	7808      	ldrb	r0, [r1, #0]
 800eee8:	f7ff ff80 	bl	800edec <__hexdig_fun>
 800eeec:	1e42      	subs	r2, r0, #1
 800eeee:	b2d2      	uxtb	r2, r2
 800eef0:	2a18      	cmp	r2, #24
 800eef2:	d82e      	bhi.n	800ef52 <__gethex+0x13a>
 800eef4:	f1a0 0210 	sub.w	r2, r0, #16
 800eef8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eefc:	f7ff ff76 	bl	800edec <__hexdig_fun>
 800ef00:	f100 3cff 	add.w	ip, r0, #4294967295
 800ef04:	fa5f fc8c 	uxtb.w	ip, ip
 800ef08:	f1bc 0f18 	cmp.w	ip, #24
 800ef0c:	d91d      	bls.n	800ef4a <__gethex+0x132>
 800ef0e:	f1bb 0f00 	cmp.w	fp, #0
 800ef12:	d000      	beq.n	800ef16 <__gethex+0xfe>
 800ef14:	4252      	negs	r2, r2
 800ef16:	4416      	add	r6, r2
 800ef18:	f8ca 1000 	str.w	r1, [sl]
 800ef1c:	b1dc      	cbz	r4, 800ef56 <__gethex+0x13e>
 800ef1e:	9b01      	ldr	r3, [sp, #4]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	bf14      	ite	ne
 800ef24:	f04f 0800 	movne.w	r8, #0
 800ef28:	f04f 0806 	moveq.w	r8, #6
 800ef2c:	4640      	mov	r0, r8
 800ef2e:	b005      	add	sp, #20
 800ef30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef34:	4645      	mov	r5, r8
 800ef36:	4626      	mov	r6, r4
 800ef38:	2401      	movs	r4, #1
 800ef3a:	e7c7      	b.n	800eecc <__gethex+0xb4>
 800ef3c:	f04f 0b00 	mov.w	fp, #0
 800ef40:	1ca9      	adds	r1, r5, #2
 800ef42:	e7d0      	b.n	800eee6 <__gethex+0xce>
 800ef44:	f04f 0b01 	mov.w	fp, #1
 800ef48:	e7fa      	b.n	800ef40 <__gethex+0x128>
 800ef4a:	230a      	movs	r3, #10
 800ef4c:	fb03 0002 	mla	r0, r3, r2, r0
 800ef50:	e7d0      	b.n	800eef4 <__gethex+0xdc>
 800ef52:	4629      	mov	r1, r5
 800ef54:	e7e0      	b.n	800ef18 <__gethex+0x100>
 800ef56:	eba5 0308 	sub.w	r3, r5, r8
 800ef5a:	3b01      	subs	r3, #1
 800ef5c:	4621      	mov	r1, r4
 800ef5e:	2b07      	cmp	r3, #7
 800ef60:	dc0a      	bgt.n	800ef78 <__gethex+0x160>
 800ef62:	4648      	mov	r0, r9
 800ef64:	f7fe f92e 	bl	800d1c4 <_Balloc>
 800ef68:	4604      	mov	r4, r0
 800ef6a:	b940      	cbnz	r0, 800ef7e <__gethex+0x166>
 800ef6c:	4b61      	ldr	r3, [pc, #388]	; (800f0f4 <__gethex+0x2dc>)
 800ef6e:	4602      	mov	r2, r0
 800ef70:	21e4      	movs	r1, #228	; 0xe4
 800ef72:	4861      	ldr	r0, [pc, #388]	; (800f0f8 <__gethex+0x2e0>)
 800ef74:	f7ff feb4 	bl	800ece0 <__assert_func>
 800ef78:	3101      	adds	r1, #1
 800ef7a:	105b      	asrs	r3, r3, #1
 800ef7c:	e7ef      	b.n	800ef5e <__gethex+0x146>
 800ef7e:	f100 0a14 	add.w	sl, r0, #20
 800ef82:	2300      	movs	r3, #0
 800ef84:	495a      	ldr	r1, [pc, #360]	; (800f0f0 <__gethex+0x2d8>)
 800ef86:	f8cd a004 	str.w	sl, [sp, #4]
 800ef8a:	469b      	mov	fp, r3
 800ef8c:	45a8      	cmp	r8, r5
 800ef8e:	d342      	bcc.n	800f016 <__gethex+0x1fe>
 800ef90:	9801      	ldr	r0, [sp, #4]
 800ef92:	f840 bb04 	str.w	fp, [r0], #4
 800ef96:	eba0 000a 	sub.w	r0, r0, sl
 800ef9a:	1080      	asrs	r0, r0, #2
 800ef9c:	6120      	str	r0, [r4, #16]
 800ef9e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800efa2:	4658      	mov	r0, fp
 800efa4:	f7fe fa00 	bl	800d3a8 <__hi0bits>
 800efa8:	683d      	ldr	r5, [r7, #0]
 800efaa:	eba8 0000 	sub.w	r0, r8, r0
 800efae:	42a8      	cmp	r0, r5
 800efb0:	dd59      	ble.n	800f066 <__gethex+0x24e>
 800efb2:	eba0 0805 	sub.w	r8, r0, r5
 800efb6:	4641      	mov	r1, r8
 800efb8:	4620      	mov	r0, r4
 800efba:	f7fe fd8f 	bl	800dadc <__any_on>
 800efbe:	4683      	mov	fp, r0
 800efc0:	b1b8      	cbz	r0, 800eff2 <__gethex+0x1da>
 800efc2:	f108 33ff 	add.w	r3, r8, #4294967295
 800efc6:	1159      	asrs	r1, r3, #5
 800efc8:	f003 021f 	and.w	r2, r3, #31
 800efcc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800efd0:	f04f 0b01 	mov.w	fp, #1
 800efd4:	fa0b f202 	lsl.w	r2, fp, r2
 800efd8:	420a      	tst	r2, r1
 800efda:	d00a      	beq.n	800eff2 <__gethex+0x1da>
 800efdc:	455b      	cmp	r3, fp
 800efde:	dd06      	ble.n	800efee <__gethex+0x1d6>
 800efe0:	f1a8 0102 	sub.w	r1, r8, #2
 800efe4:	4620      	mov	r0, r4
 800efe6:	f7fe fd79 	bl	800dadc <__any_on>
 800efea:	2800      	cmp	r0, #0
 800efec:	d138      	bne.n	800f060 <__gethex+0x248>
 800efee:	f04f 0b02 	mov.w	fp, #2
 800eff2:	4641      	mov	r1, r8
 800eff4:	4620      	mov	r0, r4
 800eff6:	f7ff fea7 	bl	800ed48 <rshift>
 800effa:	4446      	add	r6, r8
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	42b3      	cmp	r3, r6
 800f000:	da41      	bge.n	800f086 <__gethex+0x26e>
 800f002:	4621      	mov	r1, r4
 800f004:	4648      	mov	r0, r9
 800f006:	f7fe f91d 	bl	800d244 <_Bfree>
 800f00a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f00c:	2300      	movs	r3, #0
 800f00e:	6013      	str	r3, [r2, #0]
 800f010:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800f014:	e78a      	b.n	800ef2c <__gethex+0x114>
 800f016:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800f01a:	2a2e      	cmp	r2, #46	; 0x2e
 800f01c:	d014      	beq.n	800f048 <__gethex+0x230>
 800f01e:	2b20      	cmp	r3, #32
 800f020:	d106      	bne.n	800f030 <__gethex+0x218>
 800f022:	9b01      	ldr	r3, [sp, #4]
 800f024:	f843 bb04 	str.w	fp, [r3], #4
 800f028:	f04f 0b00 	mov.w	fp, #0
 800f02c:	9301      	str	r3, [sp, #4]
 800f02e:	465b      	mov	r3, fp
 800f030:	7828      	ldrb	r0, [r5, #0]
 800f032:	9303      	str	r3, [sp, #12]
 800f034:	f7ff feda 	bl	800edec <__hexdig_fun>
 800f038:	9b03      	ldr	r3, [sp, #12]
 800f03a:	f000 000f 	and.w	r0, r0, #15
 800f03e:	4098      	lsls	r0, r3
 800f040:	ea4b 0b00 	orr.w	fp, fp, r0
 800f044:	3304      	adds	r3, #4
 800f046:	e7a1      	b.n	800ef8c <__gethex+0x174>
 800f048:	45a8      	cmp	r8, r5
 800f04a:	d8e8      	bhi.n	800f01e <__gethex+0x206>
 800f04c:	2201      	movs	r2, #1
 800f04e:	4628      	mov	r0, r5
 800f050:	9303      	str	r3, [sp, #12]
 800f052:	f7ff fe1b 	bl	800ec8c <strncmp>
 800f056:	4926      	ldr	r1, [pc, #152]	; (800f0f0 <__gethex+0x2d8>)
 800f058:	9b03      	ldr	r3, [sp, #12]
 800f05a:	2800      	cmp	r0, #0
 800f05c:	d1df      	bne.n	800f01e <__gethex+0x206>
 800f05e:	e795      	b.n	800ef8c <__gethex+0x174>
 800f060:	f04f 0b03 	mov.w	fp, #3
 800f064:	e7c5      	b.n	800eff2 <__gethex+0x1da>
 800f066:	da0b      	bge.n	800f080 <__gethex+0x268>
 800f068:	eba5 0800 	sub.w	r8, r5, r0
 800f06c:	4621      	mov	r1, r4
 800f06e:	4642      	mov	r2, r8
 800f070:	4648      	mov	r0, r9
 800f072:	f7fe fb01 	bl	800d678 <__lshift>
 800f076:	eba6 0608 	sub.w	r6, r6, r8
 800f07a:	4604      	mov	r4, r0
 800f07c:	f100 0a14 	add.w	sl, r0, #20
 800f080:	f04f 0b00 	mov.w	fp, #0
 800f084:	e7ba      	b.n	800effc <__gethex+0x1e4>
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	42b3      	cmp	r3, r6
 800f08a:	dd73      	ble.n	800f174 <__gethex+0x35c>
 800f08c:	1b9e      	subs	r6, r3, r6
 800f08e:	42b5      	cmp	r5, r6
 800f090:	dc34      	bgt.n	800f0fc <__gethex+0x2e4>
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	2b02      	cmp	r3, #2
 800f096:	d023      	beq.n	800f0e0 <__gethex+0x2c8>
 800f098:	2b03      	cmp	r3, #3
 800f09a:	d025      	beq.n	800f0e8 <__gethex+0x2d0>
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d115      	bne.n	800f0cc <__gethex+0x2b4>
 800f0a0:	42b5      	cmp	r5, r6
 800f0a2:	d113      	bne.n	800f0cc <__gethex+0x2b4>
 800f0a4:	2d01      	cmp	r5, #1
 800f0a6:	d10b      	bne.n	800f0c0 <__gethex+0x2a8>
 800f0a8:	9a02      	ldr	r2, [sp, #8]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6013      	str	r3, [r2, #0]
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	6123      	str	r3, [r4, #16]
 800f0b2:	f8ca 3000 	str.w	r3, [sl]
 800f0b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f0b8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800f0bc:	601c      	str	r4, [r3, #0]
 800f0be:	e735      	b.n	800ef2c <__gethex+0x114>
 800f0c0:	1e69      	subs	r1, r5, #1
 800f0c2:	4620      	mov	r0, r4
 800f0c4:	f7fe fd0a 	bl	800dadc <__any_on>
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	d1ed      	bne.n	800f0a8 <__gethex+0x290>
 800f0cc:	4621      	mov	r1, r4
 800f0ce:	4648      	mov	r0, r9
 800f0d0:	f7fe f8b8 	bl	800d244 <_Bfree>
 800f0d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	6013      	str	r3, [r2, #0]
 800f0da:	f04f 0850 	mov.w	r8, #80	; 0x50
 800f0de:	e725      	b.n	800ef2c <__gethex+0x114>
 800f0e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d1f2      	bne.n	800f0cc <__gethex+0x2b4>
 800f0e6:	e7df      	b.n	800f0a8 <__gethex+0x290>
 800f0e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d1dc      	bne.n	800f0a8 <__gethex+0x290>
 800f0ee:	e7ed      	b.n	800f0cc <__gethex+0x2b4>
 800f0f0:	0801132c 	.word	0x0801132c
 800f0f4:	080111c6 	.word	0x080111c6
 800f0f8:	080113d5 	.word	0x080113d5
 800f0fc:	f106 38ff 	add.w	r8, r6, #4294967295
 800f100:	f1bb 0f00 	cmp.w	fp, #0
 800f104:	d133      	bne.n	800f16e <__gethex+0x356>
 800f106:	f1b8 0f00 	cmp.w	r8, #0
 800f10a:	d004      	beq.n	800f116 <__gethex+0x2fe>
 800f10c:	4641      	mov	r1, r8
 800f10e:	4620      	mov	r0, r4
 800f110:	f7fe fce4 	bl	800dadc <__any_on>
 800f114:	4683      	mov	fp, r0
 800f116:	ea4f 1268 	mov.w	r2, r8, asr #5
 800f11a:	2301      	movs	r3, #1
 800f11c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f120:	f008 081f 	and.w	r8, r8, #31
 800f124:	fa03 f308 	lsl.w	r3, r3, r8
 800f128:	4213      	tst	r3, r2
 800f12a:	4631      	mov	r1, r6
 800f12c:	4620      	mov	r0, r4
 800f12e:	bf18      	it	ne
 800f130:	f04b 0b02 	orrne.w	fp, fp, #2
 800f134:	1bad      	subs	r5, r5, r6
 800f136:	f7ff fe07 	bl	800ed48 <rshift>
 800f13a:	687e      	ldr	r6, [r7, #4]
 800f13c:	f04f 0802 	mov.w	r8, #2
 800f140:	f1bb 0f00 	cmp.w	fp, #0
 800f144:	d04a      	beq.n	800f1dc <__gethex+0x3c4>
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	2b02      	cmp	r3, #2
 800f14a:	d016      	beq.n	800f17a <__gethex+0x362>
 800f14c:	2b03      	cmp	r3, #3
 800f14e:	d018      	beq.n	800f182 <__gethex+0x36a>
 800f150:	2b01      	cmp	r3, #1
 800f152:	d109      	bne.n	800f168 <__gethex+0x350>
 800f154:	f01b 0f02 	tst.w	fp, #2
 800f158:	d006      	beq.n	800f168 <__gethex+0x350>
 800f15a:	f8da 3000 	ldr.w	r3, [sl]
 800f15e:	ea4b 0b03 	orr.w	fp, fp, r3
 800f162:	f01b 0f01 	tst.w	fp, #1
 800f166:	d10f      	bne.n	800f188 <__gethex+0x370>
 800f168:	f048 0810 	orr.w	r8, r8, #16
 800f16c:	e036      	b.n	800f1dc <__gethex+0x3c4>
 800f16e:	f04f 0b01 	mov.w	fp, #1
 800f172:	e7d0      	b.n	800f116 <__gethex+0x2fe>
 800f174:	f04f 0801 	mov.w	r8, #1
 800f178:	e7e2      	b.n	800f140 <__gethex+0x328>
 800f17a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f17c:	f1c3 0301 	rsb	r3, r3, #1
 800f180:	930f      	str	r3, [sp, #60]	; 0x3c
 800f182:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f184:	2b00      	cmp	r3, #0
 800f186:	d0ef      	beq.n	800f168 <__gethex+0x350>
 800f188:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f18c:	f104 0214 	add.w	r2, r4, #20
 800f190:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800f194:	9301      	str	r3, [sp, #4]
 800f196:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800f19a:	2300      	movs	r3, #0
 800f19c:	4694      	mov	ip, r2
 800f19e:	f852 1b04 	ldr.w	r1, [r2], #4
 800f1a2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800f1a6:	d01e      	beq.n	800f1e6 <__gethex+0x3ce>
 800f1a8:	3101      	adds	r1, #1
 800f1aa:	f8cc 1000 	str.w	r1, [ip]
 800f1ae:	f1b8 0f02 	cmp.w	r8, #2
 800f1b2:	f104 0214 	add.w	r2, r4, #20
 800f1b6:	d13d      	bne.n	800f234 <__gethex+0x41c>
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	3b01      	subs	r3, #1
 800f1bc:	42ab      	cmp	r3, r5
 800f1be:	d10b      	bne.n	800f1d8 <__gethex+0x3c0>
 800f1c0:	1169      	asrs	r1, r5, #5
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	f005 051f 	and.w	r5, r5, #31
 800f1c8:	fa03 f505 	lsl.w	r5, r3, r5
 800f1cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f1d0:	421d      	tst	r5, r3
 800f1d2:	bf18      	it	ne
 800f1d4:	f04f 0801 	movne.w	r8, #1
 800f1d8:	f048 0820 	orr.w	r8, r8, #32
 800f1dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1de:	601c      	str	r4, [r3, #0]
 800f1e0:	9b02      	ldr	r3, [sp, #8]
 800f1e2:	601e      	str	r6, [r3, #0]
 800f1e4:	e6a2      	b.n	800ef2c <__gethex+0x114>
 800f1e6:	4290      	cmp	r0, r2
 800f1e8:	f842 3c04 	str.w	r3, [r2, #-4]
 800f1ec:	d8d6      	bhi.n	800f19c <__gethex+0x384>
 800f1ee:	68a2      	ldr	r2, [r4, #8]
 800f1f0:	4593      	cmp	fp, r2
 800f1f2:	db17      	blt.n	800f224 <__gethex+0x40c>
 800f1f4:	6861      	ldr	r1, [r4, #4]
 800f1f6:	4648      	mov	r0, r9
 800f1f8:	3101      	adds	r1, #1
 800f1fa:	f7fd ffe3 	bl	800d1c4 <_Balloc>
 800f1fe:	4682      	mov	sl, r0
 800f200:	b918      	cbnz	r0, 800f20a <__gethex+0x3f2>
 800f202:	4b1b      	ldr	r3, [pc, #108]	; (800f270 <__gethex+0x458>)
 800f204:	4602      	mov	r2, r0
 800f206:	2184      	movs	r1, #132	; 0x84
 800f208:	e6b3      	b.n	800ef72 <__gethex+0x15a>
 800f20a:	6922      	ldr	r2, [r4, #16]
 800f20c:	3202      	adds	r2, #2
 800f20e:	f104 010c 	add.w	r1, r4, #12
 800f212:	0092      	lsls	r2, r2, #2
 800f214:	300c      	adds	r0, #12
 800f216:	f7fd f844 	bl	800c2a2 <memcpy>
 800f21a:	4621      	mov	r1, r4
 800f21c:	4648      	mov	r0, r9
 800f21e:	f7fe f811 	bl	800d244 <_Bfree>
 800f222:	4654      	mov	r4, sl
 800f224:	6922      	ldr	r2, [r4, #16]
 800f226:	1c51      	adds	r1, r2, #1
 800f228:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f22c:	6121      	str	r1, [r4, #16]
 800f22e:	2101      	movs	r1, #1
 800f230:	6151      	str	r1, [r2, #20]
 800f232:	e7bc      	b.n	800f1ae <__gethex+0x396>
 800f234:	6921      	ldr	r1, [r4, #16]
 800f236:	4559      	cmp	r1, fp
 800f238:	dd0b      	ble.n	800f252 <__gethex+0x43a>
 800f23a:	2101      	movs	r1, #1
 800f23c:	4620      	mov	r0, r4
 800f23e:	f7ff fd83 	bl	800ed48 <rshift>
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	3601      	adds	r6, #1
 800f246:	42b3      	cmp	r3, r6
 800f248:	f6ff aedb 	blt.w	800f002 <__gethex+0x1ea>
 800f24c:	f04f 0801 	mov.w	r8, #1
 800f250:	e7c2      	b.n	800f1d8 <__gethex+0x3c0>
 800f252:	f015 051f 	ands.w	r5, r5, #31
 800f256:	d0f9      	beq.n	800f24c <__gethex+0x434>
 800f258:	9b01      	ldr	r3, [sp, #4]
 800f25a:	441a      	add	r2, r3
 800f25c:	f1c5 0520 	rsb	r5, r5, #32
 800f260:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800f264:	f7fe f8a0 	bl	800d3a8 <__hi0bits>
 800f268:	42a8      	cmp	r0, r5
 800f26a:	dbe6      	blt.n	800f23a <__gethex+0x422>
 800f26c:	e7ee      	b.n	800f24c <__gethex+0x434>
 800f26e:	bf00      	nop
 800f270:	080111c6 	.word	0x080111c6

0800f274 <L_shift>:
 800f274:	f1c2 0208 	rsb	r2, r2, #8
 800f278:	0092      	lsls	r2, r2, #2
 800f27a:	b570      	push	{r4, r5, r6, lr}
 800f27c:	f1c2 0620 	rsb	r6, r2, #32
 800f280:	6843      	ldr	r3, [r0, #4]
 800f282:	6804      	ldr	r4, [r0, #0]
 800f284:	fa03 f506 	lsl.w	r5, r3, r6
 800f288:	432c      	orrs	r4, r5
 800f28a:	40d3      	lsrs	r3, r2
 800f28c:	6004      	str	r4, [r0, #0]
 800f28e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f292:	4288      	cmp	r0, r1
 800f294:	d3f4      	bcc.n	800f280 <L_shift+0xc>
 800f296:	bd70      	pop	{r4, r5, r6, pc}

0800f298 <__match>:
 800f298:	b530      	push	{r4, r5, lr}
 800f29a:	6803      	ldr	r3, [r0, #0]
 800f29c:	3301      	adds	r3, #1
 800f29e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2a2:	b914      	cbnz	r4, 800f2aa <__match+0x12>
 800f2a4:	6003      	str	r3, [r0, #0]
 800f2a6:	2001      	movs	r0, #1
 800f2a8:	bd30      	pop	{r4, r5, pc}
 800f2aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f2b2:	2d19      	cmp	r5, #25
 800f2b4:	bf98      	it	ls
 800f2b6:	3220      	addls	r2, #32
 800f2b8:	42a2      	cmp	r2, r4
 800f2ba:	d0f0      	beq.n	800f29e <__match+0x6>
 800f2bc:	2000      	movs	r0, #0
 800f2be:	e7f3      	b.n	800f2a8 <__match+0x10>

0800f2c0 <__hexnan>:
 800f2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2c4:	680b      	ldr	r3, [r1, #0]
 800f2c6:	6801      	ldr	r1, [r0, #0]
 800f2c8:	115e      	asrs	r6, r3, #5
 800f2ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f2ce:	f013 031f 	ands.w	r3, r3, #31
 800f2d2:	b087      	sub	sp, #28
 800f2d4:	bf18      	it	ne
 800f2d6:	3604      	addne	r6, #4
 800f2d8:	2500      	movs	r5, #0
 800f2da:	1f37      	subs	r7, r6, #4
 800f2dc:	4682      	mov	sl, r0
 800f2de:	4690      	mov	r8, r2
 800f2e0:	9301      	str	r3, [sp, #4]
 800f2e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800f2e6:	46b9      	mov	r9, r7
 800f2e8:	463c      	mov	r4, r7
 800f2ea:	9502      	str	r5, [sp, #8]
 800f2ec:	46ab      	mov	fp, r5
 800f2ee:	784a      	ldrb	r2, [r1, #1]
 800f2f0:	1c4b      	adds	r3, r1, #1
 800f2f2:	9303      	str	r3, [sp, #12]
 800f2f4:	b342      	cbz	r2, 800f348 <__hexnan+0x88>
 800f2f6:	4610      	mov	r0, r2
 800f2f8:	9105      	str	r1, [sp, #20]
 800f2fa:	9204      	str	r2, [sp, #16]
 800f2fc:	f7ff fd76 	bl	800edec <__hexdig_fun>
 800f300:	2800      	cmp	r0, #0
 800f302:	d14f      	bne.n	800f3a4 <__hexnan+0xe4>
 800f304:	9a04      	ldr	r2, [sp, #16]
 800f306:	9905      	ldr	r1, [sp, #20]
 800f308:	2a20      	cmp	r2, #32
 800f30a:	d818      	bhi.n	800f33e <__hexnan+0x7e>
 800f30c:	9b02      	ldr	r3, [sp, #8]
 800f30e:	459b      	cmp	fp, r3
 800f310:	dd13      	ble.n	800f33a <__hexnan+0x7a>
 800f312:	454c      	cmp	r4, r9
 800f314:	d206      	bcs.n	800f324 <__hexnan+0x64>
 800f316:	2d07      	cmp	r5, #7
 800f318:	dc04      	bgt.n	800f324 <__hexnan+0x64>
 800f31a:	462a      	mov	r2, r5
 800f31c:	4649      	mov	r1, r9
 800f31e:	4620      	mov	r0, r4
 800f320:	f7ff ffa8 	bl	800f274 <L_shift>
 800f324:	4544      	cmp	r4, r8
 800f326:	d950      	bls.n	800f3ca <__hexnan+0x10a>
 800f328:	2300      	movs	r3, #0
 800f32a:	f1a4 0904 	sub.w	r9, r4, #4
 800f32e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f332:	f8cd b008 	str.w	fp, [sp, #8]
 800f336:	464c      	mov	r4, r9
 800f338:	461d      	mov	r5, r3
 800f33a:	9903      	ldr	r1, [sp, #12]
 800f33c:	e7d7      	b.n	800f2ee <__hexnan+0x2e>
 800f33e:	2a29      	cmp	r2, #41	; 0x29
 800f340:	d155      	bne.n	800f3ee <__hexnan+0x12e>
 800f342:	3102      	adds	r1, #2
 800f344:	f8ca 1000 	str.w	r1, [sl]
 800f348:	f1bb 0f00 	cmp.w	fp, #0
 800f34c:	d04f      	beq.n	800f3ee <__hexnan+0x12e>
 800f34e:	454c      	cmp	r4, r9
 800f350:	d206      	bcs.n	800f360 <__hexnan+0xa0>
 800f352:	2d07      	cmp	r5, #7
 800f354:	dc04      	bgt.n	800f360 <__hexnan+0xa0>
 800f356:	462a      	mov	r2, r5
 800f358:	4649      	mov	r1, r9
 800f35a:	4620      	mov	r0, r4
 800f35c:	f7ff ff8a 	bl	800f274 <L_shift>
 800f360:	4544      	cmp	r4, r8
 800f362:	d934      	bls.n	800f3ce <__hexnan+0x10e>
 800f364:	f1a8 0204 	sub.w	r2, r8, #4
 800f368:	4623      	mov	r3, r4
 800f36a:	f853 1b04 	ldr.w	r1, [r3], #4
 800f36e:	f842 1f04 	str.w	r1, [r2, #4]!
 800f372:	429f      	cmp	r7, r3
 800f374:	d2f9      	bcs.n	800f36a <__hexnan+0xaa>
 800f376:	1b3b      	subs	r3, r7, r4
 800f378:	f023 0303 	bic.w	r3, r3, #3
 800f37c:	3304      	adds	r3, #4
 800f37e:	3e03      	subs	r6, #3
 800f380:	3401      	adds	r4, #1
 800f382:	42a6      	cmp	r6, r4
 800f384:	bf38      	it	cc
 800f386:	2304      	movcc	r3, #4
 800f388:	4443      	add	r3, r8
 800f38a:	2200      	movs	r2, #0
 800f38c:	f843 2b04 	str.w	r2, [r3], #4
 800f390:	429f      	cmp	r7, r3
 800f392:	d2fb      	bcs.n	800f38c <__hexnan+0xcc>
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	b91b      	cbnz	r3, 800f3a0 <__hexnan+0xe0>
 800f398:	4547      	cmp	r7, r8
 800f39a:	d126      	bne.n	800f3ea <__hexnan+0x12a>
 800f39c:	2301      	movs	r3, #1
 800f39e:	603b      	str	r3, [r7, #0]
 800f3a0:	2005      	movs	r0, #5
 800f3a2:	e025      	b.n	800f3f0 <__hexnan+0x130>
 800f3a4:	3501      	adds	r5, #1
 800f3a6:	2d08      	cmp	r5, #8
 800f3a8:	f10b 0b01 	add.w	fp, fp, #1
 800f3ac:	dd06      	ble.n	800f3bc <__hexnan+0xfc>
 800f3ae:	4544      	cmp	r4, r8
 800f3b0:	d9c3      	bls.n	800f33a <__hexnan+0x7a>
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	f844 3c04 	str.w	r3, [r4, #-4]
 800f3b8:	2501      	movs	r5, #1
 800f3ba:	3c04      	subs	r4, #4
 800f3bc:	6822      	ldr	r2, [r4, #0]
 800f3be:	f000 000f 	and.w	r0, r0, #15
 800f3c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f3c6:	6020      	str	r0, [r4, #0]
 800f3c8:	e7b7      	b.n	800f33a <__hexnan+0x7a>
 800f3ca:	2508      	movs	r5, #8
 800f3cc:	e7b5      	b.n	800f33a <__hexnan+0x7a>
 800f3ce:	9b01      	ldr	r3, [sp, #4]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d0df      	beq.n	800f394 <__hexnan+0xd4>
 800f3d4:	f1c3 0320 	rsb	r3, r3, #32
 800f3d8:	f04f 32ff 	mov.w	r2, #4294967295
 800f3dc:	40da      	lsrs	r2, r3
 800f3de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f3e2:	4013      	ands	r3, r2
 800f3e4:	f846 3c04 	str.w	r3, [r6, #-4]
 800f3e8:	e7d4      	b.n	800f394 <__hexnan+0xd4>
 800f3ea:	3f04      	subs	r7, #4
 800f3ec:	e7d2      	b.n	800f394 <__hexnan+0xd4>
 800f3ee:	2004      	movs	r0, #4
 800f3f0:	b007      	add	sp, #28
 800f3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f3f6 <__ascii_mbtowc>:
 800f3f6:	b082      	sub	sp, #8
 800f3f8:	b901      	cbnz	r1, 800f3fc <__ascii_mbtowc+0x6>
 800f3fa:	a901      	add	r1, sp, #4
 800f3fc:	b142      	cbz	r2, 800f410 <__ascii_mbtowc+0x1a>
 800f3fe:	b14b      	cbz	r3, 800f414 <__ascii_mbtowc+0x1e>
 800f400:	7813      	ldrb	r3, [r2, #0]
 800f402:	600b      	str	r3, [r1, #0]
 800f404:	7812      	ldrb	r2, [r2, #0]
 800f406:	1e10      	subs	r0, r2, #0
 800f408:	bf18      	it	ne
 800f40a:	2001      	movne	r0, #1
 800f40c:	b002      	add	sp, #8
 800f40e:	4770      	bx	lr
 800f410:	4610      	mov	r0, r2
 800f412:	e7fb      	b.n	800f40c <__ascii_mbtowc+0x16>
 800f414:	f06f 0001 	mvn.w	r0, #1
 800f418:	e7f8      	b.n	800f40c <__ascii_mbtowc+0x16>

0800f41a <_realloc_r>:
 800f41a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f41e:	4680      	mov	r8, r0
 800f420:	4614      	mov	r4, r2
 800f422:	460e      	mov	r6, r1
 800f424:	b921      	cbnz	r1, 800f430 <_realloc_r+0x16>
 800f426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f42a:	4611      	mov	r1, r2
 800f42c:	f7fd be3e 	b.w	800d0ac <_malloc_r>
 800f430:	b92a      	cbnz	r2, 800f43e <_realloc_r+0x24>
 800f432:	f7fd fdc7 	bl	800cfc4 <_free_r>
 800f436:	4625      	mov	r5, r4
 800f438:	4628      	mov	r0, r5
 800f43a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f43e:	f000 f842 	bl	800f4c6 <_malloc_usable_size_r>
 800f442:	4284      	cmp	r4, r0
 800f444:	4607      	mov	r7, r0
 800f446:	d802      	bhi.n	800f44e <_realloc_r+0x34>
 800f448:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f44c:	d812      	bhi.n	800f474 <_realloc_r+0x5a>
 800f44e:	4621      	mov	r1, r4
 800f450:	4640      	mov	r0, r8
 800f452:	f7fd fe2b 	bl	800d0ac <_malloc_r>
 800f456:	4605      	mov	r5, r0
 800f458:	2800      	cmp	r0, #0
 800f45a:	d0ed      	beq.n	800f438 <_realloc_r+0x1e>
 800f45c:	42bc      	cmp	r4, r7
 800f45e:	4622      	mov	r2, r4
 800f460:	4631      	mov	r1, r6
 800f462:	bf28      	it	cs
 800f464:	463a      	movcs	r2, r7
 800f466:	f7fc ff1c 	bl	800c2a2 <memcpy>
 800f46a:	4631      	mov	r1, r6
 800f46c:	4640      	mov	r0, r8
 800f46e:	f7fd fda9 	bl	800cfc4 <_free_r>
 800f472:	e7e1      	b.n	800f438 <_realloc_r+0x1e>
 800f474:	4635      	mov	r5, r6
 800f476:	e7df      	b.n	800f438 <_realloc_r+0x1e>

0800f478 <__ascii_wctomb>:
 800f478:	b149      	cbz	r1, 800f48e <__ascii_wctomb+0x16>
 800f47a:	2aff      	cmp	r2, #255	; 0xff
 800f47c:	bf85      	ittet	hi
 800f47e:	238a      	movhi	r3, #138	; 0x8a
 800f480:	6003      	strhi	r3, [r0, #0]
 800f482:	700a      	strbls	r2, [r1, #0]
 800f484:	f04f 30ff 	movhi.w	r0, #4294967295
 800f488:	bf98      	it	ls
 800f48a:	2001      	movls	r0, #1
 800f48c:	4770      	bx	lr
 800f48e:	4608      	mov	r0, r1
 800f490:	4770      	bx	lr
	...

0800f494 <fiprintf>:
 800f494:	b40e      	push	{r1, r2, r3}
 800f496:	b503      	push	{r0, r1, lr}
 800f498:	4601      	mov	r1, r0
 800f49a:	ab03      	add	r3, sp, #12
 800f49c:	4805      	ldr	r0, [pc, #20]	; (800f4b4 <fiprintf+0x20>)
 800f49e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4a2:	6800      	ldr	r0, [r0, #0]
 800f4a4:	9301      	str	r3, [sp, #4]
 800f4a6:	f000 f83f 	bl	800f528 <_vfiprintf_r>
 800f4aa:	b002      	add	sp, #8
 800f4ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4b0:	b003      	add	sp, #12
 800f4b2:	4770      	bx	lr
 800f4b4:	20000120 	.word	0x20000120

0800f4b8 <abort>:
 800f4b8:	b508      	push	{r3, lr}
 800f4ba:	2006      	movs	r0, #6
 800f4bc:	f000 fa0c 	bl	800f8d8 <raise>
 800f4c0:	2001      	movs	r0, #1
 800f4c2:	f7f4 fb05 	bl	8003ad0 <_exit>

0800f4c6 <_malloc_usable_size_r>:
 800f4c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4ca:	1f18      	subs	r0, r3, #4
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	bfbc      	itt	lt
 800f4d0:	580b      	ldrlt	r3, [r1, r0]
 800f4d2:	18c0      	addlt	r0, r0, r3
 800f4d4:	4770      	bx	lr

0800f4d6 <__sfputc_r>:
 800f4d6:	6893      	ldr	r3, [r2, #8]
 800f4d8:	3b01      	subs	r3, #1
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	b410      	push	{r4}
 800f4de:	6093      	str	r3, [r2, #8]
 800f4e0:	da08      	bge.n	800f4f4 <__sfputc_r+0x1e>
 800f4e2:	6994      	ldr	r4, [r2, #24]
 800f4e4:	42a3      	cmp	r3, r4
 800f4e6:	db01      	blt.n	800f4ec <__sfputc_r+0x16>
 800f4e8:	290a      	cmp	r1, #10
 800f4ea:	d103      	bne.n	800f4f4 <__sfputc_r+0x1e>
 800f4ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4f0:	f000 b934 	b.w	800f75c <__swbuf_r>
 800f4f4:	6813      	ldr	r3, [r2, #0]
 800f4f6:	1c58      	adds	r0, r3, #1
 800f4f8:	6010      	str	r0, [r2, #0]
 800f4fa:	7019      	strb	r1, [r3, #0]
 800f4fc:	4608      	mov	r0, r1
 800f4fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f502:	4770      	bx	lr

0800f504 <__sfputs_r>:
 800f504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f506:	4606      	mov	r6, r0
 800f508:	460f      	mov	r7, r1
 800f50a:	4614      	mov	r4, r2
 800f50c:	18d5      	adds	r5, r2, r3
 800f50e:	42ac      	cmp	r4, r5
 800f510:	d101      	bne.n	800f516 <__sfputs_r+0x12>
 800f512:	2000      	movs	r0, #0
 800f514:	e007      	b.n	800f526 <__sfputs_r+0x22>
 800f516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f51a:	463a      	mov	r2, r7
 800f51c:	4630      	mov	r0, r6
 800f51e:	f7ff ffda 	bl	800f4d6 <__sfputc_r>
 800f522:	1c43      	adds	r3, r0, #1
 800f524:	d1f3      	bne.n	800f50e <__sfputs_r+0xa>
 800f526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f528 <_vfiprintf_r>:
 800f528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f52c:	460d      	mov	r5, r1
 800f52e:	b09d      	sub	sp, #116	; 0x74
 800f530:	4614      	mov	r4, r2
 800f532:	4698      	mov	r8, r3
 800f534:	4606      	mov	r6, r0
 800f536:	b118      	cbz	r0, 800f540 <_vfiprintf_r+0x18>
 800f538:	6a03      	ldr	r3, [r0, #32]
 800f53a:	b90b      	cbnz	r3, 800f540 <_vfiprintf_r+0x18>
 800f53c:	f7fc fd98 	bl	800c070 <__sinit>
 800f540:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f542:	07d9      	lsls	r1, r3, #31
 800f544:	d405      	bmi.n	800f552 <_vfiprintf_r+0x2a>
 800f546:	89ab      	ldrh	r3, [r5, #12]
 800f548:	059a      	lsls	r2, r3, #22
 800f54a:	d402      	bmi.n	800f552 <_vfiprintf_r+0x2a>
 800f54c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f54e:	f7fc fea6 	bl	800c29e <__retarget_lock_acquire_recursive>
 800f552:	89ab      	ldrh	r3, [r5, #12]
 800f554:	071b      	lsls	r3, r3, #28
 800f556:	d501      	bpl.n	800f55c <_vfiprintf_r+0x34>
 800f558:	692b      	ldr	r3, [r5, #16]
 800f55a:	b99b      	cbnz	r3, 800f584 <_vfiprintf_r+0x5c>
 800f55c:	4629      	mov	r1, r5
 800f55e:	4630      	mov	r0, r6
 800f560:	f000 f93a 	bl	800f7d8 <__swsetup_r>
 800f564:	b170      	cbz	r0, 800f584 <_vfiprintf_r+0x5c>
 800f566:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f568:	07dc      	lsls	r4, r3, #31
 800f56a:	d504      	bpl.n	800f576 <_vfiprintf_r+0x4e>
 800f56c:	f04f 30ff 	mov.w	r0, #4294967295
 800f570:	b01d      	add	sp, #116	; 0x74
 800f572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f576:	89ab      	ldrh	r3, [r5, #12]
 800f578:	0598      	lsls	r0, r3, #22
 800f57a:	d4f7      	bmi.n	800f56c <_vfiprintf_r+0x44>
 800f57c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f57e:	f7fc fe8f 	bl	800c2a0 <__retarget_lock_release_recursive>
 800f582:	e7f3      	b.n	800f56c <_vfiprintf_r+0x44>
 800f584:	2300      	movs	r3, #0
 800f586:	9309      	str	r3, [sp, #36]	; 0x24
 800f588:	2320      	movs	r3, #32
 800f58a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f58e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f592:	2330      	movs	r3, #48	; 0x30
 800f594:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f748 <_vfiprintf_r+0x220>
 800f598:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f59c:	f04f 0901 	mov.w	r9, #1
 800f5a0:	4623      	mov	r3, r4
 800f5a2:	469a      	mov	sl, r3
 800f5a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5a8:	b10a      	cbz	r2, 800f5ae <_vfiprintf_r+0x86>
 800f5aa:	2a25      	cmp	r2, #37	; 0x25
 800f5ac:	d1f9      	bne.n	800f5a2 <_vfiprintf_r+0x7a>
 800f5ae:	ebba 0b04 	subs.w	fp, sl, r4
 800f5b2:	d00b      	beq.n	800f5cc <_vfiprintf_r+0xa4>
 800f5b4:	465b      	mov	r3, fp
 800f5b6:	4622      	mov	r2, r4
 800f5b8:	4629      	mov	r1, r5
 800f5ba:	4630      	mov	r0, r6
 800f5bc:	f7ff ffa2 	bl	800f504 <__sfputs_r>
 800f5c0:	3001      	adds	r0, #1
 800f5c2:	f000 80a9 	beq.w	800f718 <_vfiprintf_r+0x1f0>
 800f5c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5c8:	445a      	add	r2, fp
 800f5ca:	9209      	str	r2, [sp, #36]	; 0x24
 800f5cc:	f89a 3000 	ldrb.w	r3, [sl]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	f000 80a1 	beq.w	800f718 <_vfiprintf_r+0x1f0>
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	f04f 32ff 	mov.w	r2, #4294967295
 800f5dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5e0:	f10a 0a01 	add.w	sl, sl, #1
 800f5e4:	9304      	str	r3, [sp, #16]
 800f5e6:	9307      	str	r3, [sp, #28]
 800f5e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f5ec:	931a      	str	r3, [sp, #104]	; 0x68
 800f5ee:	4654      	mov	r4, sl
 800f5f0:	2205      	movs	r2, #5
 800f5f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5f6:	4854      	ldr	r0, [pc, #336]	; (800f748 <_vfiprintf_r+0x220>)
 800f5f8:	f7f0 fdea 	bl	80001d0 <memchr>
 800f5fc:	9a04      	ldr	r2, [sp, #16]
 800f5fe:	b9d8      	cbnz	r0, 800f638 <_vfiprintf_r+0x110>
 800f600:	06d1      	lsls	r1, r2, #27
 800f602:	bf44      	itt	mi
 800f604:	2320      	movmi	r3, #32
 800f606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f60a:	0713      	lsls	r3, r2, #28
 800f60c:	bf44      	itt	mi
 800f60e:	232b      	movmi	r3, #43	; 0x2b
 800f610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f614:	f89a 3000 	ldrb.w	r3, [sl]
 800f618:	2b2a      	cmp	r3, #42	; 0x2a
 800f61a:	d015      	beq.n	800f648 <_vfiprintf_r+0x120>
 800f61c:	9a07      	ldr	r2, [sp, #28]
 800f61e:	4654      	mov	r4, sl
 800f620:	2000      	movs	r0, #0
 800f622:	f04f 0c0a 	mov.w	ip, #10
 800f626:	4621      	mov	r1, r4
 800f628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f62c:	3b30      	subs	r3, #48	; 0x30
 800f62e:	2b09      	cmp	r3, #9
 800f630:	d94d      	bls.n	800f6ce <_vfiprintf_r+0x1a6>
 800f632:	b1b0      	cbz	r0, 800f662 <_vfiprintf_r+0x13a>
 800f634:	9207      	str	r2, [sp, #28]
 800f636:	e014      	b.n	800f662 <_vfiprintf_r+0x13a>
 800f638:	eba0 0308 	sub.w	r3, r0, r8
 800f63c:	fa09 f303 	lsl.w	r3, r9, r3
 800f640:	4313      	orrs	r3, r2
 800f642:	9304      	str	r3, [sp, #16]
 800f644:	46a2      	mov	sl, r4
 800f646:	e7d2      	b.n	800f5ee <_vfiprintf_r+0xc6>
 800f648:	9b03      	ldr	r3, [sp, #12]
 800f64a:	1d19      	adds	r1, r3, #4
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	9103      	str	r1, [sp, #12]
 800f650:	2b00      	cmp	r3, #0
 800f652:	bfbb      	ittet	lt
 800f654:	425b      	neglt	r3, r3
 800f656:	f042 0202 	orrlt.w	r2, r2, #2
 800f65a:	9307      	strge	r3, [sp, #28]
 800f65c:	9307      	strlt	r3, [sp, #28]
 800f65e:	bfb8      	it	lt
 800f660:	9204      	strlt	r2, [sp, #16]
 800f662:	7823      	ldrb	r3, [r4, #0]
 800f664:	2b2e      	cmp	r3, #46	; 0x2e
 800f666:	d10c      	bne.n	800f682 <_vfiprintf_r+0x15a>
 800f668:	7863      	ldrb	r3, [r4, #1]
 800f66a:	2b2a      	cmp	r3, #42	; 0x2a
 800f66c:	d134      	bne.n	800f6d8 <_vfiprintf_r+0x1b0>
 800f66e:	9b03      	ldr	r3, [sp, #12]
 800f670:	1d1a      	adds	r2, r3, #4
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	9203      	str	r2, [sp, #12]
 800f676:	2b00      	cmp	r3, #0
 800f678:	bfb8      	it	lt
 800f67a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f67e:	3402      	adds	r4, #2
 800f680:	9305      	str	r3, [sp, #20]
 800f682:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f758 <_vfiprintf_r+0x230>
 800f686:	7821      	ldrb	r1, [r4, #0]
 800f688:	2203      	movs	r2, #3
 800f68a:	4650      	mov	r0, sl
 800f68c:	f7f0 fda0 	bl	80001d0 <memchr>
 800f690:	b138      	cbz	r0, 800f6a2 <_vfiprintf_r+0x17a>
 800f692:	9b04      	ldr	r3, [sp, #16]
 800f694:	eba0 000a 	sub.w	r0, r0, sl
 800f698:	2240      	movs	r2, #64	; 0x40
 800f69a:	4082      	lsls	r2, r0
 800f69c:	4313      	orrs	r3, r2
 800f69e:	3401      	adds	r4, #1
 800f6a0:	9304      	str	r3, [sp, #16]
 800f6a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6a6:	4829      	ldr	r0, [pc, #164]	; (800f74c <_vfiprintf_r+0x224>)
 800f6a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f6ac:	2206      	movs	r2, #6
 800f6ae:	f7f0 fd8f 	bl	80001d0 <memchr>
 800f6b2:	2800      	cmp	r0, #0
 800f6b4:	d03f      	beq.n	800f736 <_vfiprintf_r+0x20e>
 800f6b6:	4b26      	ldr	r3, [pc, #152]	; (800f750 <_vfiprintf_r+0x228>)
 800f6b8:	bb1b      	cbnz	r3, 800f702 <_vfiprintf_r+0x1da>
 800f6ba:	9b03      	ldr	r3, [sp, #12]
 800f6bc:	3307      	adds	r3, #7
 800f6be:	f023 0307 	bic.w	r3, r3, #7
 800f6c2:	3308      	adds	r3, #8
 800f6c4:	9303      	str	r3, [sp, #12]
 800f6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6c8:	443b      	add	r3, r7
 800f6ca:	9309      	str	r3, [sp, #36]	; 0x24
 800f6cc:	e768      	b.n	800f5a0 <_vfiprintf_r+0x78>
 800f6ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800f6d2:	460c      	mov	r4, r1
 800f6d4:	2001      	movs	r0, #1
 800f6d6:	e7a6      	b.n	800f626 <_vfiprintf_r+0xfe>
 800f6d8:	2300      	movs	r3, #0
 800f6da:	3401      	adds	r4, #1
 800f6dc:	9305      	str	r3, [sp, #20]
 800f6de:	4619      	mov	r1, r3
 800f6e0:	f04f 0c0a 	mov.w	ip, #10
 800f6e4:	4620      	mov	r0, r4
 800f6e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6ea:	3a30      	subs	r2, #48	; 0x30
 800f6ec:	2a09      	cmp	r2, #9
 800f6ee:	d903      	bls.n	800f6f8 <_vfiprintf_r+0x1d0>
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d0c6      	beq.n	800f682 <_vfiprintf_r+0x15a>
 800f6f4:	9105      	str	r1, [sp, #20]
 800f6f6:	e7c4      	b.n	800f682 <_vfiprintf_r+0x15a>
 800f6f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f6fc:	4604      	mov	r4, r0
 800f6fe:	2301      	movs	r3, #1
 800f700:	e7f0      	b.n	800f6e4 <_vfiprintf_r+0x1bc>
 800f702:	ab03      	add	r3, sp, #12
 800f704:	9300      	str	r3, [sp, #0]
 800f706:	462a      	mov	r2, r5
 800f708:	4b12      	ldr	r3, [pc, #72]	; (800f754 <_vfiprintf_r+0x22c>)
 800f70a:	a904      	add	r1, sp, #16
 800f70c:	4630      	mov	r0, r6
 800f70e:	f7fb fe4d 	bl	800b3ac <_printf_float>
 800f712:	4607      	mov	r7, r0
 800f714:	1c78      	adds	r0, r7, #1
 800f716:	d1d6      	bne.n	800f6c6 <_vfiprintf_r+0x19e>
 800f718:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f71a:	07d9      	lsls	r1, r3, #31
 800f71c:	d405      	bmi.n	800f72a <_vfiprintf_r+0x202>
 800f71e:	89ab      	ldrh	r3, [r5, #12]
 800f720:	059a      	lsls	r2, r3, #22
 800f722:	d402      	bmi.n	800f72a <_vfiprintf_r+0x202>
 800f724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f726:	f7fc fdbb 	bl	800c2a0 <__retarget_lock_release_recursive>
 800f72a:	89ab      	ldrh	r3, [r5, #12]
 800f72c:	065b      	lsls	r3, r3, #25
 800f72e:	f53f af1d 	bmi.w	800f56c <_vfiprintf_r+0x44>
 800f732:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f734:	e71c      	b.n	800f570 <_vfiprintf_r+0x48>
 800f736:	ab03      	add	r3, sp, #12
 800f738:	9300      	str	r3, [sp, #0]
 800f73a:	462a      	mov	r2, r5
 800f73c:	4b05      	ldr	r3, [pc, #20]	; (800f754 <_vfiprintf_r+0x22c>)
 800f73e:	a904      	add	r1, sp, #16
 800f740:	4630      	mov	r0, r6
 800f742:	f7fc f8d7 	bl	800b8f4 <_printf_i>
 800f746:	e7e4      	b.n	800f712 <_vfiprintf_r+0x1ea>
 800f748:	08011380 	.word	0x08011380
 800f74c:	0801138a 	.word	0x0801138a
 800f750:	0800b3ad 	.word	0x0800b3ad
 800f754:	0800f505 	.word	0x0800f505
 800f758:	08011386 	.word	0x08011386

0800f75c <__swbuf_r>:
 800f75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f75e:	460e      	mov	r6, r1
 800f760:	4614      	mov	r4, r2
 800f762:	4605      	mov	r5, r0
 800f764:	b118      	cbz	r0, 800f76e <__swbuf_r+0x12>
 800f766:	6a03      	ldr	r3, [r0, #32]
 800f768:	b90b      	cbnz	r3, 800f76e <__swbuf_r+0x12>
 800f76a:	f7fc fc81 	bl	800c070 <__sinit>
 800f76e:	69a3      	ldr	r3, [r4, #24]
 800f770:	60a3      	str	r3, [r4, #8]
 800f772:	89a3      	ldrh	r3, [r4, #12]
 800f774:	071a      	lsls	r2, r3, #28
 800f776:	d525      	bpl.n	800f7c4 <__swbuf_r+0x68>
 800f778:	6923      	ldr	r3, [r4, #16]
 800f77a:	b31b      	cbz	r3, 800f7c4 <__swbuf_r+0x68>
 800f77c:	6823      	ldr	r3, [r4, #0]
 800f77e:	6922      	ldr	r2, [r4, #16]
 800f780:	1a98      	subs	r0, r3, r2
 800f782:	6963      	ldr	r3, [r4, #20]
 800f784:	b2f6      	uxtb	r6, r6
 800f786:	4283      	cmp	r3, r0
 800f788:	4637      	mov	r7, r6
 800f78a:	dc04      	bgt.n	800f796 <__swbuf_r+0x3a>
 800f78c:	4621      	mov	r1, r4
 800f78e:	4628      	mov	r0, r5
 800f790:	f7ff fa3a 	bl	800ec08 <_fflush_r>
 800f794:	b9e0      	cbnz	r0, 800f7d0 <__swbuf_r+0x74>
 800f796:	68a3      	ldr	r3, [r4, #8]
 800f798:	3b01      	subs	r3, #1
 800f79a:	60a3      	str	r3, [r4, #8]
 800f79c:	6823      	ldr	r3, [r4, #0]
 800f79e:	1c5a      	adds	r2, r3, #1
 800f7a0:	6022      	str	r2, [r4, #0]
 800f7a2:	701e      	strb	r6, [r3, #0]
 800f7a4:	6962      	ldr	r2, [r4, #20]
 800f7a6:	1c43      	adds	r3, r0, #1
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	d004      	beq.n	800f7b6 <__swbuf_r+0x5a>
 800f7ac:	89a3      	ldrh	r3, [r4, #12]
 800f7ae:	07db      	lsls	r3, r3, #31
 800f7b0:	d506      	bpl.n	800f7c0 <__swbuf_r+0x64>
 800f7b2:	2e0a      	cmp	r6, #10
 800f7b4:	d104      	bne.n	800f7c0 <__swbuf_r+0x64>
 800f7b6:	4621      	mov	r1, r4
 800f7b8:	4628      	mov	r0, r5
 800f7ba:	f7ff fa25 	bl	800ec08 <_fflush_r>
 800f7be:	b938      	cbnz	r0, 800f7d0 <__swbuf_r+0x74>
 800f7c0:	4638      	mov	r0, r7
 800f7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7c4:	4621      	mov	r1, r4
 800f7c6:	4628      	mov	r0, r5
 800f7c8:	f000 f806 	bl	800f7d8 <__swsetup_r>
 800f7cc:	2800      	cmp	r0, #0
 800f7ce:	d0d5      	beq.n	800f77c <__swbuf_r+0x20>
 800f7d0:	f04f 37ff 	mov.w	r7, #4294967295
 800f7d4:	e7f4      	b.n	800f7c0 <__swbuf_r+0x64>
	...

0800f7d8 <__swsetup_r>:
 800f7d8:	b538      	push	{r3, r4, r5, lr}
 800f7da:	4b2a      	ldr	r3, [pc, #168]	; (800f884 <__swsetup_r+0xac>)
 800f7dc:	4605      	mov	r5, r0
 800f7de:	6818      	ldr	r0, [r3, #0]
 800f7e0:	460c      	mov	r4, r1
 800f7e2:	b118      	cbz	r0, 800f7ec <__swsetup_r+0x14>
 800f7e4:	6a03      	ldr	r3, [r0, #32]
 800f7e6:	b90b      	cbnz	r3, 800f7ec <__swsetup_r+0x14>
 800f7e8:	f7fc fc42 	bl	800c070 <__sinit>
 800f7ec:	89a3      	ldrh	r3, [r4, #12]
 800f7ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f7f2:	0718      	lsls	r0, r3, #28
 800f7f4:	d422      	bmi.n	800f83c <__swsetup_r+0x64>
 800f7f6:	06d9      	lsls	r1, r3, #27
 800f7f8:	d407      	bmi.n	800f80a <__swsetup_r+0x32>
 800f7fa:	2309      	movs	r3, #9
 800f7fc:	602b      	str	r3, [r5, #0]
 800f7fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f802:	81a3      	strh	r3, [r4, #12]
 800f804:	f04f 30ff 	mov.w	r0, #4294967295
 800f808:	e034      	b.n	800f874 <__swsetup_r+0x9c>
 800f80a:	0758      	lsls	r0, r3, #29
 800f80c:	d512      	bpl.n	800f834 <__swsetup_r+0x5c>
 800f80e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f810:	b141      	cbz	r1, 800f824 <__swsetup_r+0x4c>
 800f812:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f816:	4299      	cmp	r1, r3
 800f818:	d002      	beq.n	800f820 <__swsetup_r+0x48>
 800f81a:	4628      	mov	r0, r5
 800f81c:	f7fd fbd2 	bl	800cfc4 <_free_r>
 800f820:	2300      	movs	r3, #0
 800f822:	6363      	str	r3, [r4, #52]	; 0x34
 800f824:	89a3      	ldrh	r3, [r4, #12]
 800f826:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f82a:	81a3      	strh	r3, [r4, #12]
 800f82c:	2300      	movs	r3, #0
 800f82e:	6063      	str	r3, [r4, #4]
 800f830:	6923      	ldr	r3, [r4, #16]
 800f832:	6023      	str	r3, [r4, #0]
 800f834:	89a3      	ldrh	r3, [r4, #12]
 800f836:	f043 0308 	orr.w	r3, r3, #8
 800f83a:	81a3      	strh	r3, [r4, #12]
 800f83c:	6923      	ldr	r3, [r4, #16]
 800f83e:	b94b      	cbnz	r3, 800f854 <__swsetup_r+0x7c>
 800f840:	89a3      	ldrh	r3, [r4, #12]
 800f842:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f84a:	d003      	beq.n	800f854 <__swsetup_r+0x7c>
 800f84c:	4621      	mov	r1, r4
 800f84e:	4628      	mov	r0, r5
 800f850:	f000 f884 	bl	800f95c <__smakebuf_r>
 800f854:	89a0      	ldrh	r0, [r4, #12]
 800f856:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f85a:	f010 0301 	ands.w	r3, r0, #1
 800f85e:	d00a      	beq.n	800f876 <__swsetup_r+0x9e>
 800f860:	2300      	movs	r3, #0
 800f862:	60a3      	str	r3, [r4, #8]
 800f864:	6963      	ldr	r3, [r4, #20]
 800f866:	425b      	negs	r3, r3
 800f868:	61a3      	str	r3, [r4, #24]
 800f86a:	6923      	ldr	r3, [r4, #16]
 800f86c:	b943      	cbnz	r3, 800f880 <__swsetup_r+0xa8>
 800f86e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f872:	d1c4      	bne.n	800f7fe <__swsetup_r+0x26>
 800f874:	bd38      	pop	{r3, r4, r5, pc}
 800f876:	0781      	lsls	r1, r0, #30
 800f878:	bf58      	it	pl
 800f87a:	6963      	ldrpl	r3, [r4, #20]
 800f87c:	60a3      	str	r3, [r4, #8]
 800f87e:	e7f4      	b.n	800f86a <__swsetup_r+0x92>
 800f880:	2000      	movs	r0, #0
 800f882:	e7f7      	b.n	800f874 <__swsetup_r+0x9c>
 800f884:	20000120 	.word	0x20000120

0800f888 <_raise_r>:
 800f888:	291f      	cmp	r1, #31
 800f88a:	b538      	push	{r3, r4, r5, lr}
 800f88c:	4604      	mov	r4, r0
 800f88e:	460d      	mov	r5, r1
 800f890:	d904      	bls.n	800f89c <_raise_r+0x14>
 800f892:	2316      	movs	r3, #22
 800f894:	6003      	str	r3, [r0, #0]
 800f896:	f04f 30ff 	mov.w	r0, #4294967295
 800f89a:	bd38      	pop	{r3, r4, r5, pc}
 800f89c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f89e:	b112      	cbz	r2, 800f8a6 <_raise_r+0x1e>
 800f8a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f8a4:	b94b      	cbnz	r3, 800f8ba <_raise_r+0x32>
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	f000 f830 	bl	800f90c <_getpid_r>
 800f8ac:	462a      	mov	r2, r5
 800f8ae:	4601      	mov	r1, r0
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8b6:	f000 b817 	b.w	800f8e8 <_kill_r>
 800f8ba:	2b01      	cmp	r3, #1
 800f8bc:	d00a      	beq.n	800f8d4 <_raise_r+0x4c>
 800f8be:	1c59      	adds	r1, r3, #1
 800f8c0:	d103      	bne.n	800f8ca <_raise_r+0x42>
 800f8c2:	2316      	movs	r3, #22
 800f8c4:	6003      	str	r3, [r0, #0]
 800f8c6:	2001      	movs	r0, #1
 800f8c8:	e7e7      	b.n	800f89a <_raise_r+0x12>
 800f8ca:	2400      	movs	r4, #0
 800f8cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f8d0:	4628      	mov	r0, r5
 800f8d2:	4798      	blx	r3
 800f8d4:	2000      	movs	r0, #0
 800f8d6:	e7e0      	b.n	800f89a <_raise_r+0x12>

0800f8d8 <raise>:
 800f8d8:	4b02      	ldr	r3, [pc, #8]	; (800f8e4 <raise+0xc>)
 800f8da:	4601      	mov	r1, r0
 800f8dc:	6818      	ldr	r0, [r3, #0]
 800f8de:	f7ff bfd3 	b.w	800f888 <_raise_r>
 800f8e2:	bf00      	nop
 800f8e4:	20000120 	.word	0x20000120

0800f8e8 <_kill_r>:
 800f8e8:	b538      	push	{r3, r4, r5, lr}
 800f8ea:	4d07      	ldr	r5, [pc, #28]	; (800f908 <_kill_r+0x20>)
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	4604      	mov	r4, r0
 800f8f0:	4608      	mov	r0, r1
 800f8f2:	4611      	mov	r1, r2
 800f8f4:	602b      	str	r3, [r5, #0]
 800f8f6:	f7f4 f8db 	bl	8003ab0 <_kill>
 800f8fa:	1c43      	adds	r3, r0, #1
 800f8fc:	d102      	bne.n	800f904 <_kill_r+0x1c>
 800f8fe:	682b      	ldr	r3, [r5, #0]
 800f900:	b103      	cbz	r3, 800f904 <_kill_r+0x1c>
 800f902:	6023      	str	r3, [r4, #0]
 800f904:	bd38      	pop	{r3, r4, r5, pc}
 800f906:	bf00      	nop
 800f908:	20005b24 	.word	0x20005b24

0800f90c <_getpid_r>:
 800f90c:	f7f4 b8c8 	b.w	8003aa0 <_getpid>

0800f910 <__swhatbuf_r>:
 800f910:	b570      	push	{r4, r5, r6, lr}
 800f912:	460c      	mov	r4, r1
 800f914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f918:	2900      	cmp	r1, #0
 800f91a:	b096      	sub	sp, #88	; 0x58
 800f91c:	4615      	mov	r5, r2
 800f91e:	461e      	mov	r6, r3
 800f920:	da0d      	bge.n	800f93e <__swhatbuf_r+0x2e>
 800f922:	89a3      	ldrh	r3, [r4, #12]
 800f924:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f928:	f04f 0100 	mov.w	r1, #0
 800f92c:	bf0c      	ite	eq
 800f92e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f932:	2340      	movne	r3, #64	; 0x40
 800f934:	2000      	movs	r0, #0
 800f936:	6031      	str	r1, [r6, #0]
 800f938:	602b      	str	r3, [r5, #0]
 800f93a:	b016      	add	sp, #88	; 0x58
 800f93c:	bd70      	pop	{r4, r5, r6, pc}
 800f93e:	466a      	mov	r2, sp
 800f940:	f000 f848 	bl	800f9d4 <_fstat_r>
 800f944:	2800      	cmp	r0, #0
 800f946:	dbec      	blt.n	800f922 <__swhatbuf_r+0x12>
 800f948:	9901      	ldr	r1, [sp, #4]
 800f94a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f94e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f952:	4259      	negs	r1, r3
 800f954:	4159      	adcs	r1, r3
 800f956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f95a:	e7eb      	b.n	800f934 <__swhatbuf_r+0x24>

0800f95c <__smakebuf_r>:
 800f95c:	898b      	ldrh	r3, [r1, #12]
 800f95e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f960:	079d      	lsls	r5, r3, #30
 800f962:	4606      	mov	r6, r0
 800f964:	460c      	mov	r4, r1
 800f966:	d507      	bpl.n	800f978 <__smakebuf_r+0x1c>
 800f968:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f96c:	6023      	str	r3, [r4, #0]
 800f96e:	6123      	str	r3, [r4, #16]
 800f970:	2301      	movs	r3, #1
 800f972:	6163      	str	r3, [r4, #20]
 800f974:	b002      	add	sp, #8
 800f976:	bd70      	pop	{r4, r5, r6, pc}
 800f978:	ab01      	add	r3, sp, #4
 800f97a:	466a      	mov	r2, sp
 800f97c:	f7ff ffc8 	bl	800f910 <__swhatbuf_r>
 800f980:	9900      	ldr	r1, [sp, #0]
 800f982:	4605      	mov	r5, r0
 800f984:	4630      	mov	r0, r6
 800f986:	f7fd fb91 	bl	800d0ac <_malloc_r>
 800f98a:	b948      	cbnz	r0, 800f9a0 <__smakebuf_r+0x44>
 800f98c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f990:	059a      	lsls	r2, r3, #22
 800f992:	d4ef      	bmi.n	800f974 <__smakebuf_r+0x18>
 800f994:	f023 0303 	bic.w	r3, r3, #3
 800f998:	f043 0302 	orr.w	r3, r3, #2
 800f99c:	81a3      	strh	r3, [r4, #12]
 800f99e:	e7e3      	b.n	800f968 <__smakebuf_r+0xc>
 800f9a0:	89a3      	ldrh	r3, [r4, #12]
 800f9a2:	6020      	str	r0, [r4, #0]
 800f9a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9a8:	81a3      	strh	r3, [r4, #12]
 800f9aa:	9b00      	ldr	r3, [sp, #0]
 800f9ac:	6163      	str	r3, [r4, #20]
 800f9ae:	9b01      	ldr	r3, [sp, #4]
 800f9b0:	6120      	str	r0, [r4, #16]
 800f9b2:	b15b      	cbz	r3, 800f9cc <__smakebuf_r+0x70>
 800f9b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9b8:	4630      	mov	r0, r6
 800f9ba:	f000 f81d 	bl	800f9f8 <_isatty_r>
 800f9be:	b128      	cbz	r0, 800f9cc <__smakebuf_r+0x70>
 800f9c0:	89a3      	ldrh	r3, [r4, #12]
 800f9c2:	f023 0303 	bic.w	r3, r3, #3
 800f9c6:	f043 0301 	orr.w	r3, r3, #1
 800f9ca:	81a3      	strh	r3, [r4, #12]
 800f9cc:	89a3      	ldrh	r3, [r4, #12]
 800f9ce:	431d      	orrs	r5, r3
 800f9d0:	81a5      	strh	r5, [r4, #12]
 800f9d2:	e7cf      	b.n	800f974 <__smakebuf_r+0x18>

0800f9d4 <_fstat_r>:
 800f9d4:	b538      	push	{r3, r4, r5, lr}
 800f9d6:	4d07      	ldr	r5, [pc, #28]	; (800f9f4 <_fstat_r+0x20>)
 800f9d8:	2300      	movs	r3, #0
 800f9da:	4604      	mov	r4, r0
 800f9dc:	4608      	mov	r0, r1
 800f9de:	4611      	mov	r1, r2
 800f9e0:	602b      	str	r3, [r5, #0]
 800f9e2:	f7f4 f8c4 	bl	8003b6e <_fstat>
 800f9e6:	1c43      	adds	r3, r0, #1
 800f9e8:	d102      	bne.n	800f9f0 <_fstat_r+0x1c>
 800f9ea:	682b      	ldr	r3, [r5, #0]
 800f9ec:	b103      	cbz	r3, 800f9f0 <_fstat_r+0x1c>
 800f9ee:	6023      	str	r3, [r4, #0]
 800f9f0:	bd38      	pop	{r3, r4, r5, pc}
 800f9f2:	bf00      	nop
 800f9f4:	20005b24 	.word	0x20005b24

0800f9f8 <_isatty_r>:
 800f9f8:	b538      	push	{r3, r4, r5, lr}
 800f9fa:	4d06      	ldr	r5, [pc, #24]	; (800fa14 <_isatty_r+0x1c>)
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	4604      	mov	r4, r0
 800fa00:	4608      	mov	r0, r1
 800fa02:	602b      	str	r3, [r5, #0]
 800fa04:	f7f4 f8c3 	bl	8003b8e <_isatty>
 800fa08:	1c43      	adds	r3, r0, #1
 800fa0a:	d102      	bne.n	800fa12 <_isatty_r+0x1a>
 800fa0c:	682b      	ldr	r3, [r5, #0]
 800fa0e:	b103      	cbz	r3, 800fa12 <_isatty_r+0x1a>
 800fa10:	6023      	str	r3, [r4, #0]
 800fa12:	bd38      	pop	{r3, r4, r5, pc}
 800fa14:	20005b24 	.word	0x20005b24

0800fa18 <atan>:
 800fa18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa1c:	ec55 4b10 	vmov	r4, r5, d0
 800fa20:	4bc3      	ldr	r3, [pc, #780]	; (800fd30 <atan+0x318>)
 800fa22:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fa26:	429e      	cmp	r6, r3
 800fa28:	46ab      	mov	fp, r5
 800fa2a:	dd18      	ble.n	800fa5e <atan+0x46>
 800fa2c:	4bc1      	ldr	r3, [pc, #772]	; (800fd34 <atan+0x31c>)
 800fa2e:	429e      	cmp	r6, r3
 800fa30:	dc01      	bgt.n	800fa36 <atan+0x1e>
 800fa32:	d109      	bne.n	800fa48 <atan+0x30>
 800fa34:	b144      	cbz	r4, 800fa48 <atan+0x30>
 800fa36:	4622      	mov	r2, r4
 800fa38:	462b      	mov	r3, r5
 800fa3a:	4620      	mov	r0, r4
 800fa3c:	4629      	mov	r1, r5
 800fa3e:	f7f0 fc25 	bl	800028c <__adddf3>
 800fa42:	4604      	mov	r4, r0
 800fa44:	460d      	mov	r5, r1
 800fa46:	e006      	b.n	800fa56 <atan+0x3e>
 800fa48:	f1bb 0f00 	cmp.w	fp, #0
 800fa4c:	f300 8131 	bgt.w	800fcb2 <atan+0x29a>
 800fa50:	a59b      	add	r5, pc, #620	; (adr r5, 800fcc0 <atan+0x2a8>)
 800fa52:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fa56:	ec45 4b10 	vmov	d0, r4, r5
 800fa5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa5e:	4bb6      	ldr	r3, [pc, #728]	; (800fd38 <atan+0x320>)
 800fa60:	429e      	cmp	r6, r3
 800fa62:	dc14      	bgt.n	800fa8e <atan+0x76>
 800fa64:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800fa68:	429e      	cmp	r6, r3
 800fa6a:	dc0d      	bgt.n	800fa88 <atan+0x70>
 800fa6c:	a396      	add	r3, pc, #600	; (adr r3, 800fcc8 <atan+0x2b0>)
 800fa6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa72:	ee10 0a10 	vmov	r0, s0
 800fa76:	4629      	mov	r1, r5
 800fa78:	f7f0 fc08 	bl	800028c <__adddf3>
 800fa7c:	4baf      	ldr	r3, [pc, #700]	; (800fd3c <atan+0x324>)
 800fa7e:	2200      	movs	r2, #0
 800fa80:	f7f1 f84a 	bl	8000b18 <__aeabi_dcmpgt>
 800fa84:	2800      	cmp	r0, #0
 800fa86:	d1e6      	bne.n	800fa56 <atan+0x3e>
 800fa88:	f04f 3aff 	mov.w	sl, #4294967295
 800fa8c:	e02b      	b.n	800fae6 <atan+0xce>
 800fa8e:	f000 f9b7 	bl	800fe00 <fabs>
 800fa92:	4bab      	ldr	r3, [pc, #684]	; (800fd40 <atan+0x328>)
 800fa94:	429e      	cmp	r6, r3
 800fa96:	ec55 4b10 	vmov	r4, r5, d0
 800fa9a:	f300 80bf 	bgt.w	800fc1c <atan+0x204>
 800fa9e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800faa2:	429e      	cmp	r6, r3
 800faa4:	f300 80a0 	bgt.w	800fbe8 <atan+0x1d0>
 800faa8:	ee10 2a10 	vmov	r2, s0
 800faac:	ee10 0a10 	vmov	r0, s0
 800fab0:	462b      	mov	r3, r5
 800fab2:	4629      	mov	r1, r5
 800fab4:	f7f0 fbea 	bl	800028c <__adddf3>
 800fab8:	4ba0      	ldr	r3, [pc, #640]	; (800fd3c <atan+0x324>)
 800faba:	2200      	movs	r2, #0
 800fabc:	f7f0 fbe4 	bl	8000288 <__aeabi_dsub>
 800fac0:	2200      	movs	r2, #0
 800fac2:	4606      	mov	r6, r0
 800fac4:	460f      	mov	r7, r1
 800fac6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800faca:	4620      	mov	r0, r4
 800facc:	4629      	mov	r1, r5
 800face:	f7f0 fbdd 	bl	800028c <__adddf3>
 800fad2:	4602      	mov	r2, r0
 800fad4:	460b      	mov	r3, r1
 800fad6:	4630      	mov	r0, r6
 800fad8:	4639      	mov	r1, r7
 800fada:	f7f0 feb7 	bl	800084c <__aeabi_ddiv>
 800fade:	f04f 0a00 	mov.w	sl, #0
 800fae2:	4604      	mov	r4, r0
 800fae4:	460d      	mov	r5, r1
 800fae6:	4622      	mov	r2, r4
 800fae8:	462b      	mov	r3, r5
 800faea:	4620      	mov	r0, r4
 800faec:	4629      	mov	r1, r5
 800faee:	f7f0 fd83 	bl	80005f8 <__aeabi_dmul>
 800faf2:	4602      	mov	r2, r0
 800faf4:	460b      	mov	r3, r1
 800faf6:	4680      	mov	r8, r0
 800faf8:	4689      	mov	r9, r1
 800fafa:	f7f0 fd7d 	bl	80005f8 <__aeabi_dmul>
 800fafe:	a374      	add	r3, pc, #464	; (adr r3, 800fcd0 <atan+0x2b8>)
 800fb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb04:	4606      	mov	r6, r0
 800fb06:	460f      	mov	r7, r1
 800fb08:	f7f0 fd76 	bl	80005f8 <__aeabi_dmul>
 800fb0c:	a372      	add	r3, pc, #456	; (adr r3, 800fcd8 <atan+0x2c0>)
 800fb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb12:	f7f0 fbbb 	bl	800028c <__adddf3>
 800fb16:	4632      	mov	r2, r6
 800fb18:	463b      	mov	r3, r7
 800fb1a:	f7f0 fd6d 	bl	80005f8 <__aeabi_dmul>
 800fb1e:	a370      	add	r3, pc, #448	; (adr r3, 800fce0 <atan+0x2c8>)
 800fb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb24:	f7f0 fbb2 	bl	800028c <__adddf3>
 800fb28:	4632      	mov	r2, r6
 800fb2a:	463b      	mov	r3, r7
 800fb2c:	f7f0 fd64 	bl	80005f8 <__aeabi_dmul>
 800fb30:	a36d      	add	r3, pc, #436	; (adr r3, 800fce8 <atan+0x2d0>)
 800fb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb36:	f7f0 fba9 	bl	800028c <__adddf3>
 800fb3a:	4632      	mov	r2, r6
 800fb3c:	463b      	mov	r3, r7
 800fb3e:	f7f0 fd5b 	bl	80005f8 <__aeabi_dmul>
 800fb42:	a36b      	add	r3, pc, #428	; (adr r3, 800fcf0 <atan+0x2d8>)
 800fb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb48:	f7f0 fba0 	bl	800028c <__adddf3>
 800fb4c:	4632      	mov	r2, r6
 800fb4e:	463b      	mov	r3, r7
 800fb50:	f7f0 fd52 	bl	80005f8 <__aeabi_dmul>
 800fb54:	a368      	add	r3, pc, #416	; (adr r3, 800fcf8 <atan+0x2e0>)
 800fb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb5a:	f7f0 fb97 	bl	800028c <__adddf3>
 800fb5e:	4642      	mov	r2, r8
 800fb60:	464b      	mov	r3, r9
 800fb62:	f7f0 fd49 	bl	80005f8 <__aeabi_dmul>
 800fb66:	a366      	add	r3, pc, #408	; (adr r3, 800fd00 <atan+0x2e8>)
 800fb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6c:	4680      	mov	r8, r0
 800fb6e:	4689      	mov	r9, r1
 800fb70:	4630      	mov	r0, r6
 800fb72:	4639      	mov	r1, r7
 800fb74:	f7f0 fd40 	bl	80005f8 <__aeabi_dmul>
 800fb78:	a363      	add	r3, pc, #396	; (adr r3, 800fd08 <atan+0x2f0>)
 800fb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb7e:	f7f0 fb83 	bl	8000288 <__aeabi_dsub>
 800fb82:	4632      	mov	r2, r6
 800fb84:	463b      	mov	r3, r7
 800fb86:	f7f0 fd37 	bl	80005f8 <__aeabi_dmul>
 800fb8a:	a361      	add	r3, pc, #388	; (adr r3, 800fd10 <atan+0x2f8>)
 800fb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb90:	f7f0 fb7a 	bl	8000288 <__aeabi_dsub>
 800fb94:	4632      	mov	r2, r6
 800fb96:	463b      	mov	r3, r7
 800fb98:	f7f0 fd2e 	bl	80005f8 <__aeabi_dmul>
 800fb9c:	a35e      	add	r3, pc, #376	; (adr r3, 800fd18 <atan+0x300>)
 800fb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba2:	f7f0 fb71 	bl	8000288 <__aeabi_dsub>
 800fba6:	4632      	mov	r2, r6
 800fba8:	463b      	mov	r3, r7
 800fbaa:	f7f0 fd25 	bl	80005f8 <__aeabi_dmul>
 800fbae:	a35c      	add	r3, pc, #368	; (adr r3, 800fd20 <atan+0x308>)
 800fbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb4:	f7f0 fb68 	bl	8000288 <__aeabi_dsub>
 800fbb8:	4632      	mov	r2, r6
 800fbba:	463b      	mov	r3, r7
 800fbbc:	f7f0 fd1c 	bl	80005f8 <__aeabi_dmul>
 800fbc0:	4602      	mov	r2, r0
 800fbc2:	460b      	mov	r3, r1
 800fbc4:	4640      	mov	r0, r8
 800fbc6:	4649      	mov	r1, r9
 800fbc8:	f7f0 fb60 	bl	800028c <__adddf3>
 800fbcc:	4622      	mov	r2, r4
 800fbce:	462b      	mov	r3, r5
 800fbd0:	f7f0 fd12 	bl	80005f8 <__aeabi_dmul>
 800fbd4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800fbd8:	4602      	mov	r2, r0
 800fbda:	460b      	mov	r3, r1
 800fbdc:	d14b      	bne.n	800fc76 <atan+0x25e>
 800fbde:	4620      	mov	r0, r4
 800fbe0:	4629      	mov	r1, r5
 800fbe2:	f7f0 fb51 	bl	8000288 <__aeabi_dsub>
 800fbe6:	e72c      	b.n	800fa42 <atan+0x2a>
 800fbe8:	ee10 0a10 	vmov	r0, s0
 800fbec:	4b53      	ldr	r3, [pc, #332]	; (800fd3c <atan+0x324>)
 800fbee:	2200      	movs	r2, #0
 800fbf0:	4629      	mov	r1, r5
 800fbf2:	f7f0 fb49 	bl	8000288 <__aeabi_dsub>
 800fbf6:	4b51      	ldr	r3, [pc, #324]	; (800fd3c <atan+0x324>)
 800fbf8:	4606      	mov	r6, r0
 800fbfa:	460f      	mov	r7, r1
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	4620      	mov	r0, r4
 800fc00:	4629      	mov	r1, r5
 800fc02:	f7f0 fb43 	bl	800028c <__adddf3>
 800fc06:	4602      	mov	r2, r0
 800fc08:	460b      	mov	r3, r1
 800fc0a:	4630      	mov	r0, r6
 800fc0c:	4639      	mov	r1, r7
 800fc0e:	f7f0 fe1d 	bl	800084c <__aeabi_ddiv>
 800fc12:	f04f 0a01 	mov.w	sl, #1
 800fc16:	4604      	mov	r4, r0
 800fc18:	460d      	mov	r5, r1
 800fc1a:	e764      	b.n	800fae6 <atan+0xce>
 800fc1c:	4b49      	ldr	r3, [pc, #292]	; (800fd44 <atan+0x32c>)
 800fc1e:	429e      	cmp	r6, r3
 800fc20:	da1d      	bge.n	800fc5e <atan+0x246>
 800fc22:	ee10 0a10 	vmov	r0, s0
 800fc26:	4b48      	ldr	r3, [pc, #288]	; (800fd48 <atan+0x330>)
 800fc28:	2200      	movs	r2, #0
 800fc2a:	4629      	mov	r1, r5
 800fc2c:	f7f0 fb2c 	bl	8000288 <__aeabi_dsub>
 800fc30:	4b45      	ldr	r3, [pc, #276]	; (800fd48 <atan+0x330>)
 800fc32:	4606      	mov	r6, r0
 800fc34:	460f      	mov	r7, r1
 800fc36:	2200      	movs	r2, #0
 800fc38:	4620      	mov	r0, r4
 800fc3a:	4629      	mov	r1, r5
 800fc3c:	f7f0 fcdc 	bl	80005f8 <__aeabi_dmul>
 800fc40:	4b3e      	ldr	r3, [pc, #248]	; (800fd3c <atan+0x324>)
 800fc42:	2200      	movs	r2, #0
 800fc44:	f7f0 fb22 	bl	800028c <__adddf3>
 800fc48:	4602      	mov	r2, r0
 800fc4a:	460b      	mov	r3, r1
 800fc4c:	4630      	mov	r0, r6
 800fc4e:	4639      	mov	r1, r7
 800fc50:	f7f0 fdfc 	bl	800084c <__aeabi_ddiv>
 800fc54:	f04f 0a02 	mov.w	sl, #2
 800fc58:	4604      	mov	r4, r0
 800fc5a:	460d      	mov	r5, r1
 800fc5c:	e743      	b.n	800fae6 <atan+0xce>
 800fc5e:	462b      	mov	r3, r5
 800fc60:	ee10 2a10 	vmov	r2, s0
 800fc64:	4939      	ldr	r1, [pc, #228]	; (800fd4c <atan+0x334>)
 800fc66:	2000      	movs	r0, #0
 800fc68:	f7f0 fdf0 	bl	800084c <__aeabi_ddiv>
 800fc6c:	f04f 0a03 	mov.w	sl, #3
 800fc70:	4604      	mov	r4, r0
 800fc72:	460d      	mov	r5, r1
 800fc74:	e737      	b.n	800fae6 <atan+0xce>
 800fc76:	4b36      	ldr	r3, [pc, #216]	; (800fd50 <atan+0x338>)
 800fc78:	4e36      	ldr	r6, [pc, #216]	; (800fd54 <atan+0x33c>)
 800fc7a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc82:	f7f0 fb01 	bl	8000288 <__aeabi_dsub>
 800fc86:	4622      	mov	r2, r4
 800fc88:	462b      	mov	r3, r5
 800fc8a:	f7f0 fafd 	bl	8000288 <__aeabi_dsub>
 800fc8e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800fc92:	4602      	mov	r2, r0
 800fc94:	460b      	mov	r3, r1
 800fc96:	e9d6 0100 	ldrd	r0, r1, [r6]
 800fc9a:	f7f0 faf5 	bl	8000288 <__aeabi_dsub>
 800fc9e:	f1bb 0f00 	cmp.w	fp, #0
 800fca2:	4604      	mov	r4, r0
 800fca4:	460d      	mov	r5, r1
 800fca6:	f6bf aed6 	bge.w	800fa56 <atan+0x3e>
 800fcaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fcae:	461d      	mov	r5, r3
 800fcb0:	e6d1      	b.n	800fa56 <atan+0x3e>
 800fcb2:	a51d      	add	r5, pc, #116	; (adr r5, 800fd28 <atan+0x310>)
 800fcb4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fcb8:	e6cd      	b.n	800fa56 <atan+0x3e>
 800fcba:	bf00      	nop
 800fcbc:	f3af 8000 	nop.w
 800fcc0:	54442d18 	.word	0x54442d18
 800fcc4:	bff921fb 	.word	0xbff921fb
 800fcc8:	8800759c 	.word	0x8800759c
 800fccc:	7e37e43c 	.word	0x7e37e43c
 800fcd0:	e322da11 	.word	0xe322da11
 800fcd4:	3f90ad3a 	.word	0x3f90ad3a
 800fcd8:	24760deb 	.word	0x24760deb
 800fcdc:	3fa97b4b 	.word	0x3fa97b4b
 800fce0:	a0d03d51 	.word	0xa0d03d51
 800fce4:	3fb10d66 	.word	0x3fb10d66
 800fce8:	c54c206e 	.word	0xc54c206e
 800fcec:	3fb745cd 	.word	0x3fb745cd
 800fcf0:	920083ff 	.word	0x920083ff
 800fcf4:	3fc24924 	.word	0x3fc24924
 800fcf8:	5555550d 	.word	0x5555550d
 800fcfc:	3fd55555 	.word	0x3fd55555
 800fd00:	2c6a6c2f 	.word	0x2c6a6c2f
 800fd04:	bfa2b444 	.word	0xbfa2b444
 800fd08:	52defd9a 	.word	0x52defd9a
 800fd0c:	3fadde2d 	.word	0x3fadde2d
 800fd10:	af749a6d 	.word	0xaf749a6d
 800fd14:	3fb3b0f2 	.word	0x3fb3b0f2
 800fd18:	fe231671 	.word	0xfe231671
 800fd1c:	3fbc71c6 	.word	0x3fbc71c6
 800fd20:	9998ebc4 	.word	0x9998ebc4
 800fd24:	3fc99999 	.word	0x3fc99999
 800fd28:	54442d18 	.word	0x54442d18
 800fd2c:	3ff921fb 	.word	0x3ff921fb
 800fd30:	440fffff 	.word	0x440fffff
 800fd34:	7ff00000 	.word	0x7ff00000
 800fd38:	3fdbffff 	.word	0x3fdbffff
 800fd3c:	3ff00000 	.word	0x3ff00000
 800fd40:	3ff2ffff 	.word	0x3ff2ffff
 800fd44:	40038000 	.word	0x40038000
 800fd48:	3ff80000 	.word	0x3ff80000
 800fd4c:	bff00000 	.word	0xbff00000
 800fd50:	08011458 	.word	0x08011458
 800fd54:	08011438 	.word	0x08011438

0800fd58 <cos>:
 800fd58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd5a:	ec53 2b10 	vmov	r2, r3, d0
 800fd5e:	4826      	ldr	r0, [pc, #152]	; (800fdf8 <cos+0xa0>)
 800fd60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fd64:	4281      	cmp	r1, r0
 800fd66:	dc06      	bgt.n	800fd76 <cos+0x1e>
 800fd68:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800fdf0 <cos+0x98>
 800fd6c:	b005      	add	sp, #20
 800fd6e:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd72:	f000 b8a9 	b.w	800fec8 <__kernel_cos>
 800fd76:	4821      	ldr	r0, [pc, #132]	; (800fdfc <cos+0xa4>)
 800fd78:	4281      	cmp	r1, r0
 800fd7a:	dd09      	ble.n	800fd90 <cos+0x38>
 800fd7c:	ee10 0a10 	vmov	r0, s0
 800fd80:	4619      	mov	r1, r3
 800fd82:	f7f0 fa81 	bl	8000288 <__aeabi_dsub>
 800fd86:	ec41 0b10 	vmov	d0, r0, r1
 800fd8a:	b005      	add	sp, #20
 800fd8c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd90:	4668      	mov	r0, sp
 800fd92:	f000 fa21 	bl	80101d8 <__ieee754_rem_pio2>
 800fd96:	f000 0003 	and.w	r0, r0, #3
 800fd9a:	2801      	cmp	r0, #1
 800fd9c:	d00b      	beq.n	800fdb6 <cos+0x5e>
 800fd9e:	2802      	cmp	r0, #2
 800fda0:	d016      	beq.n	800fdd0 <cos+0x78>
 800fda2:	b9e0      	cbnz	r0, 800fdde <cos+0x86>
 800fda4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fda8:	ed9d 0b00 	vldr	d0, [sp]
 800fdac:	f000 f88c 	bl	800fec8 <__kernel_cos>
 800fdb0:	ec51 0b10 	vmov	r0, r1, d0
 800fdb4:	e7e7      	b.n	800fd86 <cos+0x2e>
 800fdb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fdba:	ed9d 0b00 	vldr	d0, [sp]
 800fdbe:	f000 f94b 	bl	8010058 <__kernel_sin>
 800fdc2:	ec53 2b10 	vmov	r2, r3, d0
 800fdc6:	ee10 0a10 	vmov	r0, s0
 800fdca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fdce:	e7da      	b.n	800fd86 <cos+0x2e>
 800fdd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fdd4:	ed9d 0b00 	vldr	d0, [sp]
 800fdd8:	f000 f876 	bl	800fec8 <__kernel_cos>
 800fddc:	e7f1      	b.n	800fdc2 <cos+0x6a>
 800fdde:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fde2:	ed9d 0b00 	vldr	d0, [sp]
 800fde6:	2001      	movs	r0, #1
 800fde8:	f000 f936 	bl	8010058 <__kernel_sin>
 800fdec:	e7e0      	b.n	800fdb0 <cos+0x58>
 800fdee:	bf00      	nop
	...
 800fdf8:	3fe921fb 	.word	0x3fe921fb
 800fdfc:	7fefffff 	.word	0x7fefffff

0800fe00 <fabs>:
 800fe00:	ec51 0b10 	vmov	r0, r1, d0
 800fe04:	ee10 2a10 	vmov	r2, s0
 800fe08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fe0c:	ec43 2b10 	vmov	d0, r2, r3
 800fe10:	4770      	bx	lr
 800fe12:	0000      	movs	r0, r0
 800fe14:	0000      	movs	r0, r0
	...

0800fe18 <sin>:
 800fe18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fe1a:	ec53 2b10 	vmov	r2, r3, d0
 800fe1e:	4828      	ldr	r0, [pc, #160]	; (800fec0 <sin+0xa8>)
 800fe20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fe24:	4281      	cmp	r1, r0
 800fe26:	dc07      	bgt.n	800fe38 <sin+0x20>
 800fe28:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800feb8 <sin+0xa0>
 800fe2c:	2000      	movs	r0, #0
 800fe2e:	b005      	add	sp, #20
 800fe30:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe34:	f000 b910 	b.w	8010058 <__kernel_sin>
 800fe38:	4822      	ldr	r0, [pc, #136]	; (800fec4 <sin+0xac>)
 800fe3a:	4281      	cmp	r1, r0
 800fe3c:	dd09      	ble.n	800fe52 <sin+0x3a>
 800fe3e:	ee10 0a10 	vmov	r0, s0
 800fe42:	4619      	mov	r1, r3
 800fe44:	f7f0 fa20 	bl	8000288 <__aeabi_dsub>
 800fe48:	ec41 0b10 	vmov	d0, r0, r1
 800fe4c:	b005      	add	sp, #20
 800fe4e:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe52:	4668      	mov	r0, sp
 800fe54:	f000 f9c0 	bl	80101d8 <__ieee754_rem_pio2>
 800fe58:	f000 0003 	and.w	r0, r0, #3
 800fe5c:	2801      	cmp	r0, #1
 800fe5e:	d00c      	beq.n	800fe7a <sin+0x62>
 800fe60:	2802      	cmp	r0, #2
 800fe62:	d011      	beq.n	800fe88 <sin+0x70>
 800fe64:	b9f0      	cbnz	r0, 800fea4 <sin+0x8c>
 800fe66:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fe6a:	ed9d 0b00 	vldr	d0, [sp]
 800fe6e:	2001      	movs	r0, #1
 800fe70:	f000 f8f2 	bl	8010058 <__kernel_sin>
 800fe74:	ec51 0b10 	vmov	r0, r1, d0
 800fe78:	e7e6      	b.n	800fe48 <sin+0x30>
 800fe7a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fe7e:	ed9d 0b00 	vldr	d0, [sp]
 800fe82:	f000 f821 	bl	800fec8 <__kernel_cos>
 800fe86:	e7f5      	b.n	800fe74 <sin+0x5c>
 800fe88:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fe8c:	ed9d 0b00 	vldr	d0, [sp]
 800fe90:	2001      	movs	r0, #1
 800fe92:	f000 f8e1 	bl	8010058 <__kernel_sin>
 800fe96:	ec53 2b10 	vmov	r2, r3, d0
 800fe9a:	ee10 0a10 	vmov	r0, s0
 800fe9e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fea2:	e7d1      	b.n	800fe48 <sin+0x30>
 800fea4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fea8:	ed9d 0b00 	vldr	d0, [sp]
 800feac:	f000 f80c 	bl	800fec8 <__kernel_cos>
 800feb0:	e7f1      	b.n	800fe96 <sin+0x7e>
 800feb2:	bf00      	nop
 800feb4:	f3af 8000 	nop.w
	...
 800fec0:	3fe921fb 	.word	0x3fe921fb
 800fec4:	7fefffff 	.word	0x7fefffff

0800fec8 <__kernel_cos>:
 800fec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fecc:	ec57 6b10 	vmov	r6, r7, d0
 800fed0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800fed4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800fed8:	ed8d 1b00 	vstr	d1, [sp]
 800fedc:	da07      	bge.n	800feee <__kernel_cos+0x26>
 800fede:	ee10 0a10 	vmov	r0, s0
 800fee2:	4639      	mov	r1, r7
 800fee4:	f7f0 fe38 	bl	8000b58 <__aeabi_d2iz>
 800fee8:	2800      	cmp	r0, #0
 800feea:	f000 8088 	beq.w	800fffe <__kernel_cos+0x136>
 800feee:	4632      	mov	r2, r6
 800fef0:	463b      	mov	r3, r7
 800fef2:	4630      	mov	r0, r6
 800fef4:	4639      	mov	r1, r7
 800fef6:	f7f0 fb7f 	bl	80005f8 <__aeabi_dmul>
 800fefa:	4b51      	ldr	r3, [pc, #324]	; (8010040 <__kernel_cos+0x178>)
 800fefc:	2200      	movs	r2, #0
 800fefe:	4604      	mov	r4, r0
 800ff00:	460d      	mov	r5, r1
 800ff02:	f7f0 fb79 	bl	80005f8 <__aeabi_dmul>
 800ff06:	a340      	add	r3, pc, #256	; (adr r3, 8010008 <__kernel_cos+0x140>)
 800ff08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0c:	4682      	mov	sl, r0
 800ff0e:	468b      	mov	fp, r1
 800ff10:	4620      	mov	r0, r4
 800ff12:	4629      	mov	r1, r5
 800ff14:	f7f0 fb70 	bl	80005f8 <__aeabi_dmul>
 800ff18:	a33d      	add	r3, pc, #244	; (adr r3, 8010010 <__kernel_cos+0x148>)
 800ff1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1e:	f7f0 f9b5 	bl	800028c <__adddf3>
 800ff22:	4622      	mov	r2, r4
 800ff24:	462b      	mov	r3, r5
 800ff26:	f7f0 fb67 	bl	80005f8 <__aeabi_dmul>
 800ff2a:	a33b      	add	r3, pc, #236	; (adr r3, 8010018 <__kernel_cos+0x150>)
 800ff2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff30:	f7f0 f9aa 	bl	8000288 <__aeabi_dsub>
 800ff34:	4622      	mov	r2, r4
 800ff36:	462b      	mov	r3, r5
 800ff38:	f7f0 fb5e 	bl	80005f8 <__aeabi_dmul>
 800ff3c:	a338      	add	r3, pc, #224	; (adr r3, 8010020 <__kernel_cos+0x158>)
 800ff3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff42:	f7f0 f9a3 	bl	800028c <__adddf3>
 800ff46:	4622      	mov	r2, r4
 800ff48:	462b      	mov	r3, r5
 800ff4a:	f7f0 fb55 	bl	80005f8 <__aeabi_dmul>
 800ff4e:	a336      	add	r3, pc, #216	; (adr r3, 8010028 <__kernel_cos+0x160>)
 800ff50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff54:	f7f0 f998 	bl	8000288 <__aeabi_dsub>
 800ff58:	4622      	mov	r2, r4
 800ff5a:	462b      	mov	r3, r5
 800ff5c:	f7f0 fb4c 	bl	80005f8 <__aeabi_dmul>
 800ff60:	a333      	add	r3, pc, #204	; (adr r3, 8010030 <__kernel_cos+0x168>)
 800ff62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff66:	f7f0 f991 	bl	800028c <__adddf3>
 800ff6a:	4622      	mov	r2, r4
 800ff6c:	462b      	mov	r3, r5
 800ff6e:	f7f0 fb43 	bl	80005f8 <__aeabi_dmul>
 800ff72:	4622      	mov	r2, r4
 800ff74:	462b      	mov	r3, r5
 800ff76:	f7f0 fb3f 	bl	80005f8 <__aeabi_dmul>
 800ff7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff7e:	4604      	mov	r4, r0
 800ff80:	460d      	mov	r5, r1
 800ff82:	4630      	mov	r0, r6
 800ff84:	4639      	mov	r1, r7
 800ff86:	f7f0 fb37 	bl	80005f8 <__aeabi_dmul>
 800ff8a:	460b      	mov	r3, r1
 800ff8c:	4602      	mov	r2, r0
 800ff8e:	4629      	mov	r1, r5
 800ff90:	4620      	mov	r0, r4
 800ff92:	f7f0 f979 	bl	8000288 <__aeabi_dsub>
 800ff96:	4b2b      	ldr	r3, [pc, #172]	; (8010044 <__kernel_cos+0x17c>)
 800ff98:	4598      	cmp	r8, r3
 800ff9a:	4606      	mov	r6, r0
 800ff9c:	460f      	mov	r7, r1
 800ff9e:	dc10      	bgt.n	800ffc2 <__kernel_cos+0xfa>
 800ffa0:	4602      	mov	r2, r0
 800ffa2:	460b      	mov	r3, r1
 800ffa4:	4650      	mov	r0, sl
 800ffa6:	4659      	mov	r1, fp
 800ffa8:	f7f0 f96e 	bl	8000288 <__aeabi_dsub>
 800ffac:	460b      	mov	r3, r1
 800ffae:	4926      	ldr	r1, [pc, #152]	; (8010048 <__kernel_cos+0x180>)
 800ffb0:	4602      	mov	r2, r0
 800ffb2:	2000      	movs	r0, #0
 800ffb4:	f7f0 f968 	bl	8000288 <__aeabi_dsub>
 800ffb8:	ec41 0b10 	vmov	d0, r0, r1
 800ffbc:	b003      	add	sp, #12
 800ffbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffc2:	4b22      	ldr	r3, [pc, #136]	; (801004c <__kernel_cos+0x184>)
 800ffc4:	4920      	ldr	r1, [pc, #128]	; (8010048 <__kernel_cos+0x180>)
 800ffc6:	4598      	cmp	r8, r3
 800ffc8:	bfcc      	ite	gt
 800ffca:	4d21      	ldrgt	r5, [pc, #132]	; (8010050 <__kernel_cos+0x188>)
 800ffcc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ffd0:	2400      	movs	r4, #0
 800ffd2:	4622      	mov	r2, r4
 800ffd4:	462b      	mov	r3, r5
 800ffd6:	2000      	movs	r0, #0
 800ffd8:	f7f0 f956 	bl	8000288 <__aeabi_dsub>
 800ffdc:	4622      	mov	r2, r4
 800ffde:	4680      	mov	r8, r0
 800ffe0:	4689      	mov	r9, r1
 800ffe2:	462b      	mov	r3, r5
 800ffe4:	4650      	mov	r0, sl
 800ffe6:	4659      	mov	r1, fp
 800ffe8:	f7f0 f94e 	bl	8000288 <__aeabi_dsub>
 800ffec:	4632      	mov	r2, r6
 800ffee:	463b      	mov	r3, r7
 800fff0:	f7f0 f94a 	bl	8000288 <__aeabi_dsub>
 800fff4:	4602      	mov	r2, r0
 800fff6:	460b      	mov	r3, r1
 800fff8:	4640      	mov	r0, r8
 800fffa:	4649      	mov	r1, r9
 800fffc:	e7da      	b.n	800ffb4 <__kernel_cos+0xec>
 800fffe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010038 <__kernel_cos+0x170>
 8010002:	e7db      	b.n	800ffbc <__kernel_cos+0xf4>
 8010004:	f3af 8000 	nop.w
 8010008:	be8838d4 	.word	0xbe8838d4
 801000c:	bda8fae9 	.word	0xbda8fae9
 8010010:	bdb4b1c4 	.word	0xbdb4b1c4
 8010014:	3e21ee9e 	.word	0x3e21ee9e
 8010018:	809c52ad 	.word	0x809c52ad
 801001c:	3e927e4f 	.word	0x3e927e4f
 8010020:	19cb1590 	.word	0x19cb1590
 8010024:	3efa01a0 	.word	0x3efa01a0
 8010028:	16c15177 	.word	0x16c15177
 801002c:	3f56c16c 	.word	0x3f56c16c
 8010030:	5555554c 	.word	0x5555554c
 8010034:	3fa55555 	.word	0x3fa55555
 8010038:	00000000 	.word	0x00000000
 801003c:	3ff00000 	.word	0x3ff00000
 8010040:	3fe00000 	.word	0x3fe00000
 8010044:	3fd33332 	.word	0x3fd33332
 8010048:	3ff00000 	.word	0x3ff00000
 801004c:	3fe90000 	.word	0x3fe90000
 8010050:	3fd20000 	.word	0x3fd20000
 8010054:	00000000 	.word	0x00000000

08010058 <__kernel_sin>:
 8010058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801005c:	ed2d 8b04 	vpush	{d8-d9}
 8010060:	eeb0 8a41 	vmov.f32	s16, s2
 8010064:	eef0 8a61 	vmov.f32	s17, s3
 8010068:	ec55 4b10 	vmov	r4, r5, d0
 801006c:	b083      	sub	sp, #12
 801006e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010072:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010076:	9001      	str	r0, [sp, #4]
 8010078:	da06      	bge.n	8010088 <__kernel_sin+0x30>
 801007a:	ee10 0a10 	vmov	r0, s0
 801007e:	4629      	mov	r1, r5
 8010080:	f7f0 fd6a 	bl	8000b58 <__aeabi_d2iz>
 8010084:	2800      	cmp	r0, #0
 8010086:	d051      	beq.n	801012c <__kernel_sin+0xd4>
 8010088:	4622      	mov	r2, r4
 801008a:	462b      	mov	r3, r5
 801008c:	4620      	mov	r0, r4
 801008e:	4629      	mov	r1, r5
 8010090:	f7f0 fab2 	bl	80005f8 <__aeabi_dmul>
 8010094:	4682      	mov	sl, r0
 8010096:	468b      	mov	fp, r1
 8010098:	4602      	mov	r2, r0
 801009a:	460b      	mov	r3, r1
 801009c:	4620      	mov	r0, r4
 801009e:	4629      	mov	r1, r5
 80100a0:	f7f0 faaa 	bl	80005f8 <__aeabi_dmul>
 80100a4:	a341      	add	r3, pc, #260	; (adr r3, 80101ac <__kernel_sin+0x154>)
 80100a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100aa:	4680      	mov	r8, r0
 80100ac:	4689      	mov	r9, r1
 80100ae:	4650      	mov	r0, sl
 80100b0:	4659      	mov	r1, fp
 80100b2:	f7f0 faa1 	bl	80005f8 <__aeabi_dmul>
 80100b6:	a33f      	add	r3, pc, #252	; (adr r3, 80101b4 <__kernel_sin+0x15c>)
 80100b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100bc:	f7f0 f8e4 	bl	8000288 <__aeabi_dsub>
 80100c0:	4652      	mov	r2, sl
 80100c2:	465b      	mov	r3, fp
 80100c4:	f7f0 fa98 	bl	80005f8 <__aeabi_dmul>
 80100c8:	a33c      	add	r3, pc, #240	; (adr r3, 80101bc <__kernel_sin+0x164>)
 80100ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ce:	f7f0 f8dd 	bl	800028c <__adddf3>
 80100d2:	4652      	mov	r2, sl
 80100d4:	465b      	mov	r3, fp
 80100d6:	f7f0 fa8f 	bl	80005f8 <__aeabi_dmul>
 80100da:	a33a      	add	r3, pc, #232	; (adr r3, 80101c4 <__kernel_sin+0x16c>)
 80100dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e0:	f7f0 f8d2 	bl	8000288 <__aeabi_dsub>
 80100e4:	4652      	mov	r2, sl
 80100e6:	465b      	mov	r3, fp
 80100e8:	f7f0 fa86 	bl	80005f8 <__aeabi_dmul>
 80100ec:	a337      	add	r3, pc, #220	; (adr r3, 80101cc <__kernel_sin+0x174>)
 80100ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f2:	f7f0 f8cb 	bl	800028c <__adddf3>
 80100f6:	9b01      	ldr	r3, [sp, #4]
 80100f8:	4606      	mov	r6, r0
 80100fa:	460f      	mov	r7, r1
 80100fc:	b9eb      	cbnz	r3, 801013a <__kernel_sin+0xe2>
 80100fe:	4602      	mov	r2, r0
 8010100:	460b      	mov	r3, r1
 8010102:	4650      	mov	r0, sl
 8010104:	4659      	mov	r1, fp
 8010106:	f7f0 fa77 	bl	80005f8 <__aeabi_dmul>
 801010a:	a325      	add	r3, pc, #148	; (adr r3, 80101a0 <__kernel_sin+0x148>)
 801010c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010110:	f7f0 f8ba 	bl	8000288 <__aeabi_dsub>
 8010114:	4642      	mov	r2, r8
 8010116:	464b      	mov	r3, r9
 8010118:	f7f0 fa6e 	bl	80005f8 <__aeabi_dmul>
 801011c:	4602      	mov	r2, r0
 801011e:	460b      	mov	r3, r1
 8010120:	4620      	mov	r0, r4
 8010122:	4629      	mov	r1, r5
 8010124:	f7f0 f8b2 	bl	800028c <__adddf3>
 8010128:	4604      	mov	r4, r0
 801012a:	460d      	mov	r5, r1
 801012c:	ec45 4b10 	vmov	d0, r4, r5
 8010130:	b003      	add	sp, #12
 8010132:	ecbd 8b04 	vpop	{d8-d9}
 8010136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801013a:	4b1b      	ldr	r3, [pc, #108]	; (80101a8 <__kernel_sin+0x150>)
 801013c:	ec51 0b18 	vmov	r0, r1, d8
 8010140:	2200      	movs	r2, #0
 8010142:	f7f0 fa59 	bl	80005f8 <__aeabi_dmul>
 8010146:	4632      	mov	r2, r6
 8010148:	ec41 0b19 	vmov	d9, r0, r1
 801014c:	463b      	mov	r3, r7
 801014e:	4640      	mov	r0, r8
 8010150:	4649      	mov	r1, r9
 8010152:	f7f0 fa51 	bl	80005f8 <__aeabi_dmul>
 8010156:	4602      	mov	r2, r0
 8010158:	460b      	mov	r3, r1
 801015a:	ec51 0b19 	vmov	r0, r1, d9
 801015e:	f7f0 f893 	bl	8000288 <__aeabi_dsub>
 8010162:	4652      	mov	r2, sl
 8010164:	465b      	mov	r3, fp
 8010166:	f7f0 fa47 	bl	80005f8 <__aeabi_dmul>
 801016a:	ec53 2b18 	vmov	r2, r3, d8
 801016e:	f7f0 f88b 	bl	8000288 <__aeabi_dsub>
 8010172:	a30b      	add	r3, pc, #44	; (adr r3, 80101a0 <__kernel_sin+0x148>)
 8010174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010178:	4606      	mov	r6, r0
 801017a:	460f      	mov	r7, r1
 801017c:	4640      	mov	r0, r8
 801017e:	4649      	mov	r1, r9
 8010180:	f7f0 fa3a 	bl	80005f8 <__aeabi_dmul>
 8010184:	4602      	mov	r2, r0
 8010186:	460b      	mov	r3, r1
 8010188:	4630      	mov	r0, r6
 801018a:	4639      	mov	r1, r7
 801018c:	f7f0 f87e 	bl	800028c <__adddf3>
 8010190:	4602      	mov	r2, r0
 8010192:	460b      	mov	r3, r1
 8010194:	4620      	mov	r0, r4
 8010196:	4629      	mov	r1, r5
 8010198:	f7f0 f876 	bl	8000288 <__aeabi_dsub>
 801019c:	e7c4      	b.n	8010128 <__kernel_sin+0xd0>
 801019e:	bf00      	nop
 80101a0:	55555549 	.word	0x55555549
 80101a4:	3fc55555 	.word	0x3fc55555
 80101a8:	3fe00000 	.word	0x3fe00000
 80101ac:	5acfd57c 	.word	0x5acfd57c
 80101b0:	3de5d93a 	.word	0x3de5d93a
 80101b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80101b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80101bc:	57b1fe7d 	.word	0x57b1fe7d
 80101c0:	3ec71de3 	.word	0x3ec71de3
 80101c4:	19c161d5 	.word	0x19c161d5
 80101c8:	3f2a01a0 	.word	0x3f2a01a0
 80101cc:	1110f8a6 	.word	0x1110f8a6
 80101d0:	3f811111 	.word	0x3f811111
 80101d4:	00000000 	.word	0x00000000

080101d8 <__ieee754_rem_pio2>:
 80101d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101dc:	ed2d 8b02 	vpush	{d8}
 80101e0:	ec55 4b10 	vmov	r4, r5, d0
 80101e4:	4bca      	ldr	r3, [pc, #808]	; (8010510 <__ieee754_rem_pio2+0x338>)
 80101e6:	b08b      	sub	sp, #44	; 0x2c
 80101e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80101ec:	4598      	cmp	r8, r3
 80101ee:	4682      	mov	sl, r0
 80101f0:	9502      	str	r5, [sp, #8]
 80101f2:	dc08      	bgt.n	8010206 <__ieee754_rem_pio2+0x2e>
 80101f4:	2200      	movs	r2, #0
 80101f6:	2300      	movs	r3, #0
 80101f8:	ed80 0b00 	vstr	d0, [r0]
 80101fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010200:	f04f 0b00 	mov.w	fp, #0
 8010204:	e028      	b.n	8010258 <__ieee754_rem_pio2+0x80>
 8010206:	4bc3      	ldr	r3, [pc, #780]	; (8010514 <__ieee754_rem_pio2+0x33c>)
 8010208:	4598      	cmp	r8, r3
 801020a:	dc78      	bgt.n	80102fe <__ieee754_rem_pio2+0x126>
 801020c:	9b02      	ldr	r3, [sp, #8]
 801020e:	4ec2      	ldr	r6, [pc, #776]	; (8010518 <__ieee754_rem_pio2+0x340>)
 8010210:	2b00      	cmp	r3, #0
 8010212:	ee10 0a10 	vmov	r0, s0
 8010216:	a3b0      	add	r3, pc, #704	; (adr r3, 80104d8 <__ieee754_rem_pio2+0x300>)
 8010218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801021c:	4629      	mov	r1, r5
 801021e:	dd39      	ble.n	8010294 <__ieee754_rem_pio2+0xbc>
 8010220:	f7f0 f832 	bl	8000288 <__aeabi_dsub>
 8010224:	45b0      	cmp	r8, r6
 8010226:	4604      	mov	r4, r0
 8010228:	460d      	mov	r5, r1
 801022a:	d01b      	beq.n	8010264 <__ieee754_rem_pio2+0x8c>
 801022c:	a3ac      	add	r3, pc, #688	; (adr r3, 80104e0 <__ieee754_rem_pio2+0x308>)
 801022e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010232:	f7f0 f829 	bl	8000288 <__aeabi_dsub>
 8010236:	4602      	mov	r2, r0
 8010238:	460b      	mov	r3, r1
 801023a:	e9ca 2300 	strd	r2, r3, [sl]
 801023e:	4620      	mov	r0, r4
 8010240:	4629      	mov	r1, r5
 8010242:	f7f0 f821 	bl	8000288 <__aeabi_dsub>
 8010246:	a3a6      	add	r3, pc, #664	; (adr r3, 80104e0 <__ieee754_rem_pio2+0x308>)
 8010248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024c:	f7f0 f81c 	bl	8000288 <__aeabi_dsub>
 8010250:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010254:	f04f 0b01 	mov.w	fp, #1
 8010258:	4658      	mov	r0, fp
 801025a:	b00b      	add	sp, #44	; 0x2c
 801025c:	ecbd 8b02 	vpop	{d8}
 8010260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010264:	a3a0      	add	r3, pc, #640	; (adr r3, 80104e8 <__ieee754_rem_pio2+0x310>)
 8010266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801026a:	f7f0 f80d 	bl	8000288 <__aeabi_dsub>
 801026e:	a3a0      	add	r3, pc, #640	; (adr r3, 80104f0 <__ieee754_rem_pio2+0x318>)
 8010270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010274:	4604      	mov	r4, r0
 8010276:	460d      	mov	r5, r1
 8010278:	f7f0 f806 	bl	8000288 <__aeabi_dsub>
 801027c:	4602      	mov	r2, r0
 801027e:	460b      	mov	r3, r1
 8010280:	e9ca 2300 	strd	r2, r3, [sl]
 8010284:	4620      	mov	r0, r4
 8010286:	4629      	mov	r1, r5
 8010288:	f7ef fffe 	bl	8000288 <__aeabi_dsub>
 801028c:	a398      	add	r3, pc, #608	; (adr r3, 80104f0 <__ieee754_rem_pio2+0x318>)
 801028e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010292:	e7db      	b.n	801024c <__ieee754_rem_pio2+0x74>
 8010294:	f7ef fffa 	bl	800028c <__adddf3>
 8010298:	45b0      	cmp	r8, r6
 801029a:	4604      	mov	r4, r0
 801029c:	460d      	mov	r5, r1
 801029e:	d016      	beq.n	80102ce <__ieee754_rem_pio2+0xf6>
 80102a0:	a38f      	add	r3, pc, #572	; (adr r3, 80104e0 <__ieee754_rem_pio2+0x308>)
 80102a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a6:	f7ef fff1 	bl	800028c <__adddf3>
 80102aa:	4602      	mov	r2, r0
 80102ac:	460b      	mov	r3, r1
 80102ae:	e9ca 2300 	strd	r2, r3, [sl]
 80102b2:	4620      	mov	r0, r4
 80102b4:	4629      	mov	r1, r5
 80102b6:	f7ef ffe7 	bl	8000288 <__aeabi_dsub>
 80102ba:	a389      	add	r3, pc, #548	; (adr r3, 80104e0 <__ieee754_rem_pio2+0x308>)
 80102bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c0:	f7ef ffe4 	bl	800028c <__adddf3>
 80102c4:	f04f 3bff 	mov.w	fp, #4294967295
 80102c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80102cc:	e7c4      	b.n	8010258 <__ieee754_rem_pio2+0x80>
 80102ce:	a386      	add	r3, pc, #536	; (adr r3, 80104e8 <__ieee754_rem_pio2+0x310>)
 80102d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d4:	f7ef ffda 	bl	800028c <__adddf3>
 80102d8:	a385      	add	r3, pc, #532	; (adr r3, 80104f0 <__ieee754_rem_pio2+0x318>)
 80102da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102de:	4604      	mov	r4, r0
 80102e0:	460d      	mov	r5, r1
 80102e2:	f7ef ffd3 	bl	800028c <__adddf3>
 80102e6:	4602      	mov	r2, r0
 80102e8:	460b      	mov	r3, r1
 80102ea:	e9ca 2300 	strd	r2, r3, [sl]
 80102ee:	4620      	mov	r0, r4
 80102f0:	4629      	mov	r1, r5
 80102f2:	f7ef ffc9 	bl	8000288 <__aeabi_dsub>
 80102f6:	a37e      	add	r3, pc, #504	; (adr r3, 80104f0 <__ieee754_rem_pio2+0x318>)
 80102f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fc:	e7e0      	b.n	80102c0 <__ieee754_rem_pio2+0xe8>
 80102fe:	4b87      	ldr	r3, [pc, #540]	; (801051c <__ieee754_rem_pio2+0x344>)
 8010300:	4598      	cmp	r8, r3
 8010302:	f300 80d8 	bgt.w	80104b6 <__ieee754_rem_pio2+0x2de>
 8010306:	f7ff fd7b 	bl	800fe00 <fabs>
 801030a:	ec55 4b10 	vmov	r4, r5, d0
 801030e:	ee10 0a10 	vmov	r0, s0
 8010312:	a379      	add	r3, pc, #484	; (adr r3, 80104f8 <__ieee754_rem_pio2+0x320>)
 8010314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010318:	4629      	mov	r1, r5
 801031a:	f7f0 f96d 	bl	80005f8 <__aeabi_dmul>
 801031e:	4b80      	ldr	r3, [pc, #512]	; (8010520 <__ieee754_rem_pio2+0x348>)
 8010320:	2200      	movs	r2, #0
 8010322:	f7ef ffb3 	bl	800028c <__adddf3>
 8010326:	f7f0 fc17 	bl	8000b58 <__aeabi_d2iz>
 801032a:	4683      	mov	fp, r0
 801032c:	f7f0 f8fa 	bl	8000524 <__aeabi_i2d>
 8010330:	4602      	mov	r2, r0
 8010332:	460b      	mov	r3, r1
 8010334:	ec43 2b18 	vmov	d8, r2, r3
 8010338:	a367      	add	r3, pc, #412	; (adr r3, 80104d8 <__ieee754_rem_pio2+0x300>)
 801033a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801033e:	f7f0 f95b 	bl	80005f8 <__aeabi_dmul>
 8010342:	4602      	mov	r2, r0
 8010344:	460b      	mov	r3, r1
 8010346:	4620      	mov	r0, r4
 8010348:	4629      	mov	r1, r5
 801034a:	f7ef ff9d 	bl	8000288 <__aeabi_dsub>
 801034e:	a364      	add	r3, pc, #400	; (adr r3, 80104e0 <__ieee754_rem_pio2+0x308>)
 8010350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010354:	4606      	mov	r6, r0
 8010356:	460f      	mov	r7, r1
 8010358:	ec51 0b18 	vmov	r0, r1, d8
 801035c:	f7f0 f94c 	bl	80005f8 <__aeabi_dmul>
 8010360:	f1bb 0f1f 	cmp.w	fp, #31
 8010364:	4604      	mov	r4, r0
 8010366:	460d      	mov	r5, r1
 8010368:	dc0d      	bgt.n	8010386 <__ieee754_rem_pio2+0x1ae>
 801036a:	4b6e      	ldr	r3, [pc, #440]	; (8010524 <__ieee754_rem_pio2+0x34c>)
 801036c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010374:	4543      	cmp	r3, r8
 8010376:	d006      	beq.n	8010386 <__ieee754_rem_pio2+0x1ae>
 8010378:	4622      	mov	r2, r4
 801037a:	462b      	mov	r3, r5
 801037c:	4630      	mov	r0, r6
 801037e:	4639      	mov	r1, r7
 8010380:	f7ef ff82 	bl	8000288 <__aeabi_dsub>
 8010384:	e00e      	b.n	80103a4 <__ieee754_rem_pio2+0x1cc>
 8010386:	462b      	mov	r3, r5
 8010388:	4622      	mov	r2, r4
 801038a:	4630      	mov	r0, r6
 801038c:	4639      	mov	r1, r7
 801038e:	f7ef ff7b 	bl	8000288 <__aeabi_dsub>
 8010392:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010396:	9303      	str	r3, [sp, #12]
 8010398:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801039c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80103a0:	2b10      	cmp	r3, #16
 80103a2:	dc02      	bgt.n	80103aa <__ieee754_rem_pio2+0x1d2>
 80103a4:	e9ca 0100 	strd	r0, r1, [sl]
 80103a8:	e039      	b.n	801041e <__ieee754_rem_pio2+0x246>
 80103aa:	a34f      	add	r3, pc, #316	; (adr r3, 80104e8 <__ieee754_rem_pio2+0x310>)
 80103ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b0:	ec51 0b18 	vmov	r0, r1, d8
 80103b4:	f7f0 f920 	bl	80005f8 <__aeabi_dmul>
 80103b8:	4604      	mov	r4, r0
 80103ba:	460d      	mov	r5, r1
 80103bc:	4602      	mov	r2, r0
 80103be:	460b      	mov	r3, r1
 80103c0:	4630      	mov	r0, r6
 80103c2:	4639      	mov	r1, r7
 80103c4:	f7ef ff60 	bl	8000288 <__aeabi_dsub>
 80103c8:	4602      	mov	r2, r0
 80103ca:	460b      	mov	r3, r1
 80103cc:	4680      	mov	r8, r0
 80103ce:	4689      	mov	r9, r1
 80103d0:	4630      	mov	r0, r6
 80103d2:	4639      	mov	r1, r7
 80103d4:	f7ef ff58 	bl	8000288 <__aeabi_dsub>
 80103d8:	4622      	mov	r2, r4
 80103da:	462b      	mov	r3, r5
 80103dc:	f7ef ff54 	bl	8000288 <__aeabi_dsub>
 80103e0:	a343      	add	r3, pc, #268	; (adr r3, 80104f0 <__ieee754_rem_pio2+0x318>)
 80103e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e6:	4604      	mov	r4, r0
 80103e8:	460d      	mov	r5, r1
 80103ea:	ec51 0b18 	vmov	r0, r1, d8
 80103ee:	f7f0 f903 	bl	80005f8 <__aeabi_dmul>
 80103f2:	4622      	mov	r2, r4
 80103f4:	462b      	mov	r3, r5
 80103f6:	f7ef ff47 	bl	8000288 <__aeabi_dsub>
 80103fa:	4602      	mov	r2, r0
 80103fc:	460b      	mov	r3, r1
 80103fe:	4604      	mov	r4, r0
 8010400:	460d      	mov	r5, r1
 8010402:	4640      	mov	r0, r8
 8010404:	4649      	mov	r1, r9
 8010406:	f7ef ff3f 	bl	8000288 <__aeabi_dsub>
 801040a:	9a03      	ldr	r2, [sp, #12]
 801040c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010410:	1ad3      	subs	r3, r2, r3
 8010412:	2b31      	cmp	r3, #49	; 0x31
 8010414:	dc24      	bgt.n	8010460 <__ieee754_rem_pio2+0x288>
 8010416:	e9ca 0100 	strd	r0, r1, [sl]
 801041a:	4646      	mov	r6, r8
 801041c:	464f      	mov	r7, r9
 801041e:	e9da 8900 	ldrd	r8, r9, [sl]
 8010422:	4630      	mov	r0, r6
 8010424:	4642      	mov	r2, r8
 8010426:	464b      	mov	r3, r9
 8010428:	4639      	mov	r1, r7
 801042a:	f7ef ff2d 	bl	8000288 <__aeabi_dsub>
 801042e:	462b      	mov	r3, r5
 8010430:	4622      	mov	r2, r4
 8010432:	f7ef ff29 	bl	8000288 <__aeabi_dsub>
 8010436:	9b02      	ldr	r3, [sp, #8]
 8010438:	2b00      	cmp	r3, #0
 801043a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801043e:	f6bf af0b 	bge.w	8010258 <__ieee754_rem_pio2+0x80>
 8010442:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010446:	f8ca 3004 	str.w	r3, [sl, #4]
 801044a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801044e:	f8ca 8000 	str.w	r8, [sl]
 8010452:	f8ca 0008 	str.w	r0, [sl, #8]
 8010456:	f8ca 300c 	str.w	r3, [sl, #12]
 801045a:	f1cb 0b00 	rsb	fp, fp, #0
 801045e:	e6fb      	b.n	8010258 <__ieee754_rem_pio2+0x80>
 8010460:	a327      	add	r3, pc, #156	; (adr r3, 8010500 <__ieee754_rem_pio2+0x328>)
 8010462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010466:	ec51 0b18 	vmov	r0, r1, d8
 801046a:	f7f0 f8c5 	bl	80005f8 <__aeabi_dmul>
 801046e:	4604      	mov	r4, r0
 8010470:	460d      	mov	r5, r1
 8010472:	4602      	mov	r2, r0
 8010474:	460b      	mov	r3, r1
 8010476:	4640      	mov	r0, r8
 8010478:	4649      	mov	r1, r9
 801047a:	f7ef ff05 	bl	8000288 <__aeabi_dsub>
 801047e:	4602      	mov	r2, r0
 8010480:	460b      	mov	r3, r1
 8010482:	4606      	mov	r6, r0
 8010484:	460f      	mov	r7, r1
 8010486:	4640      	mov	r0, r8
 8010488:	4649      	mov	r1, r9
 801048a:	f7ef fefd 	bl	8000288 <__aeabi_dsub>
 801048e:	4622      	mov	r2, r4
 8010490:	462b      	mov	r3, r5
 8010492:	f7ef fef9 	bl	8000288 <__aeabi_dsub>
 8010496:	a31c      	add	r3, pc, #112	; (adr r3, 8010508 <__ieee754_rem_pio2+0x330>)
 8010498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801049c:	4604      	mov	r4, r0
 801049e:	460d      	mov	r5, r1
 80104a0:	ec51 0b18 	vmov	r0, r1, d8
 80104a4:	f7f0 f8a8 	bl	80005f8 <__aeabi_dmul>
 80104a8:	4622      	mov	r2, r4
 80104aa:	462b      	mov	r3, r5
 80104ac:	f7ef feec 	bl	8000288 <__aeabi_dsub>
 80104b0:	4604      	mov	r4, r0
 80104b2:	460d      	mov	r5, r1
 80104b4:	e760      	b.n	8010378 <__ieee754_rem_pio2+0x1a0>
 80104b6:	4b1c      	ldr	r3, [pc, #112]	; (8010528 <__ieee754_rem_pio2+0x350>)
 80104b8:	4598      	cmp	r8, r3
 80104ba:	dd37      	ble.n	801052c <__ieee754_rem_pio2+0x354>
 80104bc:	ee10 2a10 	vmov	r2, s0
 80104c0:	462b      	mov	r3, r5
 80104c2:	4620      	mov	r0, r4
 80104c4:	4629      	mov	r1, r5
 80104c6:	f7ef fedf 	bl	8000288 <__aeabi_dsub>
 80104ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80104ce:	e9ca 0100 	strd	r0, r1, [sl]
 80104d2:	e695      	b.n	8010200 <__ieee754_rem_pio2+0x28>
 80104d4:	f3af 8000 	nop.w
 80104d8:	54400000 	.word	0x54400000
 80104dc:	3ff921fb 	.word	0x3ff921fb
 80104e0:	1a626331 	.word	0x1a626331
 80104e4:	3dd0b461 	.word	0x3dd0b461
 80104e8:	1a600000 	.word	0x1a600000
 80104ec:	3dd0b461 	.word	0x3dd0b461
 80104f0:	2e037073 	.word	0x2e037073
 80104f4:	3ba3198a 	.word	0x3ba3198a
 80104f8:	6dc9c883 	.word	0x6dc9c883
 80104fc:	3fe45f30 	.word	0x3fe45f30
 8010500:	2e000000 	.word	0x2e000000
 8010504:	3ba3198a 	.word	0x3ba3198a
 8010508:	252049c1 	.word	0x252049c1
 801050c:	397b839a 	.word	0x397b839a
 8010510:	3fe921fb 	.word	0x3fe921fb
 8010514:	4002d97b 	.word	0x4002d97b
 8010518:	3ff921fb 	.word	0x3ff921fb
 801051c:	413921fb 	.word	0x413921fb
 8010520:	3fe00000 	.word	0x3fe00000
 8010524:	08011478 	.word	0x08011478
 8010528:	7fefffff 	.word	0x7fefffff
 801052c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8010530:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8010534:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8010538:	4620      	mov	r0, r4
 801053a:	460d      	mov	r5, r1
 801053c:	f7f0 fb0c 	bl	8000b58 <__aeabi_d2iz>
 8010540:	f7ef fff0 	bl	8000524 <__aeabi_i2d>
 8010544:	4602      	mov	r2, r0
 8010546:	460b      	mov	r3, r1
 8010548:	4620      	mov	r0, r4
 801054a:	4629      	mov	r1, r5
 801054c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010550:	f7ef fe9a 	bl	8000288 <__aeabi_dsub>
 8010554:	4b21      	ldr	r3, [pc, #132]	; (80105dc <__ieee754_rem_pio2+0x404>)
 8010556:	2200      	movs	r2, #0
 8010558:	f7f0 f84e 	bl	80005f8 <__aeabi_dmul>
 801055c:	460d      	mov	r5, r1
 801055e:	4604      	mov	r4, r0
 8010560:	f7f0 fafa 	bl	8000b58 <__aeabi_d2iz>
 8010564:	f7ef ffde 	bl	8000524 <__aeabi_i2d>
 8010568:	4602      	mov	r2, r0
 801056a:	460b      	mov	r3, r1
 801056c:	4620      	mov	r0, r4
 801056e:	4629      	mov	r1, r5
 8010570:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010574:	f7ef fe88 	bl	8000288 <__aeabi_dsub>
 8010578:	4b18      	ldr	r3, [pc, #96]	; (80105dc <__ieee754_rem_pio2+0x404>)
 801057a:	2200      	movs	r2, #0
 801057c:	f7f0 f83c 	bl	80005f8 <__aeabi_dmul>
 8010580:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010584:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8010588:	2703      	movs	r7, #3
 801058a:	2400      	movs	r4, #0
 801058c:	2500      	movs	r5, #0
 801058e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8010592:	4622      	mov	r2, r4
 8010594:	462b      	mov	r3, r5
 8010596:	46b9      	mov	r9, r7
 8010598:	3f01      	subs	r7, #1
 801059a:	f7f0 fa95 	bl	8000ac8 <__aeabi_dcmpeq>
 801059e:	2800      	cmp	r0, #0
 80105a0:	d1f5      	bne.n	801058e <__ieee754_rem_pio2+0x3b6>
 80105a2:	4b0f      	ldr	r3, [pc, #60]	; (80105e0 <__ieee754_rem_pio2+0x408>)
 80105a4:	9301      	str	r3, [sp, #4]
 80105a6:	2302      	movs	r3, #2
 80105a8:	9300      	str	r3, [sp, #0]
 80105aa:	4632      	mov	r2, r6
 80105ac:	464b      	mov	r3, r9
 80105ae:	4651      	mov	r1, sl
 80105b0:	a804      	add	r0, sp, #16
 80105b2:	f000 f819 	bl	80105e8 <__kernel_rem_pio2>
 80105b6:	9b02      	ldr	r3, [sp, #8]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	4683      	mov	fp, r0
 80105bc:	f6bf ae4c 	bge.w	8010258 <__ieee754_rem_pio2+0x80>
 80105c0:	e9da 2100 	ldrd	r2, r1, [sl]
 80105c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80105c8:	e9ca 2300 	strd	r2, r3, [sl]
 80105cc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80105d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80105d4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80105d8:	e73f      	b.n	801045a <__ieee754_rem_pio2+0x282>
 80105da:	bf00      	nop
 80105dc:	41700000 	.word	0x41700000
 80105e0:	080114f8 	.word	0x080114f8
 80105e4:	00000000 	.word	0x00000000

080105e8 <__kernel_rem_pio2>:
 80105e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105ec:	ed2d 8b02 	vpush	{d8}
 80105f0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80105f4:	f112 0f14 	cmn.w	r2, #20
 80105f8:	9306      	str	r3, [sp, #24]
 80105fa:	9104      	str	r1, [sp, #16]
 80105fc:	4bc2      	ldr	r3, [pc, #776]	; (8010908 <__kernel_rem_pio2+0x320>)
 80105fe:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8010600:	9009      	str	r0, [sp, #36]	; 0x24
 8010602:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010606:	9300      	str	r3, [sp, #0]
 8010608:	9b06      	ldr	r3, [sp, #24]
 801060a:	f103 33ff 	add.w	r3, r3, #4294967295
 801060e:	bfa8      	it	ge
 8010610:	1ed4      	subge	r4, r2, #3
 8010612:	9305      	str	r3, [sp, #20]
 8010614:	bfb2      	itee	lt
 8010616:	2400      	movlt	r4, #0
 8010618:	2318      	movge	r3, #24
 801061a:	fb94 f4f3 	sdivge	r4, r4, r3
 801061e:	f06f 0317 	mvn.w	r3, #23
 8010622:	fb04 3303 	mla	r3, r4, r3, r3
 8010626:	eb03 0a02 	add.w	sl, r3, r2
 801062a:	9b00      	ldr	r3, [sp, #0]
 801062c:	9a05      	ldr	r2, [sp, #20]
 801062e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80108f8 <__kernel_rem_pio2+0x310>
 8010632:	eb03 0802 	add.w	r8, r3, r2
 8010636:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010638:	1aa7      	subs	r7, r4, r2
 801063a:	ae20      	add	r6, sp, #128	; 0x80
 801063c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010640:	2500      	movs	r5, #0
 8010642:	4545      	cmp	r5, r8
 8010644:	dd13      	ble.n	801066e <__kernel_rem_pio2+0x86>
 8010646:	9b06      	ldr	r3, [sp, #24]
 8010648:	aa20      	add	r2, sp, #128	; 0x80
 801064a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801064e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8010652:	f04f 0800 	mov.w	r8, #0
 8010656:	9b00      	ldr	r3, [sp, #0]
 8010658:	4598      	cmp	r8, r3
 801065a:	dc31      	bgt.n	80106c0 <__kernel_rem_pio2+0xd8>
 801065c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80108f8 <__kernel_rem_pio2+0x310>
 8010660:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010664:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010668:	462f      	mov	r7, r5
 801066a:	2600      	movs	r6, #0
 801066c:	e01b      	b.n	80106a6 <__kernel_rem_pio2+0xbe>
 801066e:	42ef      	cmn	r7, r5
 8010670:	d407      	bmi.n	8010682 <__kernel_rem_pio2+0x9a>
 8010672:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010676:	f7ef ff55 	bl	8000524 <__aeabi_i2d>
 801067a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801067e:	3501      	adds	r5, #1
 8010680:	e7df      	b.n	8010642 <__kernel_rem_pio2+0x5a>
 8010682:	ec51 0b18 	vmov	r0, r1, d8
 8010686:	e7f8      	b.n	801067a <__kernel_rem_pio2+0x92>
 8010688:	e9d7 2300 	ldrd	r2, r3, [r7]
 801068c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010690:	f7ef ffb2 	bl	80005f8 <__aeabi_dmul>
 8010694:	4602      	mov	r2, r0
 8010696:	460b      	mov	r3, r1
 8010698:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801069c:	f7ef fdf6 	bl	800028c <__adddf3>
 80106a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106a4:	3601      	adds	r6, #1
 80106a6:	9b05      	ldr	r3, [sp, #20]
 80106a8:	429e      	cmp	r6, r3
 80106aa:	f1a7 0708 	sub.w	r7, r7, #8
 80106ae:	ddeb      	ble.n	8010688 <__kernel_rem_pio2+0xa0>
 80106b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80106b4:	f108 0801 	add.w	r8, r8, #1
 80106b8:	ecab 7b02 	vstmia	fp!, {d7}
 80106bc:	3508      	adds	r5, #8
 80106be:	e7ca      	b.n	8010656 <__kernel_rem_pio2+0x6e>
 80106c0:	9b00      	ldr	r3, [sp, #0]
 80106c2:	aa0c      	add	r2, sp, #48	; 0x30
 80106c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80106c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80106ca:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80106cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80106d0:	9c00      	ldr	r4, [sp, #0]
 80106d2:	930a      	str	r3, [sp, #40]	; 0x28
 80106d4:	00e3      	lsls	r3, r4, #3
 80106d6:	9308      	str	r3, [sp, #32]
 80106d8:	ab98      	add	r3, sp, #608	; 0x260
 80106da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80106de:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80106e2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80106e6:	ab70      	add	r3, sp, #448	; 0x1c0
 80106e8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80106ec:	46c3      	mov	fp, r8
 80106ee:	46a1      	mov	r9, r4
 80106f0:	f1b9 0f00 	cmp.w	r9, #0
 80106f4:	f1a5 0508 	sub.w	r5, r5, #8
 80106f8:	dc77      	bgt.n	80107ea <__kernel_rem_pio2+0x202>
 80106fa:	ec47 6b10 	vmov	d0, r6, r7
 80106fe:	4650      	mov	r0, sl
 8010700:	f000 fac2 	bl	8010c88 <scalbn>
 8010704:	ec57 6b10 	vmov	r6, r7, d0
 8010708:	2200      	movs	r2, #0
 801070a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801070e:	ee10 0a10 	vmov	r0, s0
 8010712:	4639      	mov	r1, r7
 8010714:	f7ef ff70 	bl	80005f8 <__aeabi_dmul>
 8010718:	ec41 0b10 	vmov	d0, r0, r1
 801071c:	f000 fb34 	bl	8010d88 <floor>
 8010720:	4b7a      	ldr	r3, [pc, #488]	; (801090c <__kernel_rem_pio2+0x324>)
 8010722:	ec51 0b10 	vmov	r0, r1, d0
 8010726:	2200      	movs	r2, #0
 8010728:	f7ef ff66 	bl	80005f8 <__aeabi_dmul>
 801072c:	4602      	mov	r2, r0
 801072e:	460b      	mov	r3, r1
 8010730:	4630      	mov	r0, r6
 8010732:	4639      	mov	r1, r7
 8010734:	f7ef fda8 	bl	8000288 <__aeabi_dsub>
 8010738:	460f      	mov	r7, r1
 801073a:	4606      	mov	r6, r0
 801073c:	f7f0 fa0c 	bl	8000b58 <__aeabi_d2iz>
 8010740:	9002      	str	r0, [sp, #8]
 8010742:	f7ef feef 	bl	8000524 <__aeabi_i2d>
 8010746:	4602      	mov	r2, r0
 8010748:	460b      	mov	r3, r1
 801074a:	4630      	mov	r0, r6
 801074c:	4639      	mov	r1, r7
 801074e:	f7ef fd9b 	bl	8000288 <__aeabi_dsub>
 8010752:	f1ba 0f00 	cmp.w	sl, #0
 8010756:	4606      	mov	r6, r0
 8010758:	460f      	mov	r7, r1
 801075a:	dd6d      	ble.n	8010838 <__kernel_rem_pio2+0x250>
 801075c:	1e61      	subs	r1, r4, #1
 801075e:	ab0c      	add	r3, sp, #48	; 0x30
 8010760:	9d02      	ldr	r5, [sp, #8]
 8010762:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010766:	f1ca 0018 	rsb	r0, sl, #24
 801076a:	fa43 f200 	asr.w	r2, r3, r0
 801076e:	4415      	add	r5, r2
 8010770:	4082      	lsls	r2, r0
 8010772:	1a9b      	subs	r3, r3, r2
 8010774:	aa0c      	add	r2, sp, #48	; 0x30
 8010776:	9502      	str	r5, [sp, #8]
 8010778:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801077c:	f1ca 0217 	rsb	r2, sl, #23
 8010780:	fa43 fb02 	asr.w	fp, r3, r2
 8010784:	f1bb 0f00 	cmp.w	fp, #0
 8010788:	dd65      	ble.n	8010856 <__kernel_rem_pio2+0x26e>
 801078a:	9b02      	ldr	r3, [sp, #8]
 801078c:	2200      	movs	r2, #0
 801078e:	3301      	adds	r3, #1
 8010790:	9302      	str	r3, [sp, #8]
 8010792:	4615      	mov	r5, r2
 8010794:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010798:	4294      	cmp	r4, r2
 801079a:	f300 809f 	bgt.w	80108dc <__kernel_rem_pio2+0x2f4>
 801079e:	f1ba 0f00 	cmp.w	sl, #0
 80107a2:	dd07      	ble.n	80107b4 <__kernel_rem_pio2+0x1cc>
 80107a4:	f1ba 0f01 	cmp.w	sl, #1
 80107a8:	f000 80c1 	beq.w	801092e <__kernel_rem_pio2+0x346>
 80107ac:	f1ba 0f02 	cmp.w	sl, #2
 80107b0:	f000 80c7 	beq.w	8010942 <__kernel_rem_pio2+0x35a>
 80107b4:	f1bb 0f02 	cmp.w	fp, #2
 80107b8:	d14d      	bne.n	8010856 <__kernel_rem_pio2+0x26e>
 80107ba:	4632      	mov	r2, r6
 80107bc:	463b      	mov	r3, r7
 80107be:	4954      	ldr	r1, [pc, #336]	; (8010910 <__kernel_rem_pio2+0x328>)
 80107c0:	2000      	movs	r0, #0
 80107c2:	f7ef fd61 	bl	8000288 <__aeabi_dsub>
 80107c6:	4606      	mov	r6, r0
 80107c8:	460f      	mov	r7, r1
 80107ca:	2d00      	cmp	r5, #0
 80107cc:	d043      	beq.n	8010856 <__kernel_rem_pio2+0x26e>
 80107ce:	4650      	mov	r0, sl
 80107d0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8010900 <__kernel_rem_pio2+0x318>
 80107d4:	f000 fa58 	bl	8010c88 <scalbn>
 80107d8:	4630      	mov	r0, r6
 80107da:	4639      	mov	r1, r7
 80107dc:	ec53 2b10 	vmov	r2, r3, d0
 80107e0:	f7ef fd52 	bl	8000288 <__aeabi_dsub>
 80107e4:	4606      	mov	r6, r0
 80107e6:	460f      	mov	r7, r1
 80107e8:	e035      	b.n	8010856 <__kernel_rem_pio2+0x26e>
 80107ea:	4b4a      	ldr	r3, [pc, #296]	; (8010914 <__kernel_rem_pio2+0x32c>)
 80107ec:	2200      	movs	r2, #0
 80107ee:	4630      	mov	r0, r6
 80107f0:	4639      	mov	r1, r7
 80107f2:	f7ef ff01 	bl	80005f8 <__aeabi_dmul>
 80107f6:	f7f0 f9af 	bl	8000b58 <__aeabi_d2iz>
 80107fa:	f7ef fe93 	bl	8000524 <__aeabi_i2d>
 80107fe:	4602      	mov	r2, r0
 8010800:	460b      	mov	r3, r1
 8010802:	ec43 2b18 	vmov	d8, r2, r3
 8010806:	4b44      	ldr	r3, [pc, #272]	; (8010918 <__kernel_rem_pio2+0x330>)
 8010808:	2200      	movs	r2, #0
 801080a:	f7ef fef5 	bl	80005f8 <__aeabi_dmul>
 801080e:	4602      	mov	r2, r0
 8010810:	460b      	mov	r3, r1
 8010812:	4630      	mov	r0, r6
 8010814:	4639      	mov	r1, r7
 8010816:	f7ef fd37 	bl	8000288 <__aeabi_dsub>
 801081a:	f7f0 f99d 	bl	8000b58 <__aeabi_d2iz>
 801081e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010822:	f84b 0b04 	str.w	r0, [fp], #4
 8010826:	ec51 0b18 	vmov	r0, r1, d8
 801082a:	f7ef fd2f 	bl	800028c <__adddf3>
 801082e:	f109 39ff 	add.w	r9, r9, #4294967295
 8010832:	4606      	mov	r6, r0
 8010834:	460f      	mov	r7, r1
 8010836:	e75b      	b.n	80106f0 <__kernel_rem_pio2+0x108>
 8010838:	d106      	bne.n	8010848 <__kernel_rem_pio2+0x260>
 801083a:	1e63      	subs	r3, r4, #1
 801083c:	aa0c      	add	r2, sp, #48	; 0x30
 801083e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010842:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8010846:	e79d      	b.n	8010784 <__kernel_rem_pio2+0x19c>
 8010848:	4b34      	ldr	r3, [pc, #208]	; (801091c <__kernel_rem_pio2+0x334>)
 801084a:	2200      	movs	r2, #0
 801084c:	f7f0 f95a 	bl	8000b04 <__aeabi_dcmpge>
 8010850:	2800      	cmp	r0, #0
 8010852:	d140      	bne.n	80108d6 <__kernel_rem_pio2+0x2ee>
 8010854:	4683      	mov	fp, r0
 8010856:	2200      	movs	r2, #0
 8010858:	2300      	movs	r3, #0
 801085a:	4630      	mov	r0, r6
 801085c:	4639      	mov	r1, r7
 801085e:	f7f0 f933 	bl	8000ac8 <__aeabi_dcmpeq>
 8010862:	2800      	cmp	r0, #0
 8010864:	f000 80c1 	beq.w	80109ea <__kernel_rem_pio2+0x402>
 8010868:	1e65      	subs	r5, r4, #1
 801086a:	462b      	mov	r3, r5
 801086c:	2200      	movs	r2, #0
 801086e:	9900      	ldr	r1, [sp, #0]
 8010870:	428b      	cmp	r3, r1
 8010872:	da6d      	bge.n	8010950 <__kernel_rem_pio2+0x368>
 8010874:	2a00      	cmp	r2, #0
 8010876:	f000 808a 	beq.w	801098e <__kernel_rem_pio2+0x3a6>
 801087a:	ab0c      	add	r3, sp, #48	; 0x30
 801087c:	f1aa 0a18 	sub.w	sl, sl, #24
 8010880:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010884:	2b00      	cmp	r3, #0
 8010886:	f000 80ae 	beq.w	80109e6 <__kernel_rem_pio2+0x3fe>
 801088a:	4650      	mov	r0, sl
 801088c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8010900 <__kernel_rem_pio2+0x318>
 8010890:	f000 f9fa 	bl	8010c88 <scalbn>
 8010894:	1c6b      	adds	r3, r5, #1
 8010896:	00da      	lsls	r2, r3, #3
 8010898:	9205      	str	r2, [sp, #20]
 801089a:	ec57 6b10 	vmov	r6, r7, d0
 801089e:	aa70      	add	r2, sp, #448	; 0x1c0
 80108a0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8010914 <__kernel_rem_pio2+0x32c>
 80108a4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80108a8:	462c      	mov	r4, r5
 80108aa:	f04f 0800 	mov.w	r8, #0
 80108ae:	2c00      	cmp	r4, #0
 80108b0:	f280 80d4 	bge.w	8010a5c <__kernel_rem_pio2+0x474>
 80108b4:	462c      	mov	r4, r5
 80108b6:	2c00      	cmp	r4, #0
 80108b8:	f2c0 8102 	blt.w	8010ac0 <__kernel_rem_pio2+0x4d8>
 80108bc:	4b18      	ldr	r3, [pc, #96]	; (8010920 <__kernel_rem_pio2+0x338>)
 80108be:	461e      	mov	r6, r3
 80108c0:	ab70      	add	r3, sp, #448	; 0x1c0
 80108c2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80108c6:	1b2b      	subs	r3, r5, r4
 80108c8:	f04f 0900 	mov.w	r9, #0
 80108cc:	f04f 0a00 	mov.w	sl, #0
 80108d0:	2700      	movs	r7, #0
 80108d2:	9306      	str	r3, [sp, #24]
 80108d4:	e0e6      	b.n	8010aa4 <__kernel_rem_pio2+0x4bc>
 80108d6:	f04f 0b02 	mov.w	fp, #2
 80108da:	e756      	b.n	801078a <__kernel_rem_pio2+0x1a2>
 80108dc:	f8d8 3000 	ldr.w	r3, [r8]
 80108e0:	bb05      	cbnz	r5, 8010924 <__kernel_rem_pio2+0x33c>
 80108e2:	b123      	cbz	r3, 80108ee <__kernel_rem_pio2+0x306>
 80108e4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80108e8:	f8c8 3000 	str.w	r3, [r8]
 80108ec:	2301      	movs	r3, #1
 80108ee:	3201      	adds	r2, #1
 80108f0:	f108 0804 	add.w	r8, r8, #4
 80108f4:	461d      	mov	r5, r3
 80108f6:	e74f      	b.n	8010798 <__kernel_rem_pio2+0x1b0>
	...
 8010904:	3ff00000 	.word	0x3ff00000
 8010908:	08011640 	.word	0x08011640
 801090c:	40200000 	.word	0x40200000
 8010910:	3ff00000 	.word	0x3ff00000
 8010914:	3e700000 	.word	0x3e700000
 8010918:	41700000 	.word	0x41700000
 801091c:	3fe00000 	.word	0x3fe00000
 8010920:	08011600 	.word	0x08011600
 8010924:	1acb      	subs	r3, r1, r3
 8010926:	f8c8 3000 	str.w	r3, [r8]
 801092a:	462b      	mov	r3, r5
 801092c:	e7df      	b.n	80108ee <__kernel_rem_pio2+0x306>
 801092e:	1e62      	subs	r2, r4, #1
 8010930:	ab0c      	add	r3, sp, #48	; 0x30
 8010932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010936:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801093a:	a90c      	add	r1, sp, #48	; 0x30
 801093c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010940:	e738      	b.n	80107b4 <__kernel_rem_pio2+0x1cc>
 8010942:	1e62      	subs	r2, r4, #1
 8010944:	ab0c      	add	r3, sp, #48	; 0x30
 8010946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801094a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801094e:	e7f4      	b.n	801093a <__kernel_rem_pio2+0x352>
 8010950:	a90c      	add	r1, sp, #48	; 0x30
 8010952:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010956:	3b01      	subs	r3, #1
 8010958:	430a      	orrs	r2, r1
 801095a:	e788      	b.n	801086e <__kernel_rem_pio2+0x286>
 801095c:	3301      	adds	r3, #1
 801095e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010962:	2900      	cmp	r1, #0
 8010964:	d0fa      	beq.n	801095c <__kernel_rem_pio2+0x374>
 8010966:	9a08      	ldr	r2, [sp, #32]
 8010968:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801096c:	446a      	add	r2, sp
 801096e:	3a98      	subs	r2, #152	; 0x98
 8010970:	9208      	str	r2, [sp, #32]
 8010972:	9a06      	ldr	r2, [sp, #24]
 8010974:	a920      	add	r1, sp, #128	; 0x80
 8010976:	18a2      	adds	r2, r4, r2
 8010978:	18e3      	adds	r3, r4, r3
 801097a:	f104 0801 	add.w	r8, r4, #1
 801097e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8010982:	9302      	str	r3, [sp, #8]
 8010984:	9b02      	ldr	r3, [sp, #8]
 8010986:	4543      	cmp	r3, r8
 8010988:	da04      	bge.n	8010994 <__kernel_rem_pio2+0x3ac>
 801098a:	461c      	mov	r4, r3
 801098c:	e6a2      	b.n	80106d4 <__kernel_rem_pio2+0xec>
 801098e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010990:	2301      	movs	r3, #1
 8010992:	e7e4      	b.n	801095e <__kernel_rem_pio2+0x376>
 8010994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010996:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801099a:	f7ef fdc3 	bl	8000524 <__aeabi_i2d>
 801099e:	e8e5 0102 	strd	r0, r1, [r5], #8
 80109a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109a4:	46ab      	mov	fp, r5
 80109a6:	461c      	mov	r4, r3
 80109a8:	f04f 0900 	mov.w	r9, #0
 80109ac:	2600      	movs	r6, #0
 80109ae:	2700      	movs	r7, #0
 80109b0:	9b05      	ldr	r3, [sp, #20]
 80109b2:	4599      	cmp	r9, r3
 80109b4:	dd06      	ble.n	80109c4 <__kernel_rem_pio2+0x3dc>
 80109b6:	9b08      	ldr	r3, [sp, #32]
 80109b8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80109bc:	f108 0801 	add.w	r8, r8, #1
 80109c0:	9308      	str	r3, [sp, #32]
 80109c2:	e7df      	b.n	8010984 <__kernel_rem_pio2+0x39c>
 80109c4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80109c8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80109cc:	f7ef fe14 	bl	80005f8 <__aeabi_dmul>
 80109d0:	4602      	mov	r2, r0
 80109d2:	460b      	mov	r3, r1
 80109d4:	4630      	mov	r0, r6
 80109d6:	4639      	mov	r1, r7
 80109d8:	f7ef fc58 	bl	800028c <__adddf3>
 80109dc:	f109 0901 	add.w	r9, r9, #1
 80109e0:	4606      	mov	r6, r0
 80109e2:	460f      	mov	r7, r1
 80109e4:	e7e4      	b.n	80109b0 <__kernel_rem_pio2+0x3c8>
 80109e6:	3d01      	subs	r5, #1
 80109e8:	e747      	b.n	801087a <__kernel_rem_pio2+0x292>
 80109ea:	ec47 6b10 	vmov	d0, r6, r7
 80109ee:	f1ca 0000 	rsb	r0, sl, #0
 80109f2:	f000 f949 	bl	8010c88 <scalbn>
 80109f6:	ec57 6b10 	vmov	r6, r7, d0
 80109fa:	4ba0      	ldr	r3, [pc, #640]	; (8010c7c <__kernel_rem_pio2+0x694>)
 80109fc:	ee10 0a10 	vmov	r0, s0
 8010a00:	2200      	movs	r2, #0
 8010a02:	4639      	mov	r1, r7
 8010a04:	f7f0 f87e 	bl	8000b04 <__aeabi_dcmpge>
 8010a08:	b1f8      	cbz	r0, 8010a4a <__kernel_rem_pio2+0x462>
 8010a0a:	4b9d      	ldr	r3, [pc, #628]	; (8010c80 <__kernel_rem_pio2+0x698>)
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	4630      	mov	r0, r6
 8010a10:	4639      	mov	r1, r7
 8010a12:	f7ef fdf1 	bl	80005f8 <__aeabi_dmul>
 8010a16:	f7f0 f89f 	bl	8000b58 <__aeabi_d2iz>
 8010a1a:	4680      	mov	r8, r0
 8010a1c:	f7ef fd82 	bl	8000524 <__aeabi_i2d>
 8010a20:	4b96      	ldr	r3, [pc, #600]	; (8010c7c <__kernel_rem_pio2+0x694>)
 8010a22:	2200      	movs	r2, #0
 8010a24:	f7ef fde8 	bl	80005f8 <__aeabi_dmul>
 8010a28:	460b      	mov	r3, r1
 8010a2a:	4602      	mov	r2, r0
 8010a2c:	4639      	mov	r1, r7
 8010a2e:	4630      	mov	r0, r6
 8010a30:	f7ef fc2a 	bl	8000288 <__aeabi_dsub>
 8010a34:	f7f0 f890 	bl	8000b58 <__aeabi_d2iz>
 8010a38:	1c65      	adds	r5, r4, #1
 8010a3a:	ab0c      	add	r3, sp, #48	; 0x30
 8010a3c:	f10a 0a18 	add.w	sl, sl, #24
 8010a40:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010a44:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010a48:	e71f      	b.n	801088a <__kernel_rem_pio2+0x2a2>
 8010a4a:	4630      	mov	r0, r6
 8010a4c:	4639      	mov	r1, r7
 8010a4e:	f7f0 f883 	bl	8000b58 <__aeabi_d2iz>
 8010a52:	ab0c      	add	r3, sp, #48	; 0x30
 8010a54:	4625      	mov	r5, r4
 8010a56:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010a5a:	e716      	b.n	801088a <__kernel_rem_pio2+0x2a2>
 8010a5c:	ab0c      	add	r3, sp, #48	; 0x30
 8010a5e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010a62:	f7ef fd5f 	bl	8000524 <__aeabi_i2d>
 8010a66:	4632      	mov	r2, r6
 8010a68:	463b      	mov	r3, r7
 8010a6a:	f7ef fdc5 	bl	80005f8 <__aeabi_dmul>
 8010a6e:	4642      	mov	r2, r8
 8010a70:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8010a74:	464b      	mov	r3, r9
 8010a76:	4630      	mov	r0, r6
 8010a78:	4639      	mov	r1, r7
 8010a7a:	f7ef fdbd 	bl	80005f8 <__aeabi_dmul>
 8010a7e:	3c01      	subs	r4, #1
 8010a80:	4606      	mov	r6, r0
 8010a82:	460f      	mov	r7, r1
 8010a84:	e713      	b.n	80108ae <__kernel_rem_pio2+0x2c6>
 8010a86:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8010a8a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8010a8e:	f7ef fdb3 	bl	80005f8 <__aeabi_dmul>
 8010a92:	4602      	mov	r2, r0
 8010a94:	460b      	mov	r3, r1
 8010a96:	4648      	mov	r0, r9
 8010a98:	4651      	mov	r1, sl
 8010a9a:	f7ef fbf7 	bl	800028c <__adddf3>
 8010a9e:	3701      	adds	r7, #1
 8010aa0:	4681      	mov	r9, r0
 8010aa2:	468a      	mov	sl, r1
 8010aa4:	9b00      	ldr	r3, [sp, #0]
 8010aa6:	429f      	cmp	r7, r3
 8010aa8:	dc02      	bgt.n	8010ab0 <__kernel_rem_pio2+0x4c8>
 8010aaa:	9b06      	ldr	r3, [sp, #24]
 8010aac:	429f      	cmp	r7, r3
 8010aae:	ddea      	ble.n	8010a86 <__kernel_rem_pio2+0x49e>
 8010ab0:	9a06      	ldr	r2, [sp, #24]
 8010ab2:	ab48      	add	r3, sp, #288	; 0x120
 8010ab4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8010ab8:	e9c6 9a00 	strd	r9, sl, [r6]
 8010abc:	3c01      	subs	r4, #1
 8010abe:	e6fa      	b.n	80108b6 <__kernel_rem_pio2+0x2ce>
 8010ac0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010ac2:	2b02      	cmp	r3, #2
 8010ac4:	dc0b      	bgt.n	8010ade <__kernel_rem_pio2+0x4f6>
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	dc39      	bgt.n	8010b3e <__kernel_rem_pio2+0x556>
 8010aca:	d05d      	beq.n	8010b88 <__kernel_rem_pio2+0x5a0>
 8010acc:	9b02      	ldr	r3, [sp, #8]
 8010ace:	f003 0007 	and.w	r0, r3, #7
 8010ad2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8010ad6:	ecbd 8b02 	vpop	{d8}
 8010ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ade:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010ae0:	2b03      	cmp	r3, #3
 8010ae2:	d1f3      	bne.n	8010acc <__kernel_rem_pio2+0x4e4>
 8010ae4:	9b05      	ldr	r3, [sp, #20]
 8010ae6:	9500      	str	r5, [sp, #0]
 8010ae8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010aec:	eb0d 0403 	add.w	r4, sp, r3
 8010af0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8010af4:	46a2      	mov	sl, r4
 8010af6:	9b00      	ldr	r3, [sp, #0]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	f1aa 0a08 	sub.w	sl, sl, #8
 8010afe:	dc69      	bgt.n	8010bd4 <__kernel_rem_pio2+0x5ec>
 8010b00:	46aa      	mov	sl, r5
 8010b02:	f1ba 0f01 	cmp.w	sl, #1
 8010b06:	f1a4 0408 	sub.w	r4, r4, #8
 8010b0a:	f300 8083 	bgt.w	8010c14 <__kernel_rem_pio2+0x62c>
 8010b0e:	9c05      	ldr	r4, [sp, #20]
 8010b10:	ab48      	add	r3, sp, #288	; 0x120
 8010b12:	441c      	add	r4, r3
 8010b14:	2000      	movs	r0, #0
 8010b16:	2100      	movs	r1, #0
 8010b18:	2d01      	cmp	r5, #1
 8010b1a:	f300 809a 	bgt.w	8010c52 <__kernel_rem_pio2+0x66a>
 8010b1e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8010b22:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8010b26:	f1bb 0f00 	cmp.w	fp, #0
 8010b2a:	f040 8098 	bne.w	8010c5e <__kernel_rem_pio2+0x676>
 8010b2e:	9b04      	ldr	r3, [sp, #16]
 8010b30:	e9c3 7800 	strd	r7, r8, [r3]
 8010b34:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8010b38:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010b3c:	e7c6      	b.n	8010acc <__kernel_rem_pio2+0x4e4>
 8010b3e:	9e05      	ldr	r6, [sp, #20]
 8010b40:	ab48      	add	r3, sp, #288	; 0x120
 8010b42:	441e      	add	r6, r3
 8010b44:	462c      	mov	r4, r5
 8010b46:	2000      	movs	r0, #0
 8010b48:	2100      	movs	r1, #0
 8010b4a:	2c00      	cmp	r4, #0
 8010b4c:	da33      	bge.n	8010bb6 <__kernel_rem_pio2+0x5ce>
 8010b4e:	f1bb 0f00 	cmp.w	fp, #0
 8010b52:	d036      	beq.n	8010bc2 <__kernel_rem_pio2+0x5da>
 8010b54:	4602      	mov	r2, r0
 8010b56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b5a:	9c04      	ldr	r4, [sp, #16]
 8010b5c:	e9c4 2300 	strd	r2, r3, [r4]
 8010b60:	4602      	mov	r2, r0
 8010b62:	460b      	mov	r3, r1
 8010b64:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8010b68:	f7ef fb8e 	bl	8000288 <__aeabi_dsub>
 8010b6c:	ae4a      	add	r6, sp, #296	; 0x128
 8010b6e:	2401      	movs	r4, #1
 8010b70:	42a5      	cmp	r5, r4
 8010b72:	da29      	bge.n	8010bc8 <__kernel_rem_pio2+0x5e0>
 8010b74:	f1bb 0f00 	cmp.w	fp, #0
 8010b78:	d002      	beq.n	8010b80 <__kernel_rem_pio2+0x598>
 8010b7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b7e:	4619      	mov	r1, r3
 8010b80:	9b04      	ldr	r3, [sp, #16]
 8010b82:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010b86:	e7a1      	b.n	8010acc <__kernel_rem_pio2+0x4e4>
 8010b88:	9c05      	ldr	r4, [sp, #20]
 8010b8a:	ab48      	add	r3, sp, #288	; 0x120
 8010b8c:	441c      	add	r4, r3
 8010b8e:	2000      	movs	r0, #0
 8010b90:	2100      	movs	r1, #0
 8010b92:	2d00      	cmp	r5, #0
 8010b94:	da09      	bge.n	8010baa <__kernel_rem_pio2+0x5c2>
 8010b96:	f1bb 0f00 	cmp.w	fp, #0
 8010b9a:	d002      	beq.n	8010ba2 <__kernel_rem_pio2+0x5ba>
 8010b9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010ba0:	4619      	mov	r1, r3
 8010ba2:	9b04      	ldr	r3, [sp, #16]
 8010ba4:	e9c3 0100 	strd	r0, r1, [r3]
 8010ba8:	e790      	b.n	8010acc <__kernel_rem_pio2+0x4e4>
 8010baa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010bae:	f7ef fb6d 	bl	800028c <__adddf3>
 8010bb2:	3d01      	subs	r5, #1
 8010bb4:	e7ed      	b.n	8010b92 <__kernel_rem_pio2+0x5aa>
 8010bb6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8010bba:	f7ef fb67 	bl	800028c <__adddf3>
 8010bbe:	3c01      	subs	r4, #1
 8010bc0:	e7c3      	b.n	8010b4a <__kernel_rem_pio2+0x562>
 8010bc2:	4602      	mov	r2, r0
 8010bc4:	460b      	mov	r3, r1
 8010bc6:	e7c8      	b.n	8010b5a <__kernel_rem_pio2+0x572>
 8010bc8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8010bcc:	f7ef fb5e 	bl	800028c <__adddf3>
 8010bd0:	3401      	adds	r4, #1
 8010bd2:	e7cd      	b.n	8010b70 <__kernel_rem_pio2+0x588>
 8010bd4:	e9da 8900 	ldrd	r8, r9, [sl]
 8010bd8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8010bdc:	9b00      	ldr	r3, [sp, #0]
 8010bde:	3b01      	subs	r3, #1
 8010be0:	9300      	str	r3, [sp, #0]
 8010be2:	4632      	mov	r2, r6
 8010be4:	463b      	mov	r3, r7
 8010be6:	4640      	mov	r0, r8
 8010be8:	4649      	mov	r1, r9
 8010bea:	f7ef fb4f 	bl	800028c <__adddf3>
 8010bee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010bf2:	4602      	mov	r2, r0
 8010bf4:	460b      	mov	r3, r1
 8010bf6:	4640      	mov	r0, r8
 8010bf8:	4649      	mov	r1, r9
 8010bfa:	f7ef fb45 	bl	8000288 <__aeabi_dsub>
 8010bfe:	4632      	mov	r2, r6
 8010c00:	463b      	mov	r3, r7
 8010c02:	f7ef fb43 	bl	800028c <__adddf3>
 8010c06:	ed9d 7b06 	vldr	d7, [sp, #24]
 8010c0a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010c0e:	ed8a 7b00 	vstr	d7, [sl]
 8010c12:	e770      	b.n	8010af6 <__kernel_rem_pio2+0x50e>
 8010c14:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010c18:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8010c1c:	4640      	mov	r0, r8
 8010c1e:	4632      	mov	r2, r6
 8010c20:	463b      	mov	r3, r7
 8010c22:	4649      	mov	r1, r9
 8010c24:	f7ef fb32 	bl	800028c <__adddf3>
 8010c28:	e9cd 0100 	strd	r0, r1, [sp]
 8010c2c:	4602      	mov	r2, r0
 8010c2e:	460b      	mov	r3, r1
 8010c30:	4640      	mov	r0, r8
 8010c32:	4649      	mov	r1, r9
 8010c34:	f7ef fb28 	bl	8000288 <__aeabi_dsub>
 8010c38:	4632      	mov	r2, r6
 8010c3a:	463b      	mov	r3, r7
 8010c3c:	f7ef fb26 	bl	800028c <__adddf3>
 8010c40:	ed9d 7b00 	vldr	d7, [sp]
 8010c44:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010c48:	ed84 7b00 	vstr	d7, [r4]
 8010c4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c50:	e757      	b.n	8010b02 <__kernel_rem_pio2+0x51a>
 8010c52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010c56:	f7ef fb19 	bl	800028c <__adddf3>
 8010c5a:	3d01      	subs	r5, #1
 8010c5c:	e75c      	b.n	8010b18 <__kernel_rem_pio2+0x530>
 8010c5e:	9b04      	ldr	r3, [sp, #16]
 8010c60:	9a04      	ldr	r2, [sp, #16]
 8010c62:	601f      	str	r7, [r3, #0]
 8010c64:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8010c68:	605c      	str	r4, [r3, #4]
 8010c6a:	609d      	str	r5, [r3, #8]
 8010c6c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010c70:	60d3      	str	r3, [r2, #12]
 8010c72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c76:	6110      	str	r0, [r2, #16]
 8010c78:	6153      	str	r3, [r2, #20]
 8010c7a:	e727      	b.n	8010acc <__kernel_rem_pio2+0x4e4>
 8010c7c:	41700000 	.word	0x41700000
 8010c80:	3e700000 	.word	0x3e700000
 8010c84:	00000000 	.word	0x00000000

08010c88 <scalbn>:
 8010c88:	b570      	push	{r4, r5, r6, lr}
 8010c8a:	ec55 4b10 	vmov	r4, r5, d0
 8010c8e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010c92:	4606      	mov	r6, r0
 8010c94:	462b      	mov	r3, r5
 8010c96:	b999      	cbnz	r1, 8010cc0 <scalbn+0x38>
 8010c98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010c9c:	4323      	orrs	r3, r4
 8010c9e:	d03f      	beq.n	8010d20 <scalbn+0x98>
 8010ca0:	4b35      	ldr	r3, [pc, #212]	; (8010d78 <scalbn+0xf0>)
 8010ca2:	4629      	mov	r1, r5
 8010ca4:	ee10 0a10 	vmov	r0, s0
 8010ca8:	2200      	movs	r2, #0
 8010caa:	f7ef fca5 	bl	80005f8 <__aeabi_dmul>
 8010cae:	4b33      	ldr	r3, [pc, #204]	; (8010d7c <scalbn+0xf4>)
 8010cb0:	429e      	cmp	r6, r3
 8010cb2:	4604      	mov	r4, r0
 8010cb4:	460d      	mov	r5, r1
 8010cb6:	da10      	bge.n	8010cda <scalbn+0x52>
 8010cb8:	a327      	add	r3, pc, #156	; (adr r3, 8010d58 <scalbn+0xd0>)
 8010cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cbe:	e01f      	b.n	8010d00 <scalbn+0x78>
 8010cc0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010cc4:	4291      	cmp	r1, r2
 8010cc6:	d10c      	bne.n	8010ce2 <scalbn+0x5a>
 8010cc8:	ee10 2a10 	vmov	r2, s0
 8010ccc:	4620      	mov	r0, r4
 8010cce:	4629      	mov	r1, r5
 8010cd0:	f7ef fadc 	bl	800028c <__adddf3>
 8010cd4:	4604      	mov	r4, r0
 8010cd6:	460d      	mov	r5, r1
 8010cd8:	e022      	b.n	8010d20 <scalbn+0x98>
 8010cda:	460b      	mov	r3, r1
 8010cdc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010ce0:	3936      	subs	r1, #54	; 0x36
 8010ce2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8010ce6:	4296      	cmp	r6, r2
 8010ce8:	dd0d      	ble.n	8010d06 <scalbn+0x7e>
 8010cea:	2d00      	cmp	r5, #0
 8010cec:	a11c      	add	r1, pc, #112	; (adr r1, 8010d60 <scalbn+0xd8>)
 8010cee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010cf2:	da02      	bge.n	8010cfa <scalbn+0x72>
 8010cf4:	a11c      	add	r1, pc, #112	; (adr r1, 8010d68 <scalbn+0xe0>)
 8010cf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010cfa:	a319      	add	r3, pc, #100	; (adr r3, 8010d60 <scalbn+0xd8>)
 8010cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d00:	f7ef fc7a 	bl	80005f8 <__aeabi_dmul>
 8010d04:	e7e6      	b.n	8010cd4 <scalbn+0x4c>
 8010d06:	1872      	adds	r2, r6, r1
 8010d08:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010d0c:	428a      	cmp	r2, r1
 8010d0e:	dcec      	bgt.n	8010cea <scalbn+0x62>
 8010d10:	2a00      	cmp	r2, #0
 8010d12:	dd08      	ble.n	8010d26 <scalbn+0x9e>
 8010d14:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010d18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010d1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010d20:	ec45 4b10 	vmov	d0, r4, r5
 8010d24:	bd70      	pop	{r4, r5, r6, pc}
 8010d26:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010d2a:	da08      	bge.n	8010d3e <scalbn+0xb6>
 8010d2c:	2d00      	cmp	r5, #0
 8010d2e:	a10a      	add	r1, pc, #40	; (adr r1, 8010d58 <scalbn+0xd0>)
 8010d30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d34:	dac0      	bge.n	8010cb8 <scalbn+0x30>
 8010d36:	a10e      	add	r1, pc, #56	; (adr r1, 8010d70 <scalbn+0xe8>)
 8010d38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d3c:	e7bc      	b.n	8010cb8 <scalbn+0x30>
 8010d3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010d42:	3236      	adds	r2, #54	; 0x36
 8010d44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010d48:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010d4c:	4620      	mov	r0, r4
 8010d4e:	4b0c      	ldr	r3, [pc, #48]	; (8010d80 <scalbn+0xf8>)
 8010d50:	2200      	movs	r2, #0
 8010d52:	e7d5      	b.n	8010d00 <scalbn+0x78>
 8010d54:	f3af 8000 	nop.w
 8010d58:	c2f8f359 	.word	0xc2f8f359
 8010d5c:	01a56e1f 	.word	0x01a56e1f
 8010d60:	8800759c 	.word	0x8800759c
 8010d64:	7e37e43c 	.word	0x7e37e43c
 8010d68:	8800759c 	.word	0x8800759c
 8010d6c:	fe37e43c 	.word	0xfe37e43c
 8010d70:	c2f8f359 	.word	0xc2f8f359
 8010d74:	81a56e1f 	.word	0x81a56e1f
 8010d78:	43500000 	.word	0x43500000
 8010d7c:	ffff3cb0 	.word	0xffff3cb0
 8010d80:	3c900000 	.word	0x3c900000
 8010d84:	00000000 	.word	0x00000000

08010d88 <floor>:
 8010d88:	ec51 0b10 	vmov	r0, r1, d0
 8010d8c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d94:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8010d98:	2e13      	cmp	r6, #19
 8010d9a:	ee10 5a10 	vmov	r5, s0
 8010d9e:	ee10 8a10 	vmov	r8, s0
 8010da2:	460c      	mov	r4, r1
 8010da4:	dc31      	bgt.n	8010e0a <floor+0x82>
 8010da6:	2e00      	cmp	r6, #0
 8010da8:	da14      	bge.n	8010dd4 <floor+0x4c>
 8010daa:	a333      	add	r3, pc, #204	; (adr r3, 8010e78 <floor+0xf0>)
 8010dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db0:	f7ef fa6c 	bl	800028c <__adddf3>
 8010db4:	2200      	movs	r2, #0
 8010db6:	2300      	movs	r3, #0
 8010db8:	f7ef feae 	bl	8000b18 <__aeabi_dcmpgt>
 8010dbc:	b138      	cbz	r0, 8010dce <floor+0x46>
 8010dbe:	2c00      	cmp	r4, #0
 8010dc0:	da53      	bge.n	8010e6a <floor+0xe2>
 8010dc2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010dc6:	4325      	orrs	r5, r4
 8010dc8:	d052      	beq.n	8010e70 <floor+0xe8>
 8010dca:	4c2d      	ldr	r4, [pc, #180]	; (8010e80 <floor+0xf8>)
 8010dcc:	2500      	movs	r5, #0
 8010dce:	4621      	mov	r1, r4
 8010dd0:	4628      	mov	r0, r5
 8010dd2:	e024      	b.n	8010e1e <floor+0x96>
 8010dd4:	4f2b      	ldr	r7, [pc, #172]	; (8010e84 <floor+0xfc>)
 8010dd6:	4137      	asrs	r7, r6
 8010dd8:	ea01 0307 	and.w	r3, r1, r7
 8010ddc:	4303      	orrs	r3, r0
 8010dde:	d01e      	beq.n	8010e1e <floor+0x96>
 8010de0:	a325      	add	r3, pc, #148	; (adr r3, 8010e78 <floor+0xf0>)
 8010de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de6:	f7ef fa51 	bl	800028c <__adddf3>
 8010dea:	2200      	movs	r2, #0
 8010dec:	2300      	movs	r3, #0
 8010dee:	f7ef fe93 	bl	8000b18 <__aeabi_dcmpgt>
 8010df2:	2800      	cmp	r0, #0
 8010df4:	d0eb      	beq.n	8010dce <floor+0x46>
 8010df6:	2c00      	cmp	r4, #0
 8010df8:	bfbe      	ittt	lt
 8010dfa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010dfe:	4133      	asrlt	r3, r6
 8010e00:	18e4      	addlt	r4, r4, r3
 8010e02:	ea24 0407 	bic.w	r4, r4, r7
 8010e06:	2500      	movs	r5, #0
 8010e08:	e7e1      	b.n	8010dce <floor+0x46>
 8010e0a:	2e33      	cmp	r6, #51	; 0x33
 8010e0c:	dd0b      	ble.n	8010e26 <floor+0x9e>
 8010e0e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010e12:	d104      	bne.n	8010e1e <floor+0x96>
 8010e14:	ee10 2a10 	vmov	r2, s0
 8010e18:	460b      	mov	r3, r1
 8010e1a:	f7ef fa37 	bl	800028c <__adddf3>
 8010e1e:	ec41 0b10 	vmov	d0, r0, r1
 8010e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e26:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8010e2a:	f04f 37ff 	mov.w	r7, #4294967295
 8010e2e:	40df      	lsrs	r7, r3
 8010e30:	4238      	tst	r0, r7
 8010e32:	d0f4      	beq.n	8010e1e <floor+0x96>
 8010e34:	a310      	add	r3, pc, #64	; (adr r3, 8010e78 <floor+0xf0>)
 8010e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e3a:	f7ef fa27 	bl	800028c <__adddf3>
 8010e3e:	2200      	movs	r2, #0
 8010e40:	2300      	movs	r3, #0
 8010e42:	f7ef fe69 	bl	8000b18 <__aeabi_dcmpgt>
 8010e46:	2800      	cmp	r0, #0
 8010e48:	d0c1      	beq.n	8010dce <floor+0x46>
 8010e4a:	2c00      	cmp	r4, #0
 8010e4c:	da0a      	bge.n	8010e64 <floor+0xdc>
 8010e4e:	2e14      	cmp	r6, #20
 8010e50:	d101      	bne.n	8010e56 <floor+0xce>
 8010e52:	3401      	adds	r4, #1
 8010e54:	e006      	b.n	8010e64 <floor+0xdc>
 8010e56:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010e5a:	2301      	movs	r3, #1
 8010e5c:	40b3      	lsls	r3, r6
 8010e5e:	441d      	add	r5, r3
 8010e60:	45a8      	cmp	r8, r5
 8010e62:	d8f6      	bhi.n	8010e52 <floor+0xca>
 8010e64:	ea25 0507 	bic.w	r5, r5, r7
 8010e68:	e7b1      	b.n	8010dce <floor+0x46>
 8010e6a:	2500      	movs	r5, #0
 8010e6c:	462c      	mov	r4, r5
 8010e6e:	e7ae      	b.n	8010dce <floor+0x46>
 8010e70:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8010e74:	e7ab      	b.n	8010dce <floor+0x46>
 8010e76:	bf00      	nop
 8010e78:	8800759c 	.word	0x8800759c
 8010e7c:	7e37e43c 	.word	0x7e37e43c
 8010e80:	bff00000 	.word	0xbff00000
 8010e84:	000fffff 	.word	0x000fffff

08010e88 <_init>:
 8010e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e8a:	bf00      	nop
 8010e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e8e:	bc08      	pop	{r3}
 8010e90:	469e      	mov	lr, r3
 8010e92:	4770      	bx	lr

08010e94 <_fini>:
 8010e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e96:	bf00      	nop
 8010e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e9a:	bc08      	pop	{r3}
 8010e9c:	469e      	mov	lr, r3
 8010e9e:	4770      	bx	lr
